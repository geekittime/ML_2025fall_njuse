number,state,title,user/login,body,created_at,updated_at,closed_at,merged_at,merged,comments,review_comments,commits,additions,deletions,changed_files
157973,closed,Fix a `-Wunused-variable` warning on windows,bogner,The `UID` variable is only being used inside the `#ifndef _WIN32` block - move the definition into the block as well.,2025-09-10T23:55:35Z,2025-09-11T00:52:34Z,2025-09-11T00:35:17Z,2025-09-11T00:35:17Z,True,2,0,1,1,1,1
157982,closed,Fix bazel target broken in #157537,jtstogel,,2025-09-11T02:04:54Z,2025-09-11T02:16:53Z,2025-09-11T02:16:53Z,2025-09-11T02:16:53Z,True,2,0,1,1,0,1
157972,closed,[compiler-rt] Mark some tests as unsupported on Windows.,cmtice,"PR157951 removed 'REQUIRES: shell' from several tests, which (among other things) caused them to start running on some Windows builders -- the 'REQUIRES: shell' prevented that.  Some of those tests fail on Windows. This PR marks those failing tests as UNSUPPORTED on Windows.",2025-09-10T23:45:39Z,2025-09-11T02:28:11Z,2025-09-11T02:28:10Z,2025-09-11T02:28:10Z,True,1,0,1,8,0,4
157967,closed,[compiler-rt] Update fuzzer/focus-function.test to not require shell.,cmtice,Replace sub-shell for-loops with python calls so this test can run in the lit internal shell. This is part of our work migrating to use the internal shell as the default for lit tests.,2025-09-10T22:54:38Z,2025-09-11T02:35:59Z,2025-09-11T02:35:59Z,2025-09-11T02:35:59Z,True,1,2,2,4,5,1
157963,closed,Add tbaa-semantics-checks.test to profcheck-xfail.txt post- #147670,mtrofin,,2025-09-10T22:07:32Z,2025-09-10T22:10:01Z,2025-09-10T22:07:41Z,2025-09-10T22:07:41Z,True,1,0,1,1,0,1
157971,closed,[flang] Fix MSVC build break after e062b9c9a3433,kparzysz,,2025-09-10T23:25:53Z,2025-09-11T00:16:30Z,2025-09-10T23:54:53Z,2025-09-10T23:54:53Z,True,1,0,1,2,2,1
157966,closed,[compiler-rt] Fix sig-trap.test to work with lit internal shell.,cmtice,"Update sig-trap.test to work with the lit internal shell, as part of our migration to make the internal shell the default for lit tests.",2025-09-10T22:22:48Z,2025-09-11T02:29:23Z,2025-09-11T02:29:22Z,2025-09-11T02:29:22Z,True,1,0,1,1,1,1
157985,closed,[clang][ExprConst][NFC] Take a const ASTContext in a few places,tbaederr,We don't need a mutable `ASTContext` here.,2025-09-11T03:31:10Z,2025-09-11T05:49:46Z,2025-09-11T05:33:27Z,2025-09-11T05:33:27Z,True,4,0,1,3,3,1
157961,closed,[profcheck] Add test introduced in #156477 to profcheck-xfail list,mtrofin,The test exposes existing root profile propagation issues,2025-09-10T21:40:44Z,2025-09-10T21:53:38Z,2025-09-10T21:53:36Z,2025-09-10T21:53:36Z,True,0,0,2,1,0,1
157960,closed,[libc] Migrate some test/src/time tests to ErrnoCheckingTest.,vonosmas,"Use ErrnoCheckingTest harness to clear out / validate errno value before/after the test respectively. Clean up explicit libc_errno.h inclusions which is unnecessary, since no test modifies errno directly.",2025-09-10T21:29:40Z,2025-09-11T00:00:09Z,2025-09-11T00:00:02Z,2025-09-11T00:00:02Z,True,2,0,2,64,48,8
157955,closed,[RISCV] Use default promotion for i32 CTLZ_ZERO_UNDEF on RV64 with XTHeadBb.,topperc,"If we don't need to worry about the input being zero, we can shift the input right by 32 and use TH_FF1.",2025-09-10T20:57:36Z,2025-09-11T07:11:11Z,2025-09-10T22:56:46Z,2025-09-10T22:56:46Z,True,2,0,1,9,7,3
157957,closed,[flang][cuda] Make sure stream is a i64 reference,clementval,"When the stream is a scalar constant, it is lowered as i32. Stream needs to be i64 to pass the verifier. Detect and update the stream reference when it is i32. ",2025-09-10T21:05:11Z,2025-09-11T05:08:49Z,2025-09-11T05:08:46Z,2025-09-11T05:08:46Z,True,1,7,2,25,1,2
157953,closed,"Revert ""[DAGCombiner] Relax condition for extract_vector_elt combine""",aeubanks,"Reverts llvm/llvm-project#157658

Causes hangs, see https://github.com/llvm/llvm-project/pull/157658#issuecomment-3276441812",2025-09-10T20:46:10Z,2025-09-10T21:33:45Z,2025-09-10T21:33:45Z,2025-09-10T21:33:44Z,True,1,0,2,1008,707,23
157952,closed,[flang][cuda] Fix type mismatch when transferring logical,clementval,,2025-09-10T20:33:56Z,2025-09-10T21:03:15Z,2025-09-10T20:56:40Z,2025-09-10T20:56:40Z,True,1,0,2,58,10,2
157950,closed,Test RISCV disassembler coverage,jurahul,,2025-09-10T20:25:07Z,2025-09-10T21:03:57Z,2025-09-10T21:03:57Z,,False,0,0,1,3,3,1
157951,closed,[compiler-rt] Removed unnecessary 'REQUIRES: shell' from lit tests.,cmtice,"As part of our work to migrate tests to use the lit internal shell by default, this removes 'REQUIRES: shell' from tests that don't actually require it. In one case the test was updated slightly to pass without requiring shell.",2025-09-10T20:29:35Z,2025-09-10T21:13:16Z,2025-09-10T21:13:16Z,2025-09-10T21:13:16Z,True,1,0,1,1,20,8
157949,closed,[AMDGPU] llvm.prefetch documentation for gfx1250. NFC,rampitec,,2025-09-10T20:20:01Z,2025-09-10T21:06:35Z,2025-09-10T21:06:33Z,2025-09-10T21:06:33Z,True,2,3,1,21,1,2
157947,closed,[docs][OpenMP] Claim TASKGRAPH,kparzysz,cc: @jtb20,2025-09-10T20:02:30Z,2025-09-10T20:14:43Z,2025-09-10T20:14:38Z,2025-09-10T20:14:38Z,True,1,0,1,1,1,1
157939,closed,[FunctionSpecialization] Fix profile count preserving logic,alanzhao1,"The previous fix in #157768 had a bug; instead of subtracting the original function's call count per call site of a specialization, we were subtracting the running total of the specialization's calls.

Tracking issue: #147390",2025-09-10T19:41:25Z,2025-09-11T07:13:22Z,2025-09-11T06:22:21Z,2025-09-11T06:22:21Z,True,4,1,5,17,12,3
157938,closed,[AMDGPU] NFC. Add testcase to test SIInsertWaitcnts::generateWaitcntInstBefore,choikwa,Pre-commit testcase for https://github.com/llvm/llvm-project/pull/157821,2025-09-10T19:30:26Z,2025-09-10T20:39:02Z,2025-09-10T20:39:02Z,2025-09-10T20:39:02Z,True,1,0,2,90,0,1
157942,closed,[libc] Clean up errno header usage in wchar tests.,vonosmas,"See PR #157898 and PR #157517 for similar changes to math tests.

Don't include libc_errno.h header, since the tests don't manipulate errno directly. Instead, where appropriate, include hdr/errno_macros.h proxy header to get errno constant values to match against.",2025-09-10T19:53:37Z,2025-09-10T22:52:47Z,2025-09-10T22:52:24Z,2025-09-10T22:52:24Z,True,1,0,1,22,20,11
157943,closed,[ExpandVectorPredication] Keep the original value name when expanding predicated instructions.,topperc,"This makes it easier to follow a value through the pass. If we pass the original name to the create function, a number will be added as a suffix since the original name is still used until it is replaced.",2025-09-10T19:55:17Z,2025-09-10T23:18:15Z,2025-09-10T23:18:12Z,2025-09-10T23:18:12Z,True,0,0,1,17,16,1
157932,closed,[mlir][Linalg] Allow PartialReductionOpInterface ops in tile_reduction_using_forall,bangtianliu,"Following [PR #120118](https://github.com/llvm/llvm-project/pull/120118), this PR extends `transform.structured.tile_reduction_using_forall` so that it can be applied to any operation implementing `PartialReductionOpInterface`, rather than being restricted to LinalgOp.

Existing tests relevant to linalg ops remain valid: https://github.com/llvm/llvm-project/blob/2a2296b1aab4614bf6c95c3003000832c9d43de5/mlir/test/Dialect/Linalg/transform-tile-reduction.mlir#L114

Additional tests for non-Linalg operations (e.g., IREE custom ops that implement `PartialReductionOpInterface`) will be added on the IREE side.",2025-09-10T18:50:28Z,2025-09-10T19:58:34Z,2025-09-10T19:49:24Z,2025-09-10T19:49:24Z,True,1,0,1,14,7,2
157935,closed,[AMDGPU] Restrict operands of ld_scale_paired to low 256 vgprs. NFCI,rampitec,"This is NFC because these instructions are never selected just
by itself.",2025-09-10T19:18:19Z,2025-09-10T22:17:57Z,2025-09-10T22:17:55Z,2025-09-10T22:17:55Z,True,3,0,1,2,2,1
157931,closed,[flang][cuda][NFC] Simplify IsCUDAShared,clementval,,2025-09-10T18:49:19Z,2025-09-10T19:54:37Z,2025-09-10T19:19:56Z,2025-09-10T19:19:56Z,True,1,0,1,2,4,1
157926,closed,"[flang][OpenMP] Parse TASKGRAPH, GRAPH_ID, and GRAPH_RESET",kparzysz,"This is parsing only, no semantic check are performed.",2025-09-10T18:41:26Z,2025-09-11T01:14:10Z,2025-09-11T00:40:28Z,2025-09-11T00:40:28Z,True,2,0,5,134,0,6
157925,closed,[clang] fix incorrect assumption about function type 's ExtInfo,mizvekov,"This fixes an assumption that the ExtInfo for two same function types would have referential equality.

This should compare these ExtInfos by value instead.

The bug is pre-existing to https://github.com/llvm/llvm-project/pull/147835, but that PR adds another way to reproduce it.",2025-09-10T18:34:15Z,2025-09-10T20:03:28Z,2025-09-10T19:13:38Z,2025-09-10T19:13:38Z,True,1,0,1,32,1,3
157921,closed,[RISCV] Correct the predicate for the ror and rorw with immediate InstAliases.,topperc,,2025-09-10T18:24:14Z,2025-09-10T19:37:54Z,2025-09-10T19:20:27Z,2025-09-10T19:20:27Z,True,3,0,2,50,6,3
157915,closed,[RISCV] Add helper method for detecting BEXTI or TH_TST is supported. NFC,topperc,"These instructions both extract single bit to bit 0 and fill the upper bits with 0.

There's at least one place where we check for BEXTI but not TH_TST. I wanted to keep this patch NFC so that will be a follow up fix.",2025-09-10T18:00:06Z,2025-09-10T19:16:50Z,2025-09-10T19:16:47Z,2025-09-10T19:16:47Z,True,2,0,2,4,2,3
157916,closed,[lldb][test] skip test `TestRerunAndExprDylib.py` on remote,da-viper,,2025-09-10T18:03:12Z,2025-09-10T19:26:36Z,2025-09-10T19:26:36Z,2025-09-10T19:26:36Z,True,1,0,1,1,0,1
157924,closed,[lldb-dap] Fix test: TestDAP_server.py,royitaqi,"See https://github.com/llvm/llvm-project/pull/156803#issuecomment-3275911510 for full context.

Summary:
* In https://github.com/llvm/llvm-project/pull/156803, we see a builtbot failure for `TestDAP_server.py` on Debian. Note that macOS and other Linux distributions (like CentOS, or whatever Linux the [required buildbot](https://github.com/llvm/llvm-project/actions/runs/17594257911/job/49982560193#logs) uses) seem to pass the tests.
* In the 3 newly added tests, the most complex test case passed, while the other easier ones failed.
```
PASS: LLDB (/home/worker/2.0.1/lldb-x86_64-debian/build/bin/clang-x86_64) :: test_connection_timeout_multiple_sessions (TestDAP_server.TestDAP_server.test_connection_timeout_multiple_sessions)
FAIL: LLDB (/home/worker/2.0.1/lldb-x86_64-debian/build/bin/clang-x86_64) :: test_connection_timeout_long_debug_session (TestDAP_server.TestDAP_server.test_connection_timeout_long_debug_session)
FAIL: LLDB (/home/worker/2.0.1/lldb-x86_64-debian/build/bin/clang-x86_64) :: test_connection_timeout_at_server_start (TestDAP_server.TestDAP_server.test_connection_timeout_at_server_start)
```
* The error is that `process.wait(timeout)` timed out during the teardown of the tests.
* The above suggests that maybe the root cause is that the timeout is set too strictly (and that maybe the server termination on Debian is slower than the other Linux distribution for some reason).
* This patch loosens that timeout from 2s to 5s. Let's see if this works.
* FWIW, I cannot verify the root cause, because I don't have a Debian machine.",2025-09-10T18:32:38Z,2025-09-10T19:00:58Z,2025-09-10T18:45:03Z,2025-09-10T18:45:03Z,True,2,0,1,3,3,1
157914,closed,[flang][cuda] Call runtime initialize for derived type with device components,clementval,,2025-09-10T17:57:44Z,2025-09-10T18:20:02Z,2025-09-10T18:19:56Z,2025-09-10T18:19:56Z,True,1,0,1,10,1,2
157912,closed,"Revert ""[AMDGPU] Change expand-fp opt level argument syntax""",justinfargnoli,Reverts llvm/llvm-project#157408 as `pass-parameters.ll` is failing. ,2025-09-10T17:45:46Z,2025-09-10T17:48:34Z,2025-09-10T17:48:34Z,,False,3,1,1,20,18,6
157913,closed,"Revert ""[NFC] Fix CodeQL violations in compiler-rt. (#157793)""",ampandey-1995,This reverts commit b44e6e01f7f778bbb569e07821f5ddfdb90c4d4d.,2025-09-10T17:46:22Z,2025-09-10T17:50:02Z,2025-09-10T17:48:55Z,2025-09-10T17:48:55Z,True,2,0,1,19,21,5
157910,closed,[compiler-rt] Update some tests to pass with lit internal shell.,cmtice,The lit internal shell needs environment variable definitions to be preceded by the 'env' keyword. This PR add that to tests that were missing it.,2025-09-10T17:39:40Z,2025-09-10T18:38:20Z,2025-09-10T18:38:20Z,2025-09-10T18:38:20Z,True,1,0,1,6,6,6
157907,closed,"Revert ""[NFC] Fix CodeQL violations in compiler-rt.""",ampandey-1995,Reverts llvm/llvm-project#157793,2025-09-10T17:25:20Z,2025-09-10T17:29:27Z,2025-09-10T17:29:26Z,,False,4,0,1,19,21,5
157906,closed,[NFCI] Fix Wattributes warnings from Sema.,erichkeane,"See: https://github.com/llvm/llvm-project/issues/157834

There is some visibility concerns here, so this patch suppresses the diagnostic. I believe we are doing this intentionally, so unless someone comes up with a good reason we should either remove the visibility of Sema, or make these types visible, this seems like the right way forward.

Fixes: #157834",2025-09-10T17:24:19Z,2025-09-10T21:28:03Z,2025-09-10T20:37:13Z,2025-09-10T20:37:13Z,True,5,0,2,7,0,1
157901,closed,[RISCV] Extend zvqdot matching to handle disjoint or,XChy,"This patch makes use of pattern matching to handle disjoint or. Also, it simplifies the multiplication matching.",2025-09-10T16:59:50Z,2025-09-10T17:27:52Z,2025-09-10T17:27:52Z,2025-09-10T17:27:52Z,True,1,0,2,133,9,2
157905,closed,[lldb] Remove unused swig macro (NFC),kastiglione,,2025-09-10T17:15:09Z,2025-09-10T17:39:44Z,2025-09-10T17:39:39Z,2025-09-10T17:39:39Z,True,1,0,1,0,17,1
157898,closed,[libc] Clean up errno header usage in math tests.,vonosmas,"This is one more follow-up to PR https://github.com/llvm/llvm-project/pull/157517 that cleans up the usage of
libc_errno in math unit-tests (non-smoke). It follows the same rule:

* if you use libc_errno in code literally, include src/__support/libc_errno.h
* if you only rely on errno constants, include hdr/errno_macros.h

Several tests for exp/log still retain the direct libc_errno usage,
since in some cases they skip doing any validation if the error was
raised. But the direct usage of libc_errno is removed from all other
cases.",2025-09-10T16:55:08Z,2025-09-10T18:18:08Z,2025-09-10T18:18:08Z,2025-09-10T18:18:08Z,True,1,0,3,27,112,33
157894,closed,"Reapply ""[APINotes] Prefer diff -u over diff -b""",boomanaiden154,"This reverts commit 8d35bcc52117b79517f518de952b4b50463de160.

This was causing failures on MacOS due to the head command there not supporting negative offsets. This patch fixes that by removing the call to HEAD and relaxing the requirements around removing the last line of the file.",2025-09-10T16:42:57Z,2025-09-10T17:04:29Z,2025-09-10T17:04:03Z,2025-09-10T17:04:03Z,True,1,0,1,23,32,2
157891,closed,[RISCV] Add helper method for checking for Zicond or XVentanaCondOps. NFC,topperc,These two extensions have identical functionality so we always want to treat them the same.,2025-09-10T16:19:38Z,2025-09-10T17:24:51Z,2025-09-10T17:24:48Z,2025-09-10T17:24:48Z,True,1,0,2,9,11,2
157877,closed,[AMDGPU] Add builtins and intrinsics for cluster attributes,shiltian,Co-authored-by: Ivan Kosarev <ivan.kosarev@amd.com>,2025-09-10T15:24:12Z,2025-09-10T18:41:57Z,2025-09-10T18:05:19Z,2025-09-10T18:05:19Z,True,7,0,1,194,0,3
157875,closed,Mark variable as maybe unused (only used in debug mode),basioli-k,,2025-09-10T15:10:21Z,2025-09-10T15:24:14Z,2025-09-10T15:10:33Z,2025-09-10T15:10:33Z,True,3,0,1,1,1,1
157884,closed,[LLVM] Prefer octal to hex for printf,boomanaiden154,"Hex escapes of the form \xff are not universally supported in the printf implementations on the platforms that LLVM runs on (although they apparently are in the shell builtins). Octal escapes are required to be supported by POSIX. This patch converts all hex escapes to octal escapes for compatibility reasons.

This came up when trying to turn on lit's internal shell by default for llvm/. We started using /usr/bin/printf instead of the shell builtin on MacOS, which does not support hex escapes.

I used the following python script to automate most of the conversion with a few manual touchups needed:
```py
import sys

def process_line(to_process: str):
    output = """"
    i = 0
    while i < len(to_process):
        if to_process[i:i+2] == '\\x':
            hex_string = to_process[i+2:i+4]
            number = int(hex_string, 16)
            output += ""\\""
            octal_string = oct(number)[2:]
            if len(octal_string) == 1:
                octal_string = ""00"" + octal_string
            elif len(octal_string) == 2:
                octal_string = ""0"" + octal_string
            assert(len(octal_string) == 3)
            output += octal_string
            i += 4
        else:
            output += to_process[i]
            i += 1
    return output

with open(sys.argv[1]) as input_file:
    lines = input_file.readlines()

for i, _ in enumerate(lines):
    lines[i] = process_line(lines[i])

with open(sys.argv[1], 'w') as output_file:
    output_file.writelines(lines)
```",2025-09-10T15:45:39Z,2025-09-10T20:36:48Z,2025-09-10T19:45:34Z,2025-09-10T19:45:34Z,True,4,0,1,67,67,14
157871,closed,[flang][OpenMP] Fix crash on DECLARE REDUCTION in unparse-with-symbols,kparzysz,,2025-09-10T14:46:20Z,2025-09-10T15:07:10Z,2025-09-10T15:07:04Z,2025-09-10T15:07:04Z,True,3,0,1,24,1,2
157872,closed,[lldb][test] Re-enable `TestRerunAndExprDylib.py`,da-viper,"the `skipTestIfFn` requires a function that return a string to skip or None to run the test. The `isUbuntu18_04` function returns a bool and the test is skipped on all platforms.


https://github.com/llvm/llvm-project/blob/25ebdfe0ab202a6cb30232d84bc5838439fd67d5/lldb/packages/Python/lldbsuite/test/decorators.py#L145-L157",2025-09-10T14:53:09Z,2025-09-10T19:26:01Z,2025-09-10T16:23:17Z,2025-09-10T16:23:17Z,True,3,0,1,2,2,1
157870,closed,[libc] Update some __builtin_* usage to be compatible with MSVC.,lntue,"__builtin_trap, __builtin_expect, __builtin_ctz*, __builtin_clz*, __builtin_popcount*.",2025-09-10T14:37:59Z,2025-09-10T15:38:15Z,2025-09-10T15:38:12Z,2025-09-10T15:38:12Z,True,1,0,2,47,2,4
157865,closed,[InstCombine] Preserve nneg in foldLogicCastConstant,XChy,This patch makes use of the new public helper function to preserve nneg in `foldLogicCastConstant`.,2025-09-10T14:19:04Z,2025-09-10T17:08:49Z,2025-09-10T16:55:03Z,2025-09-10T16:55:03Z,True,3,1,3,72,2,2
157867,closed,[X86] Fix throughput typo in XMM/YMM PACK/PALIGNR schedule classes,RKSimon,"Only the ZMM PACK/PALIGNR instructions are half-rate on znver4 - confirmed with AMD SOG, uops.info and Agner

Noticed because comparing costs table shuffle costs vs llvm-mca costs kept giving weird numbers if I tested it on znver4 vs any other avx2/avx512 target

It looks like there's other znver4 overrides that make this mistake but many of these need cleaning up properly to use the (currently unused) default classes",2025-09-10T14:32:38Z,2025-09-10T15:09:25Z,2025-09-10T15:04:26Z,2025-09-10T15:04:26Z,True,1,0,2,117,101,7
157857,closed,[NFC][LLVM] Fix link in Maintainers.md,DrSergei,Fixed link to LLDB maintainers list (format was changed in [48ace3f](https://github.com/llvm/llvm-project/commit/48ace3f872e4d844471cd1e821502dece3fe2bc0)). ,2025-09-10T13:31:27Z,2025-09-10T19:56:50Z,2025-09-10T19:56:50Z,2025-09-10T19:56:50Z,True,1,0,1,1,1,1
157861,closed,AMDGPU: Remove most manual AVLdSt decoder code,arsenm,"This was additional hacking around using incorrect register class
constraints for paired data operands. I'm not really sure why we
need any of what's left. In particular the IS_VGPR special case
seems backwards from how the encoding works.",2025-09-10T13:45:58Z,2025-09-10T23:16:28Z,2025-09-10T23:13:58Z,2025-09-10T23:13:58Z,True,3,0,1,0,42,1
157856,closed,[offload] Fix finding libomptarget in runtimes build,mgorny,"Per the logic in top-level CMakeLists, `libomptarget` is placed into `LLVM_LIBRARY_OUTPUT_INTDIR` when this variable is set.  Adjust the test logic to include this directory in `-L` and `-Wl,-rpath` arguments as well, in order to fix finding tests when building via the `runtimes` top-level directory.",2025-09-10T13:28:32Z,2025-09-10T14:32:04Z,2025-09-10T14:31:22Z,2025-09-10T14:31:22Z,True,3,0,1,2,0,1
157847,closed,[TableGen][DecoderEmitter] Report all decoding conflicts,jurahul,Do not exit when the first decoding conflict is encountered. Instead record the conflict and continue to report any additional decoding conflicts and exit fatally after all instructions have been processed.,2025-09-10T12:36:22Z,2025-09-10T16:06:48Z,2025-09-10T16:06:45Z,2025-09-10T16:06:45Z,True,1,14,4,64,11,2
157851,closed,[InstCombine] Use intersectForOffsetAdd() in CommonPointerBase,nikic,"Transforms using this helper will add up all the offsets, so we should use intersectForOffsetAdd() instead of plain intersection.

Annoyingly, this requires specially handling the first GEP to avoid losing flags in that case.

Fixes https://github.com/llvm/llvm-project/issues/157714.",2025-09-10T12:43:02Z,2025-09-10T13:57:29Z,2025-09-10T13:57:27Z,2025-09-10T13:57:27Z,True,2,0,1,17,5,2
157845,closed,AMDGPU/UniformityAnalysis: fix G_ZEXTLOAD and G_SEXTLOAD,petar-avramovic,"Use same rules for G_ZEXTLOAD and G_SEXTLOAD as for G_LOAD.
Flat addrspace(0) and private addrspace(5) G_ZEXTLOAD and G_SEXTLOAD
should be always divergent.",2025-09-10T12:31:46Z,2025-09-10T15:57:17Z,2025-09-10T15:57:15Z,2025-09-10T15:57:15Z,True,3,0,1,20,15,2
157844,closed,AMDGPU: Add uniformity analysis test for G_ZEXTLOAD and G_SEXTLOAD,petar-avramovic,,2025-09-10T12:31:44Z,2025-09-10T15:19:48Z,2025-09-10T15:19:45Z,2025-09-10T15:19:45Z,True,3,0,1,66,0,1
157833,closed,"Revert ""Mips: Force 64bit subtarget feature to be set for ABI options (#157446)""",arsenm,"This reverts commit 7768cca2c6617523e38ba9a8a3e8366752992ec5.

This is less necessary after 7f4c297e94dd604d66429dd0eb85c79e4d8c50a9",2025-09-10T11:15:17Z,2025-09-10T11:43:54Z,2025-09-10T11:43:53Z,2025-09-10T11:43:53Z,True,2,0,1,2,12,1
157828,closed,[Flang][Utils] Fix BUILD_SHARED_LIBS build,Meinersbur,"Required for `BUILD_SHARED_LIBS=ON` builds with optimizations disabled for the new FortranUtils library.

Also see #150027 #155422",2025-09-10T10:25:39Z,2025-09-10T10:49:18Z,2025-09-10T10:49:18Z,2025-09-10T10:49:18Z,True,0,0,1,2,0,1
157838,closed,[mlir][bazel] Fix build issues caused by #157711,basioli-k,,2025-09-10T11:48:55Z,2025-09-10T11:50:55Z,2025-09-10T11:50:55Z,2025-09-10T11:50:55Z,True,0,0,2,0,37,2
157829,closed,[LTO] Fix the issue of resetting the triple to default when it's empty,fzou1,The empty triple is passed to lookupTarget function and it's not set to default one. This issue is exposed after changes in https://github.com/llvm/llvm-project/pull/157591.,2025-09-10T10:40:46Z,2025-09-11T02:43:29Z,2025-09-11T02:43:25Z,2025-09-11T02:43:25Z,True,2,8,5,14,2,2
157831,closed,Revert stubgen-related patches,ftynse,"Despite several hotfixes, things remain broken, in particular:

- installation/distribution (`ninja install / install-distribution`);
- downstream projects with bindings exposed.

See https://github.com/llvm/llvm-project/pull/157583#issuecomment-3274164357 for more details.

Reverts #155741, #157583, #157697. Let's make sure things are fixed and re-land as a unit.",2025-09-10T10:57:04Z,2025-09-10T11:35:40Z,2025-09-10T11:35:38Z,2025-09-10T11:35:38Z,True,1,0,3,3185,166,13
157827,closed,[NFC][GlobalISel] Pass `APInt` by const reference,abhishek-kaushik22,"Change `SpecificConstantMatch` constructor and `isBuildVectorConstantSplat` overloads to take `const APInt&` instead of by value to avoid unnecessary copies, especially for wide integers.",2025-09-10T10:22:29Z,2025-09-11T05:41:20Z,2025-09-11T05:41:14Z,2025-09-11T05:41:14Z,True,1,2,1,9,5,3
157823,closed,[AMDGPU] Fix PR #157408 test failures,frederik-h,The test introduced by PR #157408 requires the amdgpu target. Move it to the subdirectory which only runs if the target is available.,2025-09-10T09:53:23Z,2025-09-10T10:36:55Z,2025-09-10T10:25:21Z,2025-09-10T10:25:21Z,True,2,0,1,0,0,1
157820,closed,[LifetimeSafety] Add PR labeler automation,usx95,This will add label `clang:temporal-safety` to PRs touching the mentioned files.,2025-09-10T09:33:52Z,2025-09-10T10:00:06Z,2025-09-10T10:00:05Z,2025-09-10T10:00:04Z,True,3,0,1,8,0,1
157803,closed,"[QualGroup] Define membership rules, merge sections",uwendi,"This patch updates the LLVM Qualification Group documentation to reflect current group structure and practices:

- Restructures the **Group Composition** section (previously ""Participation"" + ""Contributors"")
- Adds a formal **member table** with affiliations and community handles
- Introduces **participation principles**
- Documents **membership criteria**, **nomination process**, and **review cycle**
- Corrects references to **meeting materials** (wrong path)

These changes aim to improve clarity, inclusiveness, and alignment with similar working groups (e.g., LLVM Security Response Team).",2025-09-10T07:16:40Z,2025-09-10T07:33:12Z,2025-09-10T07:33:11Z,,False,1,0,4,126,26,3
157809,closed,Minimal Bazel module for 21.1.0,gaschler,"I'm not requesting code review or merge yet.

My goal is to have a public commit so Bazel projects can import
a half-working version of llvm-project 21.1.0, for example with
https://bazel.build/rules/lib/globals/module#git_override
The official version at Bazel Central registry is only 17, so quite outdated:
https://github.com/bazelbuild/bazel-central-registry/tree/main/modules/llvm-project

However, this branch here only compiles and passes tests for
bazel build llvm/... clang/...
bazel test llvm/... clang/...

How this was generated:
1. git checkout llvmorg-21.1.0
2.  Copy generated vars.bzl bolt/targets.bzl llvm/targets.bzl
(cd utils/bazel/ &&  bazel build   @llvm-project//... -k)
cp ./utils/bazel/bazel-bazel/external/llvm-project/vars.bzl ..
cp ./utils/bazel/bazel-bazel/external/llvm-project/bolt/targets.bzl ../bolt-targets.bzl
cp ./utils/bazel/bazel-bazel/external/llvm-project/llvm/targets.bzl ../llvm-targets.bzl
mv ../vars.bzl .
mv ../llvm-targets.bzl llvm/targets.bzl
mv ../bolt-targets.bzl bolt/targets.bzl
3. Apply Bazel overlay manually
cp -r utils/bazel/llvm-project-overlay/* .
rm -r utils/bazel/llvm-project-overlay/
4. Write custom MODULE.bazel
5. Small patches to clang/ and llvm/BUILD.bazel 

",2025-09-10T08:13:06Z,2025-09-10T08:27:45Z,2025-09-10T08:15:21Z,,False,1,0,241,23138,9047,786
157807,closed,[X86][Test] Update tests for `lround` and `llrint` (NFC),tgross35,"Apply the following changes:

* Ensure all float types are covered (`f16` and `f128` were often missing)
* Switch to more straightforward test names
* Remove some CHECK directives that are outdated (prefix changed but the directive did not get removed)
* Add common check prefixes to merge similar blocks
* Test a more similar set of platforms
* Add missing `nounwind`
* Test `strictfp` for each libcall where possible

This is a pre-test for [1].

[1]: https://github.com/llvm/llvm-project/pull/152684",2025-09-10T07:55:16Z,2025-09-10T08:31:33Z,2025-09-10T08:30:44Z,2025-09-10T08:30:44Z,True,2,0,1,1207,395,6
157817,closed,AMDGPU: Fix using unaligned VGPR in literal test,arsenm,"Make sure the tested error is the literal error, not
for unaligned registers.",2025-09-10T09:17:32Z,2025-09-10T10:08:35Z,2025-09-10T09:55:33Z,2025-09-10T09:55:33Z,True,3,0,1,2,2,1
157810,closed,[AMDGPU] Generate canonical additions in AMDGPUPromoteAlloca,ritter-x2a,"When we know that one operand of an addition is a constant, we might was
well put it on the right-hand side and avoid the work to canonicalize it
in a later pass.",2025-09-10T08:31:17Z,2025-09-10T12:46:48Z,2025-09-10T12:46:46Z,2025-09-10T12:46:46Z,True,4,0,1,10,10,4
157800,closed,[analyzer][NFC] Modernize LivenessValues::isLive,steakhal,Removing statefullness also adds the benefit of short circuiting.,2025-09-10T06:40:57Z,2025-09-10T10:14:57Z,2025-09-10T10:14:57Z,2025-09-10T10:14:57Z,True,1,0,1,8,6,1
157793,closed,[NFC] Fix CodeQL violations in compiler-rt.,ampandey-1995,"This pull request addresses fixes against violations happening under subcategory 'cpp/wrong-type-format-argument' related to dfsan,fuzzer,hwasan.",2025-09-10T04:25:32Z,2025-09-10T18:11:46Z,2025-09-10T16:13:48Z,2025-09-10T16:13:48Z,True,6,0,1,21,19,5
157796,closed,[orc-rt] Simplify construction of SPSSerializableExpected from values.,lhames,Adds an overload of toSPSSerializableExpected that takes a plain T value and returns an SPSSerializableExpected<T>. This will reduce some boilerplate when creating SPSSerializableExpected values.,2025-09-10T04:51:42Z,2025-09-10T04:56:16Z,2025-09-10T04:56:12Z,2025-09-10T04:56:12Z,True,0,0,1,29,8,2
157791,closed,[Support] Use std::conditional_t in several type traits (NFC),kazutakahirata,"With std::conditional_t, we don't have to have two templates for each
of these type traits.
",2025-09-10T04:10:28Z,2025-09-10T15:37:49Z,2025-09-10T15:37:04Z,2025-09-10T15:37:04Z,True,1,0,1,9,23,1
157792,closed,[llvm] Proofread Contributing.rst,kazutakahirata,,2025-09-10T04:10:53Z,2025-09-10T15:37:55Z,2025-09-10T15:37:13Z,2025-09-10T15:37:12Z,True,0,0,1,11,11,1
157798,closed,[X86][LiveRegUnits] Exclude reserved registers from TargetRegisterClass,phoebewang,Fixes regression casued by #156817.,2025-09-10T06:07:23Z,2025-09-10T06:43:09Z,2025-09-10T06:42:44Z,2025-09-10T06:42:44Z,True,1,0,1,25,1,2
157790,closed,[Support] Use CTLog2 from PointerLikeTypeTraits.h (NFC),kazutakahirata,"This patch replaces ConstantLog2 with CTLog2.  ConstantLog2 only
operates on alignment values, making the two interchangeable in this
context.  CTLog2 also has the benefit of a static_assert that ensures
its parameter is a power of two.
",2025-09-10T04:10:07Z,2025-09-10T15:37:43Z,2025-09-10T15:36:56Z,2025-09-10T15:36:56Z,True,2,0,1,4,12,2
157816,closed,AMDGPU: Update baseline test checks in disassembler test,arsenm,This test is strange since it's full of decoding failure warnings,2025-09-10T09:15:55Z,2025-09-10T09:44:23Z,2025-09-10T09:44:22Z,2025-09-10T09:44:22Z,True,2,0,1,9,0,1
157788,closed,[AArch64] Use SignExtend64<N> (NFC),kazutakahirata,"This patch uses SignExtend64<N> to simplify sign extensions.
",2025-09-10T04:09:13Z,2025-09-10T15:37:24Z,2025-09-10T15:36:40Z,2025-09-10T15:36:40Z,True,1,0,1,8,38,1
157789,closed,[ADT] Fix comment typos in STLForwardCompat.h,kazutakahirata,"st::type_identity_t is from C++20, not C++23.
",2025-09-10T04:09:29Z,2025-09-10T15:37:32Z,2025-09-10T15:36:48Z,2025-09-10T15:36:48Z,True,1,0,1,2,2,1
157787,closed,"[orc-rt] Add WrapperFunction::handle support for fns, fn-ptrs.",lhames,Adds support for using functions and function pointers to the WrapperFunction::handle utility.,2025-09-10T03:57:35Z,2025-09-10T04:15:37Z,2025-09-10T04:15:32Z,2025-09-10T04:15:32Z,True,0,0,1,50,5,2
157786,closed,[orc-rt] Use perfect forwarding for scope-exit initialization.,lhames,Allows the use of move-only types with make_scope_exit.,2025-09-10T03:40:12Z,2025-09-10T03:47:04Z,2025-09-10T03:47:01Z,2025-09-10T03:47:01Z,True,0,0,1,14,1,2
157784,closed,[orc-rt] Restore perfect forwarding in move_only_function initializat…,lhames,"…ion.

After the recent change to hoist std::decay_t (cd8f47b2d4e) we were forcing move-initialization of the callable type. This commit restores perfect forwarding so that we copy-initialize where expected.",2025-09-10T03:22:02Z,2025-09-10T03:26:28Z,2025-09-10T03:26:23Z,2025-09-10T03:26:23Z,True,0,0,1,26,5,2
157785,closed,[orc-rt] Host std::decay_t out of helper for orc_rt::bind_front. NFC.,lhames,The helper implementation shouldn't differ based on how it's initialized.,2025-09-10T03:31:53Z,2025-09-10T03:35:39Z,2025-09-10T03:35:36Z,2025-09-10T03:35:36Z,True,0,0,1,9,7,1
157781,closed,[orc-rt] Add const support to move_only_function.,lhames,"Adds support for both const move_only_functions, and const callees.",2025-09-10T02:34:28Z,2025-09-10T02:39:28Z,2025-09-10T02:39:24Z,2025-09-10T02:39:24Z,True,0,0,1,117,4,2
157777,closed,[ExpandVectorPredication] Expand vp_merge and vp_select in expandPredication.,topperc,Stacked on https://github.com/llvm/llvm-project/pull/157735,2025-09-10T01:33:46Z,2025-09-10T15:50:33Z,2025-09-10T15:50:30Z,2025-09-10T15:50:30Z,True,1,2,5,12,4,2
157780,closed,[bazel][lldb] Port #153922: arm cortex-m unwinding,rupprecht,,2025-09-10T02:22:34Z,2025-09-10T02:25:22Z,2025-09-10T02:25:22Z,2025-09-10T02:25:22Z,True,0,0,1,4,0,1
157770,closed,[mlir][LLVMIR] Support memory model relaxation annotations (MMRA),krzysz00,"This commit adds support for exportind and importing MMRA data in the LLVM dialect. MMRA is a potentilly-discardable piece of metadata that can be placed on any operation that touches memory (fences, loads, stores, atomics, and intrinsics that operate on memory). It includes one (technically zero) ome more prefix:suffix string pairs which indicate ways in which the LLVM memory model can be relaxed for these annotations.

At the MLIR level, each tag is represented with a
`#llvm.mmra_tag<""prefix"":""suffex"">` attribute, and the MMRA metadata as a whole is represented as a discardable llvm.mmra attribute. (This discardability both allows us to transparently enable MMRA for wrapper dialects like ROCDL and ensures that MLIR passes which don't know about MMRA combining will, conservatively, discard the annotations, per the LLVM spec).",2025-09-10T00:06:13Z,2025-09-10T18:07:36Z,2025-09-10T18:07:36Z,2025-09-10T18:07:35Z,True,4,9,4,210,1,7
157773,closed,[Offload][Conformance] Update olMemFree calls in conformance tests,leandrolcampos,"This PR is a follow-up to the change introduced in #157478, which added a `platform` parameter to the `olMemFree` function.",2025-09-10T00:43:53Z,2025-09-10T01:27:55Z,2025-09-10T01:27:55Z,2025-09-10T01:27:55Z,True,1,0,1,14,34,4
157769,closed,Driver: Fix two comments for accuracy.,pcc,,2025-09-09T23:54:25Z,2025-09-10T17:50:11Z,2025-09-10T17:50:09Z,2025-09-10T17:50:09Z,True,1,0,1,3,2,1
157768,closed,[FunctionSpecialization] Preserve call counts of specialized functions,alanzhao1,"A function that has been specialized will have its function entry counts preserved as follows:

* Each specialization's count is the sum of each call site's basic block's number of entries as computed by `BlockFrequencyInfo`.
* The original function's count will be decreased by the counts of its specializations.

Tracking issue: #147390",2025-09-09T23:38:28Z,2025-09-10T02:03:22Z,2025-09-10T01:27:25Z,2025-09-10T01:27:25Z,True,1,4,4,80,1,2
157766,closed,[RISCV][GISel] Widen G_ABDS/G_ABDU before lowering when Zbb is enabled.,topperc,This allows us to use G_SMIN/SMAX in the lowering.,2025-09-09T23:19:43Z,2025-09-10T19:17:34Z,2025-09-10T19:17:30Z,2025-09-10T19:17:30Z,True,2,0,5,291,157,4
157758,closed,[RISCV] Add VendorXTHeadCondMov to useInversedSetcc.,topperc,These instructions have a eqz/nez operand like Zicond and XVentanaCondOps so the goal of using bexti seems applicable to them as well.,2025-09-09T22:08:16Z,2025-09-10T05:47:54Z,2025-09-10T05:47:51Z,2025-09-10T05:47:51Z,True,1,0,1,6,6,2
157750,closed,[lldb] Pass execution context to CompilerType::GetByteSize - in CommandObjectMemoryRead (NFC),kastiglione,"Some type systems require an execution context be available when working with types (ex: Swift). This fixes `memory read --type` to support such type systems, by passing in an execution context to `GetByteSize()`, instead of passing null. 

rdar://158968545",2025-09-09T21:30:35Z,2025-09-10T16:53:58Z,2025-09-10T16:53:55Z,2025-09-10T16:53:54Z,True,2,0,1,4,3,1
157756,closed,Make flag-only options work in the ParsedCommand mode of adding commands,jimingham,"I neglected to add a test when I was writing tests for this, so of course it broke.  This makes it work again and adds a test.

rdar://159459160",2025-09-09T22:02:38Z,2025-09-10T16:27:29Z,2025-09-10T16:27:29Z,2025-09-10T16:27:29Z,True,2,0,2,80,17,4
157747,closed,[flang][cuda] Remove set_allocator_idx operation,clementval,The allocator index is set from the component genre #157731 . There is no more need of an operation to set it at a later point. ,2025-09-09T20:46:55Z,2025-09-09T21:20:22Z,2025-09-09T21:20:19Z,2025-09-09T21:20:19Z,True,1,0,2,2,344,14
157746,closed,[libc] Add check for support and a test for libc SIMD helpers,jhuber6,"Summary:
This adds a few basic tests for the SIMD helpers and adds a CMake
variable we can use to detect support.
",2025-09-09T20:46:24Z,2025-09-10T00:11:57Z,2025-09-10T00:11:55Z,2025-09-10T00:11:55Z,True,2,6,5,93,1,5
157744,closed,[libc++] Remove the unused cat_files.py script,ldionne,There are no references to it anymore in the codebase.,2025-09-09T20:42:22Z,2025-09-10T20:32:03Z,2025-09-10T11:07:27Z,2025-09-10T11:07:27Z,True,1,0,1,0,51,1
157741,closed,[Clang] Fix __cpuidex conflict with other offloading targets,sarnex,"It seems that for whatever reason we must:
1) Declare aux builtins when the compiling for an offload device
and
2) Define the aux builtin target macros when compiling for an offload device.

In `cpuid.h` we try to define `__cpuidex` if it is not defined. Given the above, the function will both be defined as a builtin in the compiler and we can't rely on the `X86` macros to be undefined in the case the aux-triple is `X86`.

 Previously a workaround was added for NVPTX in https://github.com/llvm/llvm-project/pull/152556, extend it for the other offloading targets.",2025-09-09T20:06:22Z,2025-09-10T15:01:05Z,2025-09-10T15:01:05Z,2025-09-10T15:01:05Z,True,2,1,1,4,1,2
157745,closed,Static build script,isVoid,,2025-09-09T20:42:25Z,2025-09-09T20:42:46Z,2025-09-09T20:42:30Z,,False,2,0,430,34281,14337,956
157739,closed,[libc] Add simple 'tuple' type to CPP helpers,jhuber6,"Summary:
This patch adds support for `cpp::tuple` with basic support for creating
and modifing tuples.
",2025-09-09T19:56:19Z,2025-09-10T00:03:12Z,2025-09-10T00:03:10Z,2025-09-10T00:03:10Z,True,1,3,3,251,0,6
157731,closed,[flang] Add special genre for allocatable and pointer device component,clementval,Allocatable and pointer device components need a different allocator index to be set in their descriptor when it is establish. This PR adds two genre for the components `AllocatableDevice` and `PointerDevice` so the correct allocator index can be set accordingly. ,2025-09-09T18:28:30Z,2025-09-09T20:12:23Z,2025-09-09T20:12:21Z,2025-09-09T20:12:21Z,True,1,3,4,97,33,11
157728,closed,[clang-tools-extra][test] Ensure file is writeable after copying,rupprecht,"After #157572, the invocation to clang-tidy fails w/ `Could not open <...>/crlf.cpp.tmp.dir/Inputs/crlf/crlf.cpp for writing` if run in an environment where the source tree is mounted read-only. This is because `cat` was creating a new file in a writeable dir, but running `cp` preserves the readonly file permissions from the source tree.",2025-09-09T17:57:13Z,2025-09-09T18:23:16Z,2025-09-09T18:23:14Z,2025-09-09T18:23:14Z,True,1,0,1,1,0,1
157735,closed,[ExpandVectorPredication] Improve ALL-CONVERT checking in expand-vp.ll. NFC,topperc,We weren't checking test_vp_int_vscale and we were missing vp.merge CHECK lines.,2025-09-09T19:11:54Z,2025-09-10T04:56:50Z,2025-09-10T04:56:47Z,2025-09-10T04:56:47Z,True,1,0,3,42,1,1
157722,closed,[bazel][libc] Port #157701: msvc compat fixes,rupprecht,,2025-09-09T17:33:01Z,2025-09-09T17:40:24Z,2025-09-09T17:40:23Z,2025-09-09T17:40:23Z,True,1,0,1,2,0,1
157720,closed,[ExpandVectorPredication] Add vp.select to foldEVLIntoMask.,topperc,,2025-09-09T17:29:51Z,2025-09-09T23:52:26Z,2025-09-09T22:56:28Z,2025-09-09T22:56:28Z,True,2,1,1,12,2,2
157715,closed,[Support][modulemap] Fix LLVM_Support modulemap broken in #113364,cachemeifyoucan,"Add VirtualOutputConfig.def to textual header.
",2025-09-09T17:03:13Z,2025-09-09T17:34:06Z,2025-09-09T17:34:05Z,2025-09-09T17:34:05Z,True,0,0,1,1,1,1
157718,closed,"Revert ""[HLSL] Rewrite semantics parsing""",Keenuts,"Reverts llvm/llvm-project#152537

Broke the build in some cases. Need to investigate more for a proper solution.",2025-09-09T17:11:56Z,2025-09-09T17:42:30Z,2025-09-09T17:42:29Z,2025-09-09T17:42:29Z,True,1,0,1,128,419,22
157724,closed,[CIR][NFC] Fix build warnings after #154142,andykaylor,"A recent change introduced a new dtor kind, which caused a build warning in the CIR code where this dtor kind wasn't handled in a switch. This fixes the problem.",2025-09-09T17:44:07Z,2025-09-09T18:22:18Z,2025-09-09T18:22:09Z,2025-09-09T18:22:09Z,True,1,0,1,2,0,1
157716,closed,[DebugInfo][Mem2Reg] Assign uninitialized values with annotated locs,SLTozer,"In PromoteMem2Reg, we perform a DFS over the CFG and track, for each alloca, its incoming value and its associated incoming DebugLoc, both of which are taken from stores to that alloca; these values and DebugLocs are propagated to PHI nodes when new blocks are reached. In the event that for one incoming edge no store instruction has been seen, we propagate an UndefValue and an empty DebugLoc to the PHI.

This is a perfectly valid occurrence, and assigning an empty DebugLoc to the PHI is the correct course of action; therefore, we should pass an annotated DebugLoc instead, so that in DebugLoc coverage tracking we correctly do not expect a valid DebugLoc to be present; we generally mark allocas as having CompilerGenerated locations, so I've chosen to use the same annotation to represent the uninitialized value of that alloca.

This change is NFC outside of DebugLoc coverage tracking builds.",2025-09-09T17:05:07Z,2025-09-10T11:10:57Z,2025-09-10T11:10:57Z,2025-09-10T11:10:56Z,True,1,0,1,5,2,1
157711,closed,[MLIR] Remove CopyOpInterface,joker-eph,This interface isn't used anywhere anymore.,2025-09-09T16:54:35Z,2025-09-11T10:20:36Z,2025-09-10T11:30:18Z,2025-09-10T11:30:18Z,True,8,0,1,3,92,13
157713,closed,[CIR] Add support for copy elision,andykaylor,"This adds basic support for eliding copy constructors. In order to make this possible, it also adds support for returning structures. This support does not include setting an NRVO flag when the class whose copy is being elided has a non-trivial destructor.",2025-09-09T17:00:24Z,2025-09-09T20:32:47Z,2025-09-09T20:32:44Z,2025-09-09T20:32:44Z,True,2,5,2,117,13,7
157708,closed,[flang][acc] Fix incorrect loop body nesting and IV value use,razvanlupusoru,"Two issues are being resolved:
- Incorrect loop body nesting caused by insertion point not being updated after the loop. The scenario is now being tested through `nested_do_loops` function in the test.
- Incorrect IV ssa values due to incorrect handling of scoping.

Additionally, this also adds `--openacc-do-loop-to-acc-loop` flag so that the implicit conversion can be disabled for testing.",2025-09-09T16:47:42Z,2025-09-09T20:09:04Z,2025-09-09T20:09:04Z,2025-09-09T20:09:04Z,True,1,0,1,192,17,3
157707,closed,[DebugInfo] When merging locations prefer unannotated empty locs,SLTozer,"When merging DILocations, we prefer to use DebugLoc::getMergedLocation when possible to better preserve DebugLoc coverage tracking information through transformations (as conversion to DILocations drops all coverage tracking data). Currently, DebugLoc::getMergedLocation checks to see if either DebugLoc is empty and returns it directly if so, to propagate that DebugLoc's coverage tracking data to the merged location; however, it only checks whether either location is valid, not whether they are annotated.

This is significant because an annotated location is not a bug, while an empty unannotated location may be one; therefore, we check to see if either location is unannotated, and prefer to return that location if it exists rather than an annotated one.

This change is NFC outside of DebugLoc coverage tracking builds.",2025-09-09T16:47:18Z,2025-09-10T12:30:21Z,2025-09-10T12:30:21Z,2025-09-10T12:30:21Z,True,1,0,1,12,3,1
157702,closed,[VPlan] Use Unknown instead of empty location in VPlanTransforms,SLTozer,"The default values for DebugLocs in LoopVectorizer/VPlan were recently updated from empty DebugLocs to DebugLoc::getUnknown, as part of the DebugLoc Coverage Tracking work. However, there are some cases where we also pass an explicit empty DebugLoc, in many cases as a filler argument. This patch updates all of these to `getUnknown` for now, until either valid locations or a suitable categorization can be assigned to each instead.

This change is NFC outside of DebugLoc coverage tracking builds.",2025-09-09T16:29:11Z,2025-09-11T10:20:20Z,2025-09-10T09:33:59Z,2025-09-10T09:33:59Z,True,4,0,1,14,12,1
157701,closed,[libc] Some compatibility update for building with MSVC.,lntue,Add compiler identity macro and disable some unsupported features.,2025-09-09T16:15:59Z,2025-09-09T16:58:38Z,2025-09-09T16:55:44Z,2025-09-09T16:55:44Z,True,2,0,1,18,5,6
157699,closed,[Libc++][NFC] Fix typos in tests,cor3ntin,,2025-09-09T16:03:06Z,2025-09-10T16:39:37Z,2025-09-10T16:39:34Z,2025-09-10T16:39:34Z,True,1,0,2,2,2,1
157700,closed,"[WebKit checkers] Treat NULL, 0, and nil like nullptr",rniwa,"This PR makes WebKit checkers treat NULL, 0, and nil like nullptr in various places.",2025-09-09T16:15:14Z,2025-09-10T23:04:07Z,2025-09-10T23:04:03Z,2025-09-10T23:04:03Z,True,1,0,1,40,9,10
157697,closed,[MLIR][Python] move generated type stubs to build directory,makslevental,This PR moves generated type stubs to build directory and also quiets stdout output.,2025-09-09T15:53:12Z,2025-09-09T16:12:02Z,2025-09-09T16:12:01Z,2025-09-09T16:12:01Z,True,1,0,2,4,3,1
157696,closed,[X86] Allow remaining AVX512 per-element shift intrinsics to be used in constexpr,RKSimon,"Handle missing AVX512F epi64 and AVX512BW epi16 cases with existing code paths

Fixes #154287",2025-09-09T15:46:01Z,2025-09-09T16:16:39Z,2025-09-09T16:10:23Z,2025-09-09T16:10:23Z,True,2,0,1,130,56,11
157695,closed,[clang][bytecode] Check reads for null block pointers,tbaederr,"All pointer types can be null, so check that independently from the pointer type.

Fixes #157650",2025-09-09T15:44:51Z,2025-09-11T05:04:33Z,2025-09-11T04:35:29Z,2025-09-11T04:35:29Z,True,2,0,1,26,10,2
157691,closed,[bazel] Undo LSP changes after revert,rupprecht,Reverted in 31bee3421ba48898b0c7c8f3710f9d1bac22cad7,2025-09-09T15:25:58Z,2025-09-09T15:33:06Z,2025-09-09T15:33:05Z,2025-09-09T15:33:05Z,True,0,0,1,0,18,2
157688,closed,[MLIR][Standalone] don't register everything,makslevental,We only need to register `standalone` and `arith`.,2025-09-09T15:09:55Z,2025-09-11T02:11:33Z,2025-09-11T02:11:28Z,,False,1,0,7,23,15,4
157690,closed,[HLSL] Add the `Frs` `DXC` driver option,inbelic,"This pr adds `Frs` as a `DXC` driver option.

It is done by invoking `llvm-objcopy` with the `extract-section=RTS0`
argument specified to output the separate `DXContainer`.

Option behaviour as a reference is found [here](https://github.com/llvm/wg-hlsl/blob/main/proposals/0029-root-signature-driver-options.md#option-frs).

This resolves: https://github.com/llvm/llvm-project/issues/150277.",2025-09-09T15:24:04Z,2025-09-09T17:23:41Z,2025-09-09T17:23:40Z,2025-09-09T17:23:40Z,True,2,2,5,20,2,3
157686,closed,[RISCV][NFC] Fix a misnamed variable,pfusik,,2025-09-09T15:07:00Z,2025-09-10T07:09:23Z,2025-09-10T07:09:23Z,2025-09-10T07:09:23Z,True,2,0,1,2,2,1
157683,closed,[JumpThreading][DebugInfo] Propagate DebugLocs when simplifying loads,SLTozer,"In simplifyPartiallyRedundantLoad we may replace a load with a PHI of available values in predecessor blocks. As part of this process, we may need to cast those values, which we do by inserting a new cast at the end of the predecessor. These cast instructions should take their debug location from the load instruction, just as the PHI does; we make an exception if the predecessor does not unconditionally branch to the load's block, as in that case we are not guaranteed to reach the load and must therefore drop its debug location.

Found using https://github.com/llvm/llvm-project/pull/107279.",2025-09-09T14:54:25Z,2025-09-10T16:28:53Z,2025-09-10T16:28:53Z,2025-09-10T16:28:53Z,True,1,0,1,98,1,2
157685,closed,[analyzer][NFC] Change LiveVariablesImpl::inAssignment from DenseMap to DenseSet,steakhal,The `inAssignment` variable is actually used as a set; let's declare it as a set.,2025-09-09T14:59:36Z,2025-09-09T16:13:37Z,2025-09-09T16:13:28Z,2025-09-09T16:13:28Z,True,1,0,1,4,3,1
157684,closed,[AMDGPU][True16][CodeGen] Fixed two lit tests,broxigarchen,https://github.com/llvm/llvm-project/pull/154875 failed two lit tests,2025-09-09T14:56:22Z,2025-09-09T15:13:23Z,2025-09-09T15:13:23Z,2025-09-09T15:13:23Z,True,1,0,1,4,4,2
157682,closed,[AMDGPU] Treat GEP offsets as signed in AMDGPUPromoteAlloca,ritter-x2a,"[AMDGPU] Treat GEP offsets as signed in AMDGPUPromoteAlloca

AMDGPUPromoteAlloca can transform i32 GEP offsets that operate on
allocas into i64 extractelement indices. Before this patch, negative GEP
offsets would be zero-extended, leading to wrong extractelement indices
with values around (2**32-1).

This fixes failing LlvmLibcCharacterConverterUTF32To8Test tests for
AMDGPU.",2025-09-09T14:44:58Z,2025-09-10T14:24:20Z,2025-09-10T09:32:14Z,2025-09-10T09:32:14Z,True,5,6,2,73,7,2
157681,closed,[clang][bytecode][X86] Allow AVX512 funnel shift by scalar immediate intrinsics to be used in constexpr,RKSimon,"Extends interp__builtin_elementwise_triop to handle (vector, vector, scalar) trinary op intrinsics

Fixes #153152",2025-09-09T14:26:47Z,2025-09-10T18:04:28Z,2025-09-09T16:48:32Z,2025-09-09T16:48:32Z,True,1,0,2,184,60,5
157679,closed,"Revert ""[Dexter] llvm-lit: always log DAP messages""",OCHyams,"Reverts llvm/llvm-project#157145

This was just temporary to help debug a flaky bot",2025-09-09T14:14:23Z,2025-09-09T14:22:06Z,2025-09-09T14:22:05Z,2025-09-09T14:22:05Z,True,0,0,1,2,4,1
157671,closed,AMDGPU: Remove unused getEquivalentAGPRClass,arsenm,,2025-09-09T13:41:51Z,2025-09-09T14:13:02Z,2025-09-09T14:13:01Z,2025-09-09T14:13:01Z,True,2,0,1,0,10,1
157677,closed,"Revert ""[Dexter] Temporarily print DAP logs on specific exception""",OCHyams,"Reverts llvm/llvm-project#157130

This was just a temporary change to investigate a flaky bot failure",2025-09-09T14:10:54Z,2025-09-09T14:19:05Z,2025-09-09T14:19:04Z,2025-09-09T14:19:04Z,True,1,0,1,83,94,82
157673,closed,[Offload] Build libcxx on the GPU libc bot,jhuber6,,2025-09-09T13:42:32Z,2025-09-09T14:35:53Z,2025-09-09T14:35:53Z,2025-09-09T14:35:53Z,True,1,0,1,2,1,1
157670,closed,[analyzer][NFC] Modernize loops in LiveVariables analysis,steakhal,,2025-09-09T13:39:27Z,2025-09-09T14:58:09Z,2025-09-09T14:33:22Z,2025-09-09T14:33:22Z,True,2,2,4,12,25,1
157668,closed,[X86] Allow AVX512 funnel shift intrinsics to be used in constexpr,RKSimon,"Now that they wrap the __builtin_elementwise_fshl/fshr builtin intrinsics this is pretty trivial.

Just one more step towards #153152 - just VBMI2 funnel shifts by immediate",2025-09-09T13:11:11Z,2025-09-09T13:54:04Z,2025-09-09T13:53:49Z,2025-09-09T13:53:49Z,True,2,0,1,127,55,4
157669,closed,[WebAssembly] extadd_pairwise for PartialReduce,sparker-arm,"Avoid using extends, and adding the high and low half and use extadd_pairwise instead.",2025-09-09T13:12:36Z,2025-09-10T07:33:31Z,2025-09-10T07:13:46Z,2025-09-10T07:13:46Z,True,4,0,2,16,15,4
157664,closed,[VPlan] Keep common flags during CSE.,fhahn,"During CSE, we don't have to drop all poison-generating flags on mis-match, we can keep the ones common on both recipes.",2025-09-09T13:03:47Z,2025-09-10T12:12:52Z,2025-09-10T10:20:48Z,2025-09-10T10:20:48Z,True,1,2,3,516,8,6
157663,closed,[Dexter] Make lldb-dap _post_step_hook more stable ,OCHyams,"Note the first commit in this PR includes a revert which I'll push before landing this.

---

Buildbot cross-project-tests-sie-ubuntu has been unstable recently
(https://lab.llvm.org/buildbot/#/builders/181).

Dexter uses lldb-dap in these tests. Occasionally a one will fail with a
KeyError because of a missing ""stackFrames"" ""source"" ""path"".

I can't reproduce the failure locally, but with https://github.com/llvm/llvm-project/pull/157130 and https://github.com/llvm/llvm-project/pull/157145 I've got DAP
logs from a pass and fail.

In a failure, ""path"" is missing for a step out of main (off the final brace),
and the passing test has one additional ""module"" event for libc.so.6.

```
<- {
  ""body"": {
    ""module"": {
      ""addressRange"": ""0x7ffff7dd1000"",
      ""debugInfoSize"": ""4.9MB"",
      ""id"": ""5792732F-7831-58C6-6FB4-F3756458CA24-E46E827D"",
      ""name"": ""libc.so.6"",
      ""path"": ""/lib/x86_64-linux-gnu/libc.so.6"",
      ""symbolFilePath"": ""/usr/lib/debug/.build-id/57/92732f783158c66fb4f3756458ca24e46e827d.debug"",
      ""symbolStatus"": ""Symbols loaded.""
    },
    ""reason"": ""new""
  },
  ""event"": ""module"",
  ""seq"": 0,
  ""type"": ""event""
}
```

That explains why we get a step that is missing a ""path"" component in the
failure. I don't understand why LLDB (or LLDB-DAP) is sometimes unable to load
the module (in time?). But ""path"" is an optional field anyway, so I think it's
worth handling in dexter even if LLDB's behaviour here is confusing.

This commit should stabilize the bot if the only time a module goes missing
is for steps outside main. (Ideally none would go missing, but those shouldn't
interfere with the tests).",2025-09-09T12:49:46Z,2025-09-09T14:37:18Z,2025-09-09T14:35:36Z,2025-09-09T14:35:35Z,True,2,0,1,8,1,1
157661,closed,[analyzer][NFC] Remove dead LiveVariables::Observer::observerKill,steakhal,"This API was never used in the clang code base.
There might be downstream users, but I highly doubt that. I think the best is to get rid of this unused API.",2025-09-09T12:43:40Z,2025-09-09T13:37:40Z,2025-09-09T13:37:37Z,2025-09-09T13:37:37Z,True,1,0,1,2,40,2
157658,closed,[DAGCombiner] Relax condition for extract_vector_elt combine,zhaoqi5,"Checking `isOperationLegalOrCustom` instead of `isOperationLegal` allows more optimization opportunities. In particular, if a target wants to mark `extract_vector_elt` as `Custom` rather than `Legal` in order to optimize some certain cases, this combiner would otherwise miss some improvements.

Previously, using `isOperationLegalOrCustom` was avoided due to the risk of getting stuck in infinite loops (as noted in https://github.com/llvm/llvm-project/commit/61ec738b60a4fb47ec9b7195de55f1ecb5cbdb45). After testing, the issue no longer reproduces, but the coverage is limited to the regression/unit tests and the test-suite.

Would it make sense to relax this condition to enable more optimizations? And what would be the best way to ensure that doing so does not reintroduce infinite loop regressions? Any suggestions would be appreciated.",2025-09-09T12:19:44Z,2025-09-11T01:53:46Z,2025-09-10T07:51:52Z,2025-09-10T07:51:52Z,True,4,0,1,707,1008,23
157657,closed,[analyzer][NFC] Rename LivenessValues::equals to LivenessValues::operator==,steakhal,This is just more conventional.,2025-09-09T12:11:14Z,2025-09-09T12:39:27Z,2025-09-09T12:39:24Z,2025-09-09T12:39:24Z,True,1,0,1,3,3,2
157652,closed,[X86] Allow AVX512 rotate intrinsics to be used in constexpr,RKSimon,"Now that they wrap the __builtin_elementwise_fshl/fshr builtin intrinsics this is pretty trivial.

Another step towards #153152 - just VBMI2 double shifts remaining",2025-09-09T11:48:16Z,2025-09-09T12:33:48Z,2025-09-09T12:09:45Z,2025-09-09T12:09:45Z,True,3,0,1,72,36,4
157662,closed,[AST] Match the FoldingSetNodeID computed before and after creating TypedefType,ilya-biryukov,"

At some point the call to static `TypedefType::Profile` inside `ASTContext::getTypedefType` got out-of-sync with the non-static `TypedefType::Profile`.

This seem to cause some bad performance patterns with `FoldingSet` and are seeing 10x increases in compile times in certain scenarios. After this commit, the compile times go back to normal.

This commit does not include tests or benchmarks because we want to land this ASAP to unbreak our deployment. I will work on adding asserts, tests or benchmarks in a follow-up.",2025-09-09T12:46:58Z,2025-09-09T15:40:33Z,2025-09-09T13:17:23Z,2025-09-09T13:17:23Z,True,4,0,1,2,1,1
157649,closed, [lldb][test] Re-enable import-std-module tests on Linux,Michael137,"This reverts commit 76bd5da3248fd4affedfefec3b2a3e1acbe0a94a.

These were originally skipped for https://github.com/llvm/llvm-project/issues/137046 because they were failing on Fuchsia buildbots.

I couldn't locally reproduce the Linux failures from back then (and maybe they have been fixed by something else since then).

We want to re-enable these tests because they are one of the few API tests in the `libcxx` category that we skip on Linux. So the libc++ pre-merge CI doesn't catch these test failures. To avoid churn caused by this missing coverage, it would be great if we ran these on Linux again.",2025-09-09T11:17:26Z,2025-09-09T21:43:06Z,2025-09-09T21:43:02Z,2025-09-09T21:43:02Z,True,4,0,2,1,16,15
157648,closed,AArch64: Fix codegen test in MC directory,arsenm,,2025-09-09T11:11:37Z,2025-09-09T11:43:38Z,2025-09-09T11:43:37Z,2025-09-09T11:43:37Z,True,2,0,1,0,0,1
157645,closed,[analyzer] In LivenessValues::equals also check liveBindings,steakhal,This was likely accidentally omitted when `liveBindings` was introduced. I don't think in practice it matters.,2025-09-09T11:00:32Z,2025-09-09T12:07:59Z,2025-09-09T11:23:47Z,2025-09-09T11:23:46Z,True,1,0,1,2,1,1
157647,closed,[InstCombine] Re-generate freeze tests and fix warnings (NFC),c-rhodes,,2025-09-09T11:10:17Z,2025-09-09T12:59:36Z,2025-09-09T12:59:36Z,2025-09-09T12:59:36Z,True,1,0,1,58,53,3
157643,closed,[X86] Allow XOP rotate intrinsics to be used in constexpr,RKSimon,"Now that they wrap the __builtin_elementwise_fshl/fshr builtin intrinsics this is pretty trivial.

Another step towards #153152 - I'll handle the AVX512 rotates next",2025-09-09T10:52:47Z,2025-09-09T11:38:53Z,2025-09-09T11:17:33Z,2025-09-09T11:17:32Z,True,2,0,1,8,4,2
157642,closed,[DFAJumpThreading] Enable DFAJumpThreading by default,buggfg,"We recommend setting `dfa-jump-thread` to be enabled by default. It’s a mature optimization that’s been supported since GCC 9.1.0. At the `-O2` opt level, both the GCC and ICX compilers have this optimization enabled by default. 

Once it’s enabled, we saw a **13% performance improvement** in the CoreMark benchmark on the X86 platform (Intel i9-11900K Rocket Lake), and even a **15% increase** on the KunMingHu FPGA. Additionally, we verified the correctness of this pass using SPEC 2017.",2025-09-09T10:48:49Z,2025-09-09T10:51:49Z,2025-09-09T10:51:19Z,,False,1,0,1,8,1,8
157639,closed,"Revert ""[AMDGPU][gfx1250] Add `cu-store` subtarget feature (#150588)""",Pierre-vh,"This reverts commit be17791f2624f22b3ed24a2539406164a379125d.

This is not necessary for gfx1250 anymore.",2025-09-09T10:41:48Z,2025-09-10T08:21:01Z,2025-09-10T08:20:59Z,2025-09-10T08:20:59Z,True,6,0,6,2532,1576,50
157641,closed,"[AMDGPU][gfx1250] Support ""cluster"" syncscope",Pierre-vh,"Defaults to ""agent"" for targets that do not support it.

- Add documentation
- Register it in MachineModuleInfo
- Add MemoryLegalizer support",2025-09-09T10:41:52Z,2025-09-10T09:41:45Z,2025-09-10T09:41:43Z,2025-09-10T09:41:43Z,True,3,0,1,92224,18,10
157631,closed,[X86] Ensure models use vector load latency for vector loads,RKSimon,Noticed while addressing #146564 - some of the znver3/4 overrides for vector ops were using the scalar load latencies by mistake,2025-09-09T09:12:26Z,2025-09-09T09:53:49Z,2025-09-09T09:48:40Z,2025-09-09T09:48:40Z,True,1,0,1,46,46,8
157640,closed,[AMDGPU][gfx1250] Remove SCOPE_SE for scratch stores,Pierre-vh,,2025-09-09T10:41:50Z,2025-09-10T09:04:01Z,2025-09-10T09:03:58Z,2025-09-10T09:03:58Z,True,3,0,1,2665,2670,29
157620,closed,[orc-rt] Add SPS serialization for AllocAction and AllocActionPair.,lhames,,2025-09-09T07:07:42Z,2025-09-09T07:21:04Z,2025-09-09T07:21:00Z,2025-09-09T07:21:00Z,True,0,0,1,97,0,3
157630,closed,[analyzer][NFC] Fix a warning in RegionStore.cpp,steakhal,"```
clang/lib/StaticAnalyzer/Core/RegionStore.cpp: warning: bitwise operation between different enumeration types ('Kind' and '(anonymous namespace)::BindingKey::(unnamed enum at clang/lib/StaticAnalyzer/Core/RegionStore.cpp)') is deprecated [-Wdeprecated-anon-enum-enum-conversion]
   XX |     : P(r, k | Symbolic), Data(reinterpret_cast<uintptr_t>(Base)) {
      |            ~ ^ ~~~~~~~~
1 warning generated.
```",2025-09-09T09:10:19Z,2025-09-09T13:37:07Z,2025-09-09T13:37:02Z,2025-09-09T13:37:02Z,True,3,0,1,6,3,1
157617,closed,"[RISCV] Fold (X & -(1 << C1) & 0xffffffff) == C2 << C1 to sraiw X, C1 == C2.",topperc,"We had an existing fold for (X & -(1 << C1) & 0xffffffff) == 0
which we can generalize to support comparing to constants other
than 0.
    
Previously we used srliw, but this generalizes better using sraiw.
I'm restricting to the case where C2 is simm12 or 2048 to allow
sraiw+addi/xori+seqz/snez to be used. Other constants require a
more careful analysis of the constants involved.",2025-09-09T06:08:11Z,2025-09-10T15:51:50Z,2025-09-10T15:51:47Z,2025-09-10T15:51:47Z,True,1,5,3,84,19,3
157614,closed,[LVI] Support no constant range of cast value in getEdgeValueLocal.,andjo403,proof: https://alive2.llvm.org/ce/z/8emkHY,2025-09-09T05:20:00Z,2025-09-10T16:19:33Z,2025-09-10T16:17:01Z,2025-09-10T16:17:01Z,True,3,4,4,140,2,3
157613,closed,[MLIR][Python] Add the ability to signal pass failures in python-defined passes,PragmaTwice,"This is a follow-up PR for #156000.

In this PR we add the ability to signal pass failures (`signal_pass_failure()`) in python-defined passes.

To achieve this, we expose `MlirExternalPass` via `nb::class_` with a method `signal_pass_failure()`, and the callable passed to `pm.add(..)` now accepts two arguments (`op: MlirOperation, pass_: MlirExternalPass`).

For example:
```python
def custom_pass_that_fails(op, pass_):
    if some_condition:
        pass_.signal_pass_failure()
    # do something
```",2025-09-09T05:08:58Z,2025-09-09T15:05:39Z,2025-09-09T15:05:39Z,2025-09-09T15:05:39Z,True,7,0,5,26,5,2
157622,closed,[VPlan] Remove dead recipes before simplifying blends,Mel-Chen,"In simplifyBlends, when normalizing a blend recipe, the first mask that is used only by the blend and is not all-false is chosen, and its corresponding incoming value becomes the initial value, with the others blended into it. At the same time, the mask that is chosen can be eliminated. However, a multi-user mask might be used by a dead recipe, which prevents this optimization. This patch moves removeDeadRecipes before simplifyBlends to eliminate dead recipes, allowing simplifyBlends to remove more dead masks.",2025-09-09T07:20:42Z,2025-09-10T08:03:18Z,2025-09-10T08:03:18Z,2025-09-10T08:03:18Z,True,2,0,2,5,13,3
157610,closed,[libcxx] Fix missing macro definition for lgamma,jhuber6,,2025-09-09T04:11:22Z,2025-09-09T11:46:47Z,2025-09-09T11:46:47Z,2025-09-09T11:46:47Z,True,1,0,1,2,0,1
157609,closed,[orc-rt] Add SPS serialization for WrapperFunctionBuffer.,lhames,Also adds orc_rt_WrapperFunctionBufferConstData to the C API to get a constant pointer to a wrapper function buffer's data.,2025-09-09T04:06:39Z,2025-09-09T04:23:17Z,2025-09-09T04:23:08Z,2025-09-09T04:23:08Z,True,0,0,1,106,3,7
157605,closed,Remove WholeProgramDevirt tests from profcheck-xfail post- #155657,mtrofin,,2025-09-09T03:44:50Z,2025-09-09T03:46:55Z,2025-09-09T03:46:53Z,2025-09-09T03:46:53Z,True,0,0,1,0,11,1
157606,closed,[APINotes] FIx yaml-roundtrip.test,boomanaiden154,head on MacOS by default does not support negative numbers. Try using sed to remove the last line of the file instead.,2025-09-09T03:53:44Z,2025-09-09T04:17:00Z,2025-09-09T04:15:47Z,,False,0,0,1,1,1,1
157600,closed,[TableGen][CodeGen] Remove feature string from HwMode,s-barannikov,"`Predicates` and `Features` fields serve the same purpose. They should be kept in sync, but not all predicates are based on features. This resulted in introducing dummy features for that only reason.

This patch removes `Features` field and changes TableGen emitters to use `Predicates` instead.

Historically, predicates were written with the assumption that the checking code will be used in `SelectionDAGISel` subclasses, meaning they will have access to the subclass variables, such as `Subtarget`. There are no such variables in the generated  `GenSubtargetInfo::getHwModeSet()`, so we need to provide them. This can be achieved by subclassing `HwModePredicateProlog`, see an example in `Hexagon.td`.
",2025-09-09T03:25:43Z,2025-09-10T09:39:54Z,2025-09-10T09:39:48Z,2025-09-10T09:39:47Z,True,3,1,3,150,67,21
157593,closed,[GlobalOpt] Fix unreachable ifunc globalopt crash (#157332),Arghnews,"Also fixes (#131488)

Unreachable case is triggering `Callees.empty()` assert. Since this was [originally ](https://github.com/llvm/llvm-project/pull/87939/commits/02bd5a7013c558f1e5220fc89bafa68f40276549#diff-06aba0dac2a263dc14297a15655291d5506b760f54a736385bcf3208f83df843R2524) a `continue` anyway, have applied that as a fix and added a test case. Please let me know if there's a better way.

Not sure who/how to get folks to review, tagging a few people (apologies if you're not the right person/this is the wrong way to do it, please let me know what to do in future if so)

@labrinea @dtcxzyw @nikic @fhahn ",2025-09-09T02:48:47Z,2025-09-10T08:30:03Z,2025-09-10T02:32:52Z,2025-09-10T02:32:52Z,True,4,2,1,13,1,2
157594,closed,[profcheck] Require `unknown` metadata have an origin parameter,mtrofin,"Rather than passes using `!prof = !{!”unknown”}`​for cases where don’t have enough information to emit profile values, this patch captures the pass (or some other information) that can help diagnostics - i.e. `!{!”unknown”, !”some-pass-name”}`​.

For example, suppose we emitted a `select`​ with the unknown metadata, and, later, end up needing to lower that to a conditional branch. If we observe (via sample profiling, for example) that the branch is biased and would have benefitted from a valid profile, the extra information can help speed up debugging.

We can also (in a subsequent pass) generate optimization remarks about such lowered selects, with a similar aim - identify patterns lowering to `select`​ that may be worth some extra investment in extracting a more precise profile.",2025-09-09T02:56:13Z,2025-09-10T22:39:30Z,2025-09-10T22:34:36Z,2025-09-10T22:34:36Z,True,5,9,1,73,29,10
157591,closed,MC: Use Triple form of lookupTarget in more places,arsenm,,2025-09-09T01:43:19Z,2025-09-09T07:33:41Z,2025-09-09T07:33:40Z,2025-09-09T07:33:40Z,True,2,0,1,134,139,28
157589,closed,[MLIR][Python] fix stubgen for downstream users,makslevental,"This PR fixes 4 things related to stubgen:

1. Support for both `find_package(nanobind)` and `FetchContent_Declare(nanobind)`;
2. Disambiguate stubgen target names by package prefix correctly (prior using a global `MLIR_PYTHON_PACKAGE_PREFIX` caused collisions for some users);
4. Fix generation for `declare_mlir_python_extension(StandalonePythonSources.NanobindExtension)`;
5. Emits `DEPFILE`s for the `add_custom_command` to prevent regenerating each build.",2025-09-09T01:22:58Z,2025-09-10T13:35:55Z,2025-09-10T13:35:55Z,,False,7,0,9,104,75,5
157590,closed,[bazel] Remove unnecessary AllTargetsAsmParsers dep,rupprecht,"Added in #154660 which ported #145899, but only the AllTargetsCodeGens dep actually seems necessary here.",2025-09-09T01:41:39Z,2025-09-09T01:44:10Z,2025-09-09T01:44:10Z,2025-09-09T01:44:10Z,True,0,0,1,0,1,1
157583,closed,[MLIR][Python] fix stubgen,makslevental,"In https://github.com/llvm/llvm-project/pull/155741 I broke the cardinal rule of CMake: nothing happens when you think it happens 🤷. Meaning: `declare_mlir_python_sources(SOURCES_GLOB ""_mlir_libs/${_module_name}/**/*.pyi"")` wasn't picking up any sources _because they aren't generated yet_. This of course makes sense in retrospect (the stubs are generated as part of the build process, post extension compile, rather than the configure process).

Thus, the API needs to be:

```
GENERATE_TYPE_STUBS: List of generated type stubs expected from stubgen, relative to _mlir_libs.
```

Partially as a result of this omission, the stubs weren't being installed into either the build dir nor the install dir. That is also fixed now:

**Source dir (for easy reference):**

<img width=""300"" height=""674"" alt=""image"" src=""https://github.com/user-attachments/assets/a569f066-c2bd-4361-91f3-1c75181e51da"" />

**Build dir (for forthcoming typechecker tests):**

<img width=""398"" height=""551"" alt=""image"" src=""https://github.com/user-attachments/assets/017859f9-fddb-49ee-85e5-915f5b5f7377"" />

**Install dir:**

<img width=""456"" height=""884"" alt=""image"" src=""https://github.com/user-attachments/assets/8051be7e-898c-4ec8-a11e-e2408b241a56"" />




 ",2025-09-09T00:28:38Z,2025-09-10T09:52:12Z,2025-09-09T01:12:25Z,2025-09-09T01:12:25Z,True,3,3,1,48,11,3
157584,closed,[lit] Support -c flag for diff,boomanaiden154,"This is the default for the builtin shell, so the option can just be a
no-op. It is not necessarily the default for diff in an external shell
though, so allow -c to keep things consistent.
",2025-09-09T00:44:12Z,2025-09-09T00:55:58Z,2025-09-09T00:55:58Z,,False,2,0,1,35,2,3
157576,closed,[Utils] Ensure that empty.txt is always empty,hnrklssn,"Previously this test case would `touch %S/empty.txt` to create and empty file. The test case then copies contents to that file, so if run a second time the `touch` command would not create an empty file.",2025-09-08T23:28:33Z,2025-09-09T00:12:28Z,2025-09-09T00:12:28Z,2025-09-09T00:12:28Z,True,1,0,2,10,7,3
157577,closed,NFC: SBThread should not be the one to compute StopReasonData.,jimingham,"This is something the StopInfo class manages, so it should be allowed to compute this rather than having SBThread do so.  This code just moves the computation to methods in StopInfo.  It is mostly NFC. The one change that I actually had to adjust the tests for was a couple of tests that were asking for the UnixSignal stop info data by asking for the data at index 1.  GetStopInfoDataCount returns 1 and we don't do 1 based indexing so the test code was clearly wrong. But I don't think it makes sense to perpetuate handing out the value regardless of what index you pass us.",2025-09-09T00:01:48Z,2025-09-09T22:32:04Z,2025-09-09T22:31:55Z,2025-09-09T22:31:55Z,True,4,4,3,105,117,5
157572,closed,[clang-tools-extra] Make internal shell the default for lit tests.,cmtice,"This patch updates the clang-tools-extra lit test config to use the internal shell by default. This has some performance advantages (~10-15%) and also produces nicer failure output. It also updates one clang-tools-extra test, so that it passes using the internal shell. All the other tests appear to pass using the internal shell.",2025-09-08T22:57:09Z,2025-09-09T14:11:33Z,2025-09-09T14:11:33Z,2025-09-09T14:11:33Z,True,1,2,1,10,2,2
157575,closed,[flang] Add hlfir.index op to represent index intrinsic function,valerydmit,"The change adds a new HLFIR operation. A call to index intrinsic now becomes lowered into the hlfir.index op and then naive lowering of the op translates it back to appropriate runtime call. The change set is aimed to be functionally equivalent to exiting index functionality, but is much more efficient in a case of presence of the 'kind' intrinsic parameter.
Also fixed couple of parameter lowering issues which were revealed while working on the index-related functional parts.
",2025-09-08T23:28:06Z,2025-09-10T17:05:51Z,2025-09-10T17:05:51Z,2025-09-10T17:05:50Z,True,4,6,8,573,47,12
157588,closed,[APINotes] Prefer diff -u over diff -b,boomanaiden154,"Lit's internal shell does not support -b (properly). This patch rewrites
the tests to conform to their existing semantics (using
--implicit-check-not) using diff -u. This allows for enabling lit's
internal shell by default on all platforms.

Fixes #106249.
",2025-09-09T01:22:52Z,2025-09-09T03:15:34Z,2025-09-09T03:15:32Z,2025-09-09T03:15:32Z,True,1,2,5,18,32,2
157571,closed,[flang][runtime] Preserve some list-directed input state in child,klausler,"Child list-directed input needs to inherit and return the state used to process trailing separators (eatComma_) and terminal '/' (hitSlash_) from any parent list-directed input statement.

Fixes https://github.com/llvm/llvm-project/issues/157509 and https://github.com/llvm/llvm-project/issues/154971.",2025-09-08T22:36:05Z,2025-09-10T16:31:15Z,2025-09-10T16:31:15Z,2025-09-10T16:31:15Z,True,1,0,1,21,0,2
157565,closed,[libc] Clean up errno header usage in all remaining math/smoke tests.,vonosmas,"This is a follow-up to #157517, which fixes the remaining math/smoke tests, and changes them to only include `hdr/errno_macros.h`, as the tests just need the errno values to pass into `EXPECT_MATH_ERRO` macro. A couple non-mechanical changes include:

* slightly better test coverage for some exp/log tests -- that actually validates that errno is set to `EDOM` or `ERANGE` for certain inputs;
* explicit inclusion of `src/__support/libc_errno.h` in RoundToIntegerTest template, which still needs to be fixed.

With this change there's a single libc_errno usage left:
```
$ grep -lrnH ""libc_errno.h"" test/src/math/smoke
test/src/math/smoke/RoundToIntegerTest.h
```",2025-09-08T21:59:28Z,2025-09-09T15:07:18Z,2025-09-09T15:07:18Z,2025-09-09T15:07:18Z,True,1,0,6,172,227,56
157566,closed,[lldb][nfc] Rename WritePointerToMemory argument's name,felipepiovezan,One of those arguments should be called `pointer` to correlate it to the name of the function and to distinguish it from the address where it will be written.,2025-09-08T22:07:21Z,2025-09-09T14:27:53Z,2025-09-09T14:27:53Z,2025-09-09T14:27:52Z,True,1,0,1,6,6,2
157562,closed,[MLIR] [Python] Added a context manager for enabling traceback-based locations,superbobry,Previously this functionality was not surfaced in the public API.,2025-09-08T21:48:54Z,2025-09-09T15:11:40Z,2025-09-09T13:29:08Z,2025-09-09T13:29:08Z,True,3,0,1,41,3,2
157558,closed,[lit] Remove python 2.7 code paths in builtin diff,boomanaiden154,"Lit's builtin diff command had some Python 2.7 code paths lying around
that we can probably get rid of at this point. LLVM at this point
requires Python 3.8 at minimum. Keeping lit working at a lower version
is a reasonable goal, but I think we can probably drop python 2 support
at this point given how long it has been deprecated and how long LLVM
has supported Python 3.
",2025-09-08T21:21:57Z,2025-09-09T03:19:51Z,2025-09-09T03:19:49Z,2025-09-09T03:19:49Z,True,2,0,4,11,31,2
157561,closed,[LLDB][SBProgress] Quick fix to the progress formatting,Jlalond,"Earlier today I was looking at the SBProgress documentation with a colleague and found another instance where the swig block wasn't formatting correctly. I've adjusted the docs slightly to fix this. I don't actually know how to see a preview of our docstrings but I believe this will fix it.

<img width=""829"" height=""234"" alt=""image"" src=""https://github.com/user-attachments/assets/8ef3a2df-92b9-4157-a452-f5e1ec51aa9a"" />
",2025-09-08T21:46:50Z,2025-09-08T21:57:45Z,2025-09-08T21:52:41Z,2025-09-08T21:52:41Z,True,2,0,1,2,1,1
157556,closed,[libc++] Update utilities to compare benchmarks,ldionne,"This patch replaces the previous `libcxx-compare-benchmarks` wrapper by a new `compare-benchmarks` script which works with LNT-compatible data. This allows comparing benchmark results across libc++ microbenchmarks, SPEC, and anything else that would produce LNT-compatible data.

It also adds a simple script to consolidate LNT benchmark output into a single file, simplifying the process of doing A/B runs locally. The simplest way to do this doesn't require creating two build directories after this patch anymore.

It also adds the ability to produce either a standalone HTML chart or a plain text output for diffing results locally when prototyping changes. Example text output of the new tool:

```
Benchmark                              Baseline    Candidate    Difference    % Difference
-----------------------------------  ----------  -----------  ------------  --------------
BM_join_view_deques/0                      8.11         8.16          0.05            0.63
BM_join_view_deques/1                     13.56        13.79          0.23            1.69
BM_join_view_deques/1024                6606.51      7011.34        404.83            6.13
BM_join_view_deques/2                     17.99        19.92          1.93           10.72
BM_join_view_deques/4000               27655.58     29864.72       2209.14            7.99
BM_join_view_deques/4096               26218.07     30520.13       4302.05           16.41
BM_join_view_deques/512                 3231.66      2832.47       -399.19          -12.35
BM_join_view_deques/5500               47144.82     42207.41      -4937.42          -10.47
BM_join_view_deques/64                   247.23       262.66         15.43            6.24
BM_join_view_deques/64000             756221.63    511247.48    -244974.15          -32.39
BM_join_view_deques/65536             537110.91    560241.61      23130.70            4.31
BM_join_view_deques/70000             815739.07    616181.34    -199557.73          -24.46
BM_join_view_out_vectors/0                 0.93         0.93          0.00            0.07
BM_join_view_out_vectors/1                 3.11         3.14          0.03            0.82
BM_join_view_out_vectors/1024           3090.92      3563.29        472.37           15.28
BM_join_view_out_vectors/2                 5.52         5.56          0.04            0.64
BM_join_view_out_vectors/4000           9887.21      9774.40       -112.82           -1.14
BM_join_view_out_vectors/4096          10158.78     10190.44         31.66            0.31
BM_join_view_out_vectors/512            1218.68      1209.59         -9.09           -0.75
BM_join_view_out_vectors/5500          13559.23     13676.06        116.84            0.86
BM_join_view_out_vectors/64              158.95       157.91         -1.04           -0.65
BM_join_view_out_vectors/64000        178514.73    226520.97      48006.24           26.89
BM_join_view_out_vectors/65536        184639.37    207180.35      22540.98           12.21
BM_join_view_out_vectors/70000        235006.69    213886.93     -21119.77           -8.99
```",2025-09-08T21:12:39Z,2025-09-09T14:52:48Z,2025-09-09T14:52:44Z,2025-09-09T14:52:44Z,True,1,2,1,191,141,6
157551,closed,[libc] Make simd helper functions static,jhuber6,"Summary:
It's important that these functions all be local to a TU as to not incur
ABI restrictions. Otherwise, we end up with lots of warnings if we
change or use different vector sizes.
",2025-09-08T20:50:17Z,2025-09-10T00:03:17Z,2025-09-09T23:10:57Z,2025-09-09T23:10:57Z,True,1,0,1,46,40,1
157550,closed,[MLIR][Conversion] Convert XeGPU to XeVM pass: Remove lowering support for tensor descriptor with offsets.,silee2,"And update load/store/prefetch test cases to use direct offsets.
Tensor descriptors with offsets are getting deprecated.",2025-09-08T20:49:34Z,2025-09-10T22:43:03Z,2025-09-10T22:43:03Z,2025-09-10T22:43:03Z,True,2,2,4,85,424,5
157555,closed,[SCEV] Fold ((-1 * C1) * D / C1) -> -1 * D.,fhahn,"Treat negative constants C as -1 * abs(C1) when folding multiplies and udivs.

Alive2 Proof: https://alive2.llvm.org/ce/z/bdj9W2",2025-09-08T21:09:29Z,2025-09-10T14:17:36Z,2025-09-10T13:59:14Z,2025-09-10T13:59:14Z,True,1,6,4,11,7,2
157549,closed,[AMDGPU] Add MSG_RTN_GET_CLUSTER_BARRIER_STATE,rampitec,,2025-09-08T20:47:31Z,2025-09-08T23:22:45Z,2025-09-08T23:22:44Z,2025-09-08T23:22:44Z,True,2,0,2,43,0,5
157546,closed,[AMDGPU] Update hard-clauses-load-monitor.mir. NFC,rampitec,,2025-09-08T20:40:48Z,2025-09-08T23:19:12Z,2025-09-08T23:19:10Z,2025-09-08T23:19:10Z,True,2,0,2,38,2,1
157547,closed,[OpenMP] Fix incorrect CUDA bc path after library change,jhuber6,,2025-09-08T20:40:48Z,2025-09-09T17:19:28Z,2025-09-08T22:27:59Z,2025-09-08T22:27:59Z,True,1,12,3,3,3,2
157544,closed,[RISCV] Add TH_EXT(U) to hasAllNBitUsers in RISCVOptWInstrs.,topperc,,2025-09-08T20:30:32Z,2025-09-09T15:47:43Z,2025-09-09T15:47:39Z,2025-09-09T15:47:39Z,True,1,0,3,101,3,4
157540,closed,[AMDGPU] gfx1250 checks in out of range restisters test. NFC.,rampitec,,2025-09-08T20:16:33Z,2025-09-08T23:21:49Z,2025-09-08T23:21:48Z,2025-09-08T23:21:48Z,True,2,0,2,25,0,1
157541,closed,[CMake] Disable -Wdangling-reference warnings on GCC,mstorsjo,"This gets rid of 99 warnings which mostly seem like false positives (in a build of LLVM+Clang+LLDB, with GCC 13).

The warnings look e.g. like this:

    ../lib/ObjCopy/COFF/COFFObjcopy.cpp: In function ‘uint64_t llvm::objcopy::coff::getNextRVA(const Object&)’:
    ../lib/ObjCopy/COFF/COFFObjcopy.cpp:38:18: warning: possibly dangling reference to a temporary [-Wdangling-reference]
       38 |   const Section &Last = Obj.getSections().back();
          |                  ^~~~
    ../lib/ObjCopy/COFF/COFFObjcopy.cpp:38:47: note: the temporary was destroyed at the end of the full expression ‘(& Obj)->llvm::objcopy::coff::Object::getSections().llvm::ArrayRef<llvm::objcopy::coff::Section>::back()’
       38 |   const Section &Last = Obj.getSections().back();
          |                         ~~~~~~~~~~~~~~~~~~~~~~^~

In this example, the `Object::getSections()` method returns an `ArrayRef<Section>` from a `std::vector<Section>`. We invoke `back()` on that, and store a reference in a local variable. Even though the temporary `ArrayRef<Section>` has been destroyed, the reference points to something which still is alive in the `std::vector<Section>`.",2025-09-08T20:19:17Z,2025-09-09T10:10:42Z,2025-09-09T09:26:54Z,2025-09-09T09:26:54Z,True,6,0,1,8,0,1
157539,closed,[RISCV] Add coverage for select with minmax arm [nfc],preames,"This is coverage for an upcoming change, but I thought the choice of configurations to check was probably worth a moment of consideration as well.",2025-09-08T20:14:47Z,2025-09-09T21:56:52Z,2025-09-09T21:56:48Z,2025-09-09T21:56:48Z,True,1,4,2,1614,0,1
157537,closed,[libc] Implement vector 'split' and 'concat' routines,jhuber6,"Summary:
This provides some helpers for the split and concatenation routines for
changing the size of an existing vector. This includes a simple tuple
type to do the splitting. The tuple doesn't support structured bindings
yet.

The concat function is more limited than what would be ideal, but the
shufflevector builtin requires things of equivalent sizes and I
didn't think it was worth wrangling with that just yet.
",2025-09-08T20:12:59Z,2025-09-10T22:51:49Z,2025-09-10T22:51:49Z,2025-09-10T22:51:49Z,True,3,16,5,108,6,3
157535,closed,Reland [clang][dataflow] Transfer more cast expressions.,bazuzi,"Reverts llvm/llvm-project#157148

Adds fixes to `TransferVisitor::VisitCXXConstructExpr` and `copyRecord` to avoid crashing on base class initialization from sibling-derived class instances. I believe this is the only use of copyRecord where we need this special handling for a shared base class.",2025-09-08T19:10:01Z,2025-09-09T18:37:50Z,2025-09-09T18:37:49Z,2025-09-09T18:37:49Z,True,3,1,3,492,22,6
157534,closed,[AMDGPU] High VGPR emission tests. NFC.,rampitec,,2025-09-08T19:05:59Z,2025-09-08T23:17:24Z,2025-09-08T23:17:22Z,2025-09-08T23:17:22Z,True,2,0,2,41,0,1
157533,closed,[AMDGPU] High VGPR waitcnt generation tests. NFC.,rampitec,,2025-09-08T19:01:59Z,2025-09-08T23:13:28Z,2025-09-08T23:13:27Z,2025-09-08T23:13:27Z,True,2,0,2,95,0,1
157532,closed,[Linalg] Add rank zero operand support to push down extract slice pattern,nirvedhmeshram,"Currently the pattern would crash for rank 0 operand as it decides the padding based on affine results, but for rank 0 there are no affine results in the operand affine map",2025-09-08T18:49:04Z,2025-09-08T19:53:03Z,2025-09-08T19:53:03Z,2025-09-08T19:53:02Z,True,1,0,1,22,1,2
157531,closed,[AMDGPU] Constrain inline asm vgprs to low 256,rampitec,Also adds codegen test for high VGPRs codegen.,2025-09-08T18:41:25Z,2025-09-08T23:15:36Z,2025-09-08T23:15:34Z,2025-09-08T23:15:34Z,True,2,0,2,582,1,2
157526,closed,[AMDGPU] Restrict scale operands of WMMA to low 256 VGPRs,rampitec,These cannot accept high registers.,2025-09-08T18:15:39Z,2025-09-08T23:17:11Z,2025-09-08T22:44:51Z,2025-09-08T22:44:51Z,True,3,0,3,56,32,5
157528,closed,[llvm][docs] Add LLDB data formatters to DebuggingLLVM.rst,JDevlieghere,Add LLDB data formatters to the document about debugging LLVM.,2025-09-08T18:28:05Z,2025-09-08T23:30:27Z,2025-09-08T23:30:23Z,2025-09-08T23:30:23Z,True,3,2,4,11,1,1
157520,closed,[Xtensa] Fix lowering FP compare operations.,andreisfr,"Implement lowering of the SETONE/SETOGT/SETOGE/SETUGT/SETUGE operations. This fixes f32 ""copysign"" and ""ueq"" tests.

This PR fixes https://github.com/llvm/llvm-project/issues/149666#event-18712363149 for release/21.x",2025-09-08T17:44:05Z,2025-09-09T08:36:35Z,2025-09-09T08:35:56Z,2025-09-09T08:35:56Z,True,3,0,1,34,15,2
157519,closed,[MLIR][Python] remove unnecessary `arg.none() = nb::none()` pattern,makslevental,We have `arg.none() = nb::none()` in a lot of places but this is no longer necessary (as of ~[2022](https://github.com/wjakob/nanobind/commit/62a23bb87b57d939e045f9c9da78a1d7235d2271)).,2025-09-08T17:35:47Z,2025-09-08T19:16:37Z,2025-09-08T19:16:36Z,2025-09-08T19:16:35Z,True,2,0,3,156,178,13
157579,closed,Fix the build issue caused by 972f834f48eea4536540e53954dcd6ae544c8890,ziqingluo-90,,2025-09-09T00:07:29Z,2025-09-09T00:07:58Z,2025-09-09T00:07:58Z,,False,0,0,10000,619481,17059,5098
157518,closed,[LoopUtils] Simplify expanded RT-checks,artagnon,"Follow up on 528b13d ([SCEVExp] Add helper to clean up dead instructions after expansion.) to hoist the SCEVExapnder::eraseDeadInstructions call from LoopVectorize into the LoopUtils APIs add[Diff]RuntimeChecks, so that other callers (LoopDistribute and LoopVersioning) can benefit from the patch.",2025-09-08T17:35:15Z,2025-09-09T11:38:54Z,2025-09-09T11:38:54Z,2025-09-09T11:38:54Z,True,2,0,1,9,19,6
157516,closed,[AMDGPU] Combine VGPRSrc and VGPROp definitions into VGPROp,Sisyph,"These can be represented by the same definition. It is just a RegisterOperand wrapper for a VGPR register class with a DecoderMethod override.
NFC.",2025-09-08T17:29:06Z,2025-09-09T14:54:19Z,2025-09-09T14:54:18Z,2025-09-09T14:54:18Z,True,1,4,2,59,55,6
157517,closed,[libc] Clean up errno header usage in a few math/smoke tests.,vonosmas,"Most of the unit tests don't (or don't need to) read/write libc_errno code directly - it's cleared by the ErrnoCheckingTest harness, and is verified by framework-provided scripts such as EXPECT_MATH_ERRNO.

Use the following rule of thumb for header inclusion:
* if you use libc_errno in code literally, include src/__support/libc_errno.h
* if you only rely on errno constants, include hdr/errno_macros.h

This PR only updates a few tests for acos/asin variants, as a proof-of-concept. If it goes in, a follow-up PR would update the rest.",2025-09-08T17:34:54Z,2025-09-08T18:09:43Z,2025-09-08T18:09:34Z,2025-09-08T18:09:34Z,True,1,0,1,27,46,12
157511,closed,[llvm-mca][x86] Sync resource tests using generic base references,RKSimon,Some of the targets isa test coverage seems to have bitrotted or is just missing - resync with the generic reference code,2025-09-08T16:41:59Z,2025-09-09T08:13:13Z,2025-09-08T17:21:13Z,2025-09-08T17:21:13Z,True,2,0,1,223,2,5
157513,closed,"[flang] Translate +x to (x), not x",klausler,"In expression semantics, don't completely delete the unary plus operator, but instead translate it into parentheses.  The distinction matters in contexts where the bounds of x are significant or when x must not be misinterpreted as a variable.

Fixes https://github.com/llvm/llvm-project/issues/157379.",2025-09-08T17:08:36Z,2025-09-10T20:37:54Z,2025-09-10T20:35:36Z,2025-09-10T20:35:36Z,True,1,0,2,17,1,2
157512,closed,[LV][AArch64][NFC]: Change TC in a test case.,hassnaaHamdi,"- In sve-epilog-vscale-fixed.ll file, it tests the preference of fixed-width epilogue VF vs scalable when costs are equal. This NFC patch is changing the TC in the test case to be unknown to avoid folding the epilogue in future LV changes.",2025-09-08T17:05:49Z,2025-09-10T11:41:50Z,2025-09-10T11:41:50Z,2025-09-10T11:41:49Z,True,2,0,1,28,24,1
157505,closed,[DirectX] Add emulation for fp16 types of llvm.is.fpclass,farzonl,"fixes #157504

This changes adds the emulation we need for IsNaN, IsNormal, & IsFinite This change only applies these emulations to the llvm.is.fpclass cases of fp16.

Since there is no DX intrinsics yet for these cases, applying the emulation to the necessary intrinsics is left for future implementers of
- https://github.com/llvm/llvm-project/issues/99132
- https://github.com/llvm/llvm-project/issues/156069
- https://github.com/llvm/llvm-project/issues/99131",2025-09-08T16:26:42Z,2025-09-08T21:43:03Z,2025-09-08T17:47:50Z,2025-09-08T17:47:50Z,True,3,2,2,261,2,2
157503,closed,[lldb-mcp] Auto connect to the first running lldb mcp instance.,ashgti,"This improves the flow by automatically connecting to an exisitng lldb instance, if one is found.

Future improvements include:

* Launching a binary if an instance isn't detected.
* Multiplexing if multiple instances are detected.",2025-09-08T16:15:18Z,2025-09-09T17:09:08Z,2025-09-09T17:09:03Z,2025-09-09T17:09:03Z,True,1,8,2,253,67,6
157502,closed,"[OpenMP] Add definitions of TASKGRAPH, GRAPH_ID and GRAPH_RESET",kparzysz,"This only adds the definitions of the TASKGRAPH directive and the associated clauses, plus the minimal additional changes to make everything compile without errors.",2025-09-08T16:08:46Z,2025-09-10T16:09:34Z,2025-09-10T16:09:32Z,2025-09-10T16:09:32Z,True,2,0,1,37,4,5
157501,closed,"[clang] Rename overloaded virtual member function to prevent shadowing, NFCI",cyndyishida,Resolves warnings triggered by `Woverloaded-virtual`,2025-09-08T16:04:13Z,2025-09-08T19:45:26Z,2025-09-08T19:44:47Z,2025-09-08T19:44:47Z,True,1,0,1,16,13,4
157494,closed,[clang][bytecode] Check strlen impl for primitive arrays,tbaederr,Fixes #157428,2025-09-08T15:40:35Z,2025-09-11T03:08:08Z,2025-09-11T03:08:08Z,2025-09-11T03:08:08Z,True,1,0,1,22,0,2
157491,closed,[mlir][Transforms][NFC] Delete dead code,matthias-springer,,2025-09-08T15:25:28Z,2025-09-08T15:43:01Z,2025-09-08T15:43:00Z,2025-09-08T15:43:00Z,True,1,0,1,0,2,1
157493,closed,[LLDB][NativePDB] Mark blocks as parsed after parsing,Nerixyz,"After parsing blocks in a function, the blocks should be marked as parsed for them to be dumped (see [Function::Dump](https://github.com/llvm/llvm-project/blob/e6aefbec782dbb57f72eb0ae399ed944fe49db2e/lldb/source/Symbol/Function.cpp#L446-L447)). As explained in https://github.com/llvm/llvm-project/issues/114906#issuecomment-3255016266, this happens (accidentally?) in the DIA plugin when parsing variables, because it calls `function.GetBlock(can_create=true)` which marks blocks as parsed. In the native plugin, this was never called, so blocks and variables were never included in the `lldb-test symbols` output.

The `variables.test` for the DIA plugin tests this. One difference between the plugins is how they specify the location of local variables. This causes the output of the native plugin to be two lines per variable, whereas the DIA plugin has one line:
```
(native):
000002C4B7593020:       Variable{0x1c800001}, name = ""var_arg1"", type = {0000000000000744} 0x000002C4B6CA7900 (int), scope = parameter, location = 0x00000000:
        [0x000000014000102c, 0x000000014000103e): DW_OP_breg7 RSP+8
```
```
(DIA):
000002778C827EE0:       Variable{0x0000001b}, name = ""var_arg1"", type = {0000000000000005} 0x000002778C1FBAB0 (int), scope = parameter, decl = VariablesTest.cpp:32, location = DW_OP_breg7 RSP+8
```
In the test, I filtered lines starting with spaces followed by `[0x`, so we can still use `CHECK-NEXT`.

---

Another difference between the plugins is that DIA marks the `this` pointer as artificial (equivalent to DWARF). This is done if a variable's object kind is `ObjectPtr` ([source](https://github.com/llvm/llvm-project/blob/ab898f32c60689d1d47d0b6de66c30d3476994bb/lldb/source/Plugins/SymbolFile/PDB/SymbolFilePDB.cpp#L1050)). As far as I know, there isn't anything in the debug info that says ""this variable is the `this` pointer"" other than the name/type of a variable and the type of the function.",2025-09-08T15:36:39Z,2025-09-09T15:04:33Z,2025-09-09T15:04:33Z,2025-09-09T15:04:33Z,True,3,0,1,24,12,2
157490,closed,[clang][bytecode] Check builtin carryops for dummy pointers,tbaederr,Fixes #157422,2025-09-08T15:24:40Z,2025-09-11T06:17:35Z,2025-09-11T04:57:34Z,2025-09-11T04:57:33Z,True,4,2,1,10,0,2
157489,closed,[AArch64][SVE] Add PTEST_FIRST pseudo instruction,kmclaughlin-arm,"The pseudo is created when the condition of a ptest is FIRST_ACTIVE.

This allows optimizePTestInstr to be extended to handle whilecc intrinsics
that return a predicate pair, where it is necessary to identify the
condition code used to remove a ptest on the first result of the pair.
(See https://github.com/llvm/llvm-project/pull/156478)",2025-09-08T15:20:36Z,2025-09-09T14:10:55Z,2025-09-09T14:10:54Z,2025-09-09T14:10:54Z,True,1,0,1,17,6,4
157487,closed,[MLIR][Python] Add a python function to apply patterns with MlirOperation,PragmaTwice,"In https://github.com/llvm/llvm-project/pull/94714, we add a python function `apply_patterns_and_fold_greedily` which accepts an `MlirModule` as the argument type. However, sometimes we want to apply patterns with an `MlirOperation` argument, and there is currently no python API to convert an `MlirOperation` to `MlirModule`.

So here we overload this function `apply_patterns_and_fold_greedily` to do this (also a corresponding new C API `mlirApplyPatternsAndFoldGreedilyWithOp`)",2025-09-08T15:04:21Z,2025-09-08T16:05:46Z,2025-09-08T16:05:46Z,2025-09-08T16:05:46Z,True,3,0,4,68,25,4
157485,closed,[AArch64] Break up `AArch64FrameLowering::emitPrologue` (NFCI),MacDue,"`emitPrologue` was almost 1k SLOC, with a large portion not actually related to emitting the vast majority of prologues.

This patch creates a new class `AArch64PrologueEmitter` for emitting the prologue, which keeps common state/target classes as members. This makes adding methods that handle niche cases easy, and allows methods to be marked ""const"" when they don't redefine flags/state.

With this change, the core ""emitPrologue"" is around 275 LOC, with cases like Windows stack probes or Swift frame pointers split into routines. This makes following the logic much easier. ",2025-09-08T15:02:10Z,2025-09-10T15:01:07Z,2025-09-10T13:23:14Z,2025-09-10T13:23:14Z,True,4,0,1,1037,822,5
157483,closed,[lldb][NFC] Fix style issues with StackID.h,felipepiovezan,"Some comments were ""suffixed"" to member variable declarations; these are moved to before the variable.

Some constructors and operators were just defaulted and not necessary.

Some comments dividing the class into logical sections, like ""// constructors and destructors"", were not applied everywhere. These were removed. They are used in some parts of LLDB, but are the exception.

An include was not needed.

The operator != can be defined in terms of ==.",2025-09-08T14:50:48Z,2025-09-08T15:47:45Z,2025-09-08T15:47:42Z,2025-09-08T15:47:42Z,True,1,1,2,17,44,2
157482,closed,[HashRecognize] Clarify hdr comment on GF(2^n) (NFC),artagnon,"Unify explanation for GF(2^n) and GF(2), which was previously convoluted.",2025-09-08T14:50:41Z,2025-09-08T15:57:17Z,2025-09-08T15:57:17Z,2025-09-08T15:57:17Z,True,3,1,2,8,8,1
157477,closed,[CIR] Fix assertion order in 'Address',erichkeane,"We are checking the 'type' of 'pointer' before we are checking whether it is null or not!  This is clearly incorrect, so this patch reorders the asserts.",2025-09-08T14:38:17Z,2025-09-08T14:59:31Z,2025-09-08T14:59:31Z,2025-09-08T14:59:31Z,True,1,0,1,3,3,1
157475,closed,[CostModel][X86] Add missing AVX1 costs for PMULUDQ v4i64 pattern,RKSimon,"We need to account for AVX1 targets splitting 256-bit PMULUDQ style patterns - we included a AVX2 cost, but missed out AVX1 despite v4i64 being a legal type

Noticed while working on #156568",2025-09-08T14:31:11Z,2025-09-08T15:13:27Z,2025-09-08T15:06:34Z,2025-09-08T15:06:34Z,True,3,0,1,17,15,2
157481,closed,"[docs][OpenMP] Remove ""unclaimed"" from language-specific items",kparzysz,"Things like C23 or Fortran 2023 had ""unclaimed"" entries in the column for the language that they don't apply to. Leave these fields blank instead.",2025-09-08T14:49:33Z,2025-09-08T14:55:41Z,2025-09-08T14:55:38Z,2025-09-08T14:55:38Z,True,1,0,1,8,8,1
157476,closed,[LLD][COFF] Make `/summary` work when `/debug` isn't provided,aganea,"Previously, `/summary` was meant to print some PDB information. Now move handling of `/summary` to `Writer.cpp` so that it can have an effect when `/debug` isn't provided. This will also provide grounds for extending with more general information.
",2025-09-08T14:33:20Z,2025-09-09T11:28:30Z,2025-09-09T11:28:24Z,2025-09-09T11:28:24Z,True,1,0,1,112,52,7
157474,closed,[lldb][test] StepUntil disable test for unsupported linkers.,da-viper,`INSERT BEFORE` keyword is not supported in current versions gold and mold linkers. Since we cannot confirm accurately what linker and version is available on the system and when it will be supported. We test it with a sample program using the script keywords.,2025-09-08T14:29:42Z,2025-09-10T16:18:44Z,2025-09-10T16:18:44Z,2025-09-10T16:18:44Z,True,2,3,1,40,20,2
157473,closed,[bazel][mlir][python] Port #157127: UB dialect filegroup,rupprecht,Used downstream,2025-09-08T14:25:48Z,2025-09-08T14:30:19Z,2025-09-08T14:30:17Z,2025-09-08T14:30:17Z,True,0,0,1,25,0,1
157479,closed,[HashRecognize] Strip excess-TC check,artagnon,"Checking if trip-count exceeds 256 is no longer necessary, as we have moved away from KnownBits computations to pattern-matching, which is very cheap and independent of TC.",2025-09-08T14:42:22Z,2025-09-08T15:30:53Z,2025-09-08T15:23:14Z,2025-09-08T15:23:14Z,True,3,0,1,5,5,2
157472,closed,[flang] canonicalize shape in pointer remapping lowering,jeanPerier,"Fixes https://github.com/llvm/llvm-project/issues/153221.

Canonicalize the new shape of the pointer when lowering pointer assignment with bounds remapping.
This is done by using the existing helper that generates a compare to zero + select like in the other situation where shapes are lowered.

Note that this only needs to be done for the extents here because lower bounds are canonicalized in LBOUND inquiries and descriptor creation (embox/rebox codegen) based on the extent value.",2025-09-08T14:23:21Z,2025-09-09T16:46:25Z,2025-09-09T07:50:48Z,2025-09-09T07:50:48Z,True,2,0,1,36,18,4
157468,closed,[clang-tidy][NFC] Enable `modernize-use-auto` in clang-tidy config and fix warnings,flovent,Closes [#156154](https://github.com/llvm/llvm-project/issues/156154),2025-09-08T14:07:18Z,2025-09-09T13:56:21Z,2025-09-08T18:37:03Z,2025-09-08T18:37:03Z,True,2,2,1,5,6,4
157471,closed,[CIR] Fix LLVM lowering crashes after #155244,mmha,This patch replaces all uses of `replaceAllUseWith` with `replaceOp`. This fixes a number of regressions post #155244.,2025-09-08T14:21:52Z,2025-09-08T19:11:22Z,2025-09-08T19:11:22Z,2025-09-08T19:11:22Z,True,3,0,1,2,4,1
157470,closed,[docs][OpenMP] Update the status of GROUPPRIVATE in flang,kparzysz,,2025-09-08T14:19:58Z,2025-09-08T14:40:39Z,2025-09-08T14:40:35Z,2025-09-08T14:40:35Z,True,1,0,2,4,1,1
157466,closed,[libc++] Parse Google Benchmark results into LNT-compatible format,ldionne,This is a step towards being able to easily report benchmark results to a LNT instance. The LNT format can also be the basis for other tools to perform A/B comparisons when doing experiments.,2025-09-08T13:53:39Z,2025-09-08T18:32:49Z,2025-09-08T18:32:46Z,2025-09-08T18:32:46Z,True,2,0,1,51,2,4
157464,closed,[Headers][X86] Enable constexpr handling for MMX/SSE/AVX/AVX512 avg intrinsics,markbhasawut,"This PR updates the avg builtins to support constant expression handling, by extending the VectorExprEvaluator::VisitCallExpr that handles elementwise integer binop builtins.

Closes #155390",2025-09-08T13:39:16Z,2025-09-09T16:58:57Z,2025-09-09T16:58:57Z,2025-09-09T16:58:56Z,True,3,11,9,129,103,13
157461,closed,[DFAJumpThreading] Fix possible null dereference,apach301,Fixes #157450,2025-09-08T13:28:26Z,2025-09-08T18:15:06Z,2025-09-08T18:15:06Z,2025-09-08T18:15:06Z,True,1,2,2,1,1,1
157458,closed,[Verifier] Remove redundant null-check (NFC),apach301,Fixes #157448,2025-09-08T13:28:03Z,2025-09-10T01:58:51Z,2025-09-10T01:58:51Z,2025-09-10T01:58:50Z,True,3,0,2,1,1,1
157457,closed,[mlir][spirv] Check variable for null before dereferencing,apach301,FIxes #157453 ,2025-09-08T13:27:17Z,2025-09-10T14:14:24Z,2025-09-10T14:14:23Z,2025-09-10T14:14:23Z,True,3,8,2,3,1,1
157454,closed,[TypeSize] Inline conversion to uint64_t (NFC),nikic,"After #156336 this cast operator has become trivial, so inline it into the header. This is a minor compile-time improvement.",2025-09-08T13:25:45Z,2025-09-08T15:33:40Z,2025-09-08T15:33:38Z,2025-09-08T15:33:37Z,True,1,0,1,9,24,3
157447,closed,[InstCombine] Support GEP chains in foldCmpLoadFromIndexedGlobal(),nikic,"Currently this fold only supports a single GEP. However, in ptradd representation, it may be split across multiple GEPs. In particular, PR #151333 will split off constant offset GEPs.

To support this, add a new helper decomposeLinearExpression(), which decomposes a pointer into a linear expression of the form BasePtr + Index * Scale + Offset.

I plan to also extend this helper to look through mul/shl on the index and use it in more places that currently use collectOffset() to extract a single index * scale. This will make sure such optimizations are not affected by the ptradd migration.",2025-09-08T13:19:28Z,2025-09-09T14:50:48Z,2025-09-09T14:50:45Z,2025-09-09T14:50:45Z,True,2,0,1,168,29,5
157455,closed,[mlir] Fix possible null dereference during error logging,apach301,Fixes #157451,2025-09-08T13:26:08Z,2025-09-10T08:34:04Z,2025-09-10T01:10:11Z,2025-09-10T01:10:11Z,True,1,1,1,2,1,1
157446,closed,Mips: Force 64bit subtarget feature to be set for ABI options,arsenm,"Prepare to use this with HwMode. This is mostly code copied from x86.

Mips has an exceptionally broken system where the target-abi option
can be used to change the pointer size. i.e., you can mix and match
32-bit base triples with an explicit request to use 32-bit or 64-bit
pointers such that you cannot rely on the triple reported pointer size.
This hack manages to only work for codegen. The MC subtarget constructors
do not have access to the target-abi name so those will continue to not
have the appropriate feature set.",2025-09-08T13:18:57Z,2025-09-09T02:15:36Z,2025-09-09T02:15:35Z,2025-09-09T02:15:35Z,True,3,2,4,12,2,1
157445,closed,Sparc: Add 64-bit feature,arsenm,"Add a 64-bit feature so a subtarget feature check can tell the
pointer size, for future use with HwMode.

This is kind of a hack, but this is closer to what other targets do.
To use HwModes, there needs to be a subtarget feature. Every other
target kludges the module level properties into a subtarget feature
for use here, which requires pre/post processing the subtarget features.
The APIs for this aren't great. I tried doing something different,
closer to what hexagon does, rather than what x86 does to see if it
was any nicer. It almost is, except for some reason we don't have an
API to directly set a bit in the FeatureBitset.

Also the test coverage for the different ABI options isn't great.
e.g. v9 as a feature almost works, except a single test breaks
that uses a sparc32 triple with an explicit v9 feature.",2025-09-08T13:06:55Z,2025-09-08T14:58:12Z,2025-09-08T14:44:47Z,2025-09-08T14:44:47Z,True,3,1,1,22,8,5
157440,closed,[NFC][analyzer] Fix copypaste error in security.VAList docs,NagyDonat,My recent commit a80c393a9c498279a1ec9fd630535b9ff139b49f accidentally added a paragraph which does not belong to the new documentation of the checker `security.VAList`; this commit corrects this mistake.,2025-09-08T12:32:16Z,2025-09-08T12:46:59Z,2025-09-08T12:46:59Z,2025-09-08T12:46:59Z,True,2,0,1,0,5,1
157438,closed,[NFC][analyzer] Rename `ValistChecker.cpp` to `VAListChecker.cpp`,NagyDonat,...to follow the capitalization style that was already applied within the file by recent commit a80c393a9c498279a1ec9fd630535b9ff139b49f.,2025-09-08T12:23:14Z,2025-09-08T13:06:46Z,2025-09-08T13:06:46Z,2025-09-08T13:06:46Z,True,2,0,1,3,3,3
157432,closed,[lldb][test] Prevent TestqOffsets.py picking up host binaries,DavidSpickett,"Due to a fallback in GDBRemoteCommunicationClient.cpp, on Linux we will assume a PID of 1 if the remote does not respond in some way that tells us the real PID.

So if PID 1 happened to be a process that the current user could read, we would try to debug that instead. On my current machine, PID 1 was sshd run by root so we would ignore it. If I changed the fallback to some process ID run by my user, the test would fail.

To prevent this, select the remote-linux platform before creating the target. This means we won't attempt any host lookups.

Fixes #155895",2025-09-08T11:48:22Z,2025-09-09T08:30:33Z,2025-09-09T08:30:30Z,2025-09-09T08:30:30Z,True,5,0,2,2,0,1
157430,closed,[VectorCombine] foldSelectShuffle - early-out cases where the max vector register width isn't large enough,RKSimon,"Technically this could happen with vector units that can't handle all legal scalar widths - but its good enough to use a generic crash test without a suitable target

Fixes #157335",2025-09-08T11:28:52Z,2025-09-08T12:29:29Z,2025-09-08T12:04:23Z,2025-09-08T12:04:23Z,True,1,0,2,21,0,2
157431,closed,[flang] add missing header include after 156661,jeanPerier,"There is a missing header dependency in 156661.
The Github CI and linux builds of #156661 succeeded, maybe because the header caching hid the issue there.

https://lab.llvm.org/buildbot/#/builders/207/builds/6634",2025-09-08T11:40:34Z,2025-09-08T12:31:51Z,2025-09-08T12:31:48Z,2025-09-08T12:31:47Z,True,1,0,1,1,0,1
157429,closed,[libc++][NFC] Inline function in string.cons/copy_alloc.pass.cpp that is used only once,philnik777,"This makes the test a bit easier to understand.
",2025-09-08T11:17:48Z,2025-09-09T07:24:22Z,2025-09-09T07:23:51Z,2025-09-09T07:23:50Z,True,1,0,1,5,11,1
157427,closed,[CodeGen] Fix handling dead redefs in finalizeBundle,jayfoad,"A dead redefinition should override any earlier non-dead definition
inside a bundle.

Also remove KilledDefSet since it can be folded into DeadDefSet.
",2025-09-08T11:16:47Z,2025-09-10T11:48:18Z,2025-09-10T11:48:13Z,2025-09-10T11:48:12Z,True,7,2,2,26,10,3
157426,closed,[X86] PromoteMaskArithmetic - use similar code for LHS/RHS trunc pattern. NFC.,RKSimon,"Make it more obvious that LHS/RHS truncation patterns are the same.

Noticed while working on #157425",2025-09-08T11:12:20Z,2025-09-08T12:12:43Z,2025-09-08T11:43:57Z,2025-09-08T11:43:57Z,True,2,0,1,6,8,1
157425,closed,[X86] PromoteMaskArithmetic - oneuse vector_extend_inreg nodes can be safely promoted on AVX2+ targets,RKSimon,"Allows us to extend a result back to the largest type after we've handled mask logic using vXi1 result types from different source vector widths (e.g. v8i32 and v8i8)

Fixes #157382",2025-09-08T11:01:46Z,2025-09-08T14:06:52Z,2025-09-08T13:47:08Z,2025-09-08T13:47:08Z,True,3,0,4,17,12,2
157424,closed,[libc++][NFC] Move some really simple function defintions into the body of __tree,philnik777,,2025-09-08T10:57:33Z,2025-09-09T02:27:55Z,2025-09-09T02:27:27Z,2025-09-09T02:27:27Z,True,1,0,1,25,46,1
157415,closed,[orc-rt] Add SPS serialization support for AllocGroup.,lhames,,2025-09-08T10:00:45Z,2025-09-08T23:06:03Z,2025-09-08T22:55:18Z,2025-09-08T22:55:18Z,True,0,0,1,106,0,5
157418,closed,[AArch64] Use unsigned variant of `<s|u>addv_64` SVE vector reduction intrinsic for 64 bit values,Rajveer100,"Resolves #157122

When lowering this intrinsic, we are querying the first result type (i.e `getValueType(0)`) which may not always be true hence giving wrong the extended value type.

As an improvement, for 64 bit values an extend isn't performed regardless of `<U/S>ADDV_PRED`, so we can directly use the unsigned variant.",2025-09-08T10:25:04Z,2025-09-09T06:14:32Z,2025-09-09T06:14:32Z,2025-09-09T06:14:32Z,True,3,2,2,23,1,2
157417,closed,[Offload] Skip most liboffload tests if no devices,RossBrunton,"If there are no devices available for testing on liboffload, the test
will no longer throw an error when it fails to instantiate.

The tests will be silently skipped, but with a warning printed to
stderr.
",2025-09-08T10:19:13Z,2025-09-09T09:11:05Z,2025-09-09T09:11:05Z,2025-09-09T09:11:05Z,True,1,2,2,8,1,2
157413,closed,[flang] do not rely on existing fir.convert in TargetRewrite,jeanPerier,"TargetRewrite is doing a shallow rewrite of function signatures. It is only rewriting function definitions (FuncOp), calls (CallOp) and AddressOfOp. It is not trying to visit each operations that may have an operand with a function type.
It therefore needs function signature casts around the operations it is rewriting.

Currently, these casts were not inserted after AddressOfOp rewrites because lowering tends to always insert function cast after generating AddressOfOp to the void type so the pass relied on implicitly updating this cast operand type to get the required cast. This is brittle because there is no guarantee such convert must be here and canonicalization and passes may remove them.

Insert a cast after on the result of rewritten operations. If it is redundant, it will be canonicalized away later.",2025-09-08T09:57:03Z,2025-09-08T15:22:29Z,2025-09-08T15:22:26Z,2025-09-08T15:22:25Z,True,2,0,1,25,5,2
157411,closed,[X86] Add test coverage for #157382,RKSimon,,2025-09-08T09:52:53Z,2025-09-08T10:25:35Z,2025-09-08T10:22:51Z,2025-09-08T10:22:51Z,True,1,0,1,110,0,1
157408,closed,[AMDGPU] Change expand-fp opt level argument syntax,frederik-h,"Align the syntax used for the optimization level argument of the expand-fp pass in textual descriptions of pass pipelines with the syntax used by other passes taking a similar argument. That is, use e.g. `expand-fp<O1>` instead of `expand-fp<opt-level=1>`.",2025-09-08T09:35:13Z,2025-09-10T10:41:48Z,2025-09-10T08:44:28Z,2025-09-10T08:44:28Z,True,13,0,2,38,20,7
157409,closed,PPC: Use StringRef for subtarget constructor arguments,arsenm,,2025-09-08T09:43:11Z,2025-09-08T10:50:17Z,2025-09-08T10:50:16Z,2025-09-08T10:50:16Z,True,2,0,3,3,5,2
157404,closed,PPC: Remove TargetTriple from PPCSubtarget,arsenm,This already exists in the base class.,2025-09-08T08:33:24Z,2025-09-08T10:18:34Z,2025-09-08T10:18:32Z,2025-09-08T10:18:32Z,True,2,0,1,12,17,2
157410,closed,release/21.x: [SCEVExp] Fix early exit in ComputeEndCheck.,nikic,Backport of: https://github.com/llvm/llvm-project/commit/a6148071300302b451ae92fbd8f8b955a6974891 https://github.com/llvm/llvm-project/commit/ec581e460ae92ef29c1ea4f200b36b79188fdd21 https://github.com/llvm/llvm-project/commit/f8972c8280d28660aaff888c093a9e01b9ee71e6,2025-09-08T09:47:48Z,2025-09-09T08:43:13Z,2025-09-09T08:38:26Z,,False,3,0,3,294,134,7
157400,closed,Sparc: Remove Is64Bit field from SparcTargetMachine,arsenm,Directly use the triple instead of having an additional field.,2025-09-08T07:40:35Z,2025-09-08T09:23:08Z,2025-09-08T09:23:06Z,2025-09-08T09:23:06Z,True,2,0,1,19,20,4
157402,closed,[mlir][gpu] Refactor GpuOpsToROCDLOps pass interface (NFC),pabloantoniom,"This PR deletes the `createLowerGpuOpsToROCDLOpsPass` constructor from
the .td file, making the `createConvertGpuOpsToROCDLOps` pass available to
users. This has the following effects:

1. `createLowerGpuOpsToROCDLOpsPass` is not available anymore. Instead,
`createConvertGpuOpsToROCDLOps` should be used. This makes the interface
consistent with ConvertGpuOpsToNVVMOps.

2. To call `createConvertGpuOpsToROCDLOps`, the options must be passed
via ConvertGpuOpsToROCDLOpsOptions. This has the side effect of
making the `allowed-dialects` option available, which was not
accessible via C++ before.",2025-09-08T08:03:27Z,2025-09-10T07:04:35Z,2025-09-10T07:04:34Z,2025-09-10T07:04:34Z,True,12,12,4,2,34,3
157397,closed,Sparc: Remove TargetTriple member from SparcSubtarget,arsenm,This already exists in the base class,2025-09-08T07:29:48Z,2025-09-08T08:22:21Z,2025-09-08T08:22:19Z,2025-09-08T08:22:19Z,True,2,0,1,3,7,4
157396,closed,"[RISCV] Replace undef with poison, NFC",jacquesguan,"Since undef is deprecated now, reuse of some tests case would cause CI failure, this pr replaces most undef with poison",2025-09-08T07:27:02Z,2025-09-09T07:16:16Z,2025-09-09T07:16:16Z,2025-09-09T07:16:16Z,True,2,0,1,11709,11709,236
157394,closed,VE: Stop using PointerLikeRegClass,arsenm,There is only one pointer size so there is no reason to use ptr_rc.,2025-09-08T07:13:48Z,2025-09-08T11:58:28Z,2025-09-08T11:58:26Z,2025-09-08T11:58:26Z,True,2,2,1,8,6,1
157393,closed,[llvm] Proofread AdvancedBuilds.rst,kazutakahirata,,2025-09-08T07:06:51Z,2025-09-08T19:32:43Z,2025-09-08T19:32:35Z,2025-09-08T19:32:35Z,True,0,0,1,5,5,1
157407,closed,[libFuzzer] Change sig-trap test to allow expected output strings in any order,DanBlackwell,"I have seen some flakiness in this test where the 2 checked strings appear in a different order. Due to buffering of writes, and that one of these strings is written during the signal handler, I think this is valid. This PR relaxes the test to allow those strings to appear in either order.",2025-09-08T09:08:29Z,2025-09-10T07:25:13Z,2025-09-10T07:25:13Z,2025-09-10T07:25:13Z,True,1,0,1,2,2,1
157392,closed,[Hexagon] Remove an unnecessary cast (NFC),kazutakahirata,"Inst is of type MCInst &.
",2025-09-08T07:06:35Z,2025-09-09T07:01:27Z,2025-09-09T07:01:22Z,,False,1,2,1,1,1,1
157391,closed,[ADT] Add llvm::countr_zero_constexpr,kazutakahirata,"This commit introduces llvm::countr_zero_constexpr as a constexpr
version of llvm::countr_zero.

The existing llvm::countr_zero is not constexpr due to its use of
_BitScanForward.

I'm planning to use the new function in PointerLikeTypeTraits.h as a
replacement for ConstantLog2.
",2025-09-08T07:06:11Z,2025-09-10T02:38:49Z,2025-09-10T02:38:44Z,,False,2,0,1,43,13,2
157390,closed,[ADT] Replace Min with variadic std::min,kazutakahirata,"Without this patch, NumTagBits and MinTag use a recursive template Min
to compute Min.

This patch replaces Min with variadic std::min.

While I'm at it, this patch changes the type of NumTagBits to static
constexpr int.
",2025-09-08T07:03:34Z,2025-09-08T19:32:39Z,2025-09-08T19:32:28Z,2025-09-08T19:32:27Z,True,1,2,1,6,11,1
157389,closed,[ADT] Simplify DenseMapIterator with std::reverse_iterator (NFC),kazutakahirata,"DenseMapIterator has two tasks:

- iterate the buckets in the requested direction
- skip the empty and tombstone buckets

These tasks are intertwined in the current implementation.

This patch cleans up DenseMapIterator by separating the two tasks.
Specifically, we introduce a private middleman iterator type called
BucketItTy.  This is the same as the pointer-based iterator in the
forward direction, but it becomes std::reverse_iterator<pointer>
otherwise.  Now, the user-facing iterator iterates over BucketItTy
while skipping the empty and tombstone buckets.  This way,
AdvancePastEmptyBuckets always calls BucketItTy::operator++.  If the
reverse iteration is requested, the underlying raw pointer gets
decremented, but that logic is hidden behind
std::reverse_iterator<pointer>::operator++.

As a result, we can remove RetreatPastEmptyBuckets and a couple of
calls to shouldReverseIterate.

Here is a data point.  A couple of months ago, we were calling
shouldReverseIterate from 18 places in DenseMap.h.  That's down to 5.
This patch reduces it further down to 3.
",2025-09-08T07:03:03Z,2025-09-10T03:58:55Z,2025-09-10T01:06:35Z,2025-09-10T01:06:35Z,True,3,0,1,23,32,1
157387,closed,[LV] Fix cost misaligned when gather/scatter w/ addr is uniform.,ElvisWang123,"This patch fix the assertion when the `isUniform` (from legacy model) and `isSingleScalar`(from Vplan-based model) mismatch.

The simplify test that cause assertion
```
loop:
  loadA = load %a  => %a is loop invariant.
  loadB = load %LoadA
  ...
```
In the legacy cost model, it cannot analysis that addr of `%loadB` is uniform but in the Vplan-based cost model both addr in `%loadA` and `loadB` is single scalar.

Full test caused crash: https://llvm.godbolt.org/z/zEG8YKjqh. ",2025-09-08T05:47:07Z,2025-09-10T23:50:05Z,2025-09-10T23:49:55Z,2025-09-10T23:49:55Z,True,1,22,8,82,0,2
157384,closed,[clang-tidy] Minor documentation wording for performance-noexcept-move-constructor,nicovank,"
Fix #157343.
",2025-09-08T04:44:18Z,2025-09-08T08:03:00Z,2025-09-08T04:56:10Z,2025-09-08T04:56:10Z,True,4,0,1,1,1,1
157376,closed,[RISCV] Allow constants in tryFoldSelectIntoOp,preames,"For simm12 constants this allows the use of e.g. addi/xori, and for non-simm12 constants seems to still produce better code than the default lowering.",2025-09-08T00:53:40Z,2025-09-08T20:11:39Z,2025-09-08T20:11:34Z,2025-09-08T20:11:34Z,True,1,3,1,73,124,3
157388,closed,"[RISCV] Undo fneg (fmul x, y) -> fmul x, (fneg y) transform",lukel97,"InstCombine will hoist an fneg through an fmul, but not for fadd/fsub.
This prevents us from matching fmsub and fnmadd in some cases.

This patch adds a DAG combine to undo this in InstCombine, which helps some hot loops in 508.namd_r:

```diff
@@ -983,18 +983,15 @@
        fld     ft2, 48(a5)
        fld     ft3, 64(a5)
        fld     ft4, 72(a5)
-       fneg.d  fa0, fa0
-       fneg.d  ft0, ft0
-       fneg.d  ft2, ft2
        fmul.d  fa3, ft5, fa3
        fmul.d  fa0, fa3, fa0
        fmul.d  ft0, fa3, ft0
        fmul.d  fa3, fa3, ft2
        fld     ft2, 0(s1)
        fmul.d  fa4, ft5, fa4
-       fmadd.d fa2, fa4, fa2, fa0
-       fmadd.d ft6, fa4, ft6, ft0
-       fmadd.d fa4, fa4, ft1, fa3
+       fmsub.d fa2, fa4, fa2, fa0
+       fmsub.d ft6, fa4, ft6, ft0
+       fmsub.d fa4, fa4, ft1, fa3
```

This gives a [1.77% improvement in both instruction count and runtime on 508.namd_r](https://lnt.lukelau.me/db_default/v4/nts/profile/1/1022/1021)

This also causes some more fnegs to be sunk after a bitcast to integer, so they're now done as xor. From glancing at some of the schedules for WriteFSGN my guess is that this is also profitable.",2025-09-08T06:18:31Z,2025-09-09T01:30:33Z,2025-09-09T01:30:33Z,2025-09-09T01:30:33Z,True,5,0,4,412,42,5
157375,closed,[NFC][LowerTypeTests] Make `buildBitSet` a static function,vitalybuka,,2025-09-08T00:50:13Z,2025-09-08T01:22:10Z,2025-09-08T01:22:09Z,2025-09-08T01:22:09Z,True,1,1,1,5,8,1
157386,closed,[LowerTypeTests] Optimize buildBitSet,vitalybuka,"`buildBitSet` had a loop trough entire GlobalLayout to pickup matching offsets.

The patch maps all offsets to correspondign
`TypeId`, so we pass prepared list of offsets into
`buildBitSet`.

On one large internal binary, `LowerTypeTests`
took 58% of ThinLTO link time before the patch.
After the patch just 7% (absolute saving is 200s).
",2025-09-08T05:32:09Z,2025-09-11T01:25:15Z,2025-09-11T01:16:58Z,2025-09-11T01:16:58Z,True,2,3,1,43,40,3
157374,closed,[mlir] Use free op create functions. NFC.,kuhar,The builder create methods are deprecated: https://mlir.llvm.org/deprecation/. See https://discourse.llvm.org/t/psa-opty-create-now-with-100-more-tab-complete/87339.,2025-09-08T00:34:41Z,2025-09-08T02:26:27Z,2025-09-08T02:13:20Z,2025-09-08T02:13:20Z,True,5,0,1,60,60,9
157373,closed,[mlir][gpu] Revert gpu.subgroup_broadcast with any_lane,kuhar,"This partially reverts https://github.com/llvm/llvm-project/pull/152808.

Post-commit comments revealed that the `any_lane` variant hasn't been fully agreed upon at the time of landing.",2025-09-08T00:22:47Z,2025-09-08T01:13:26Z,2025-09-08T00:43:57Z,2025-09-08T00:43:57Z,True,2,0,1,15,38,7
157369,closed,[MLIR][Python][NO MERGE] Support Python-defined passes in MLIR,makslevental,based heavily on https://github.com/llvm/llvm-project/pull/156000,2025-09-07T23:10:46Z,2025-09-09T02:16:01Z,2025-09-09T02:16:01Z,,False,0,7,1,167,15,7
157367,closed,[mlir][tblgen] Fix bug when mixing props and InferTypes,fabianmcg,"This patch fixes a bug occurring when properties are mixed with any of the InferType traits, causing tblgen to crash. A simple reproducer is:
```
def _TypeInferredPropOp : NS_Op<""type_inferred_prop_op_with_properties"", [
    AllTypesMatch<[""value"", ""result""]>
  ]> {
  let arguments = (ins Property<""unsigned"">:$prop, AnyType:$value);
  let results = (outs AnyType:$result);
  let hasCustomAssemblyFormat = 1;
}
```

The issue occurs because of the call:
```
op.getArgToOperandOrAttribute(infer.getIndex());
```
To understand better the issue, consider:
```
attrOrOperandMapping = [Operand0]
arguments = [Prop0, Operand0]
```
In this case, `infer.getIndex()` will return `1` for `Operand0`, but `getArgToOperandOrAttribute` expects `0`, causing the discrepancy that causes the crash.

The fix is to change `attrOrOperandMapping` to also include props.
",2025-09-07T22:07:46Z,2025-09-10T12:17:39Z,2025-09-10T12:08:03Z,2025-09-10T12:08:03Z,True,3,2,2,42,28,4
157361,closed,[PDB] Add public symbol lookup by address,Nerixyz,"This adds a method on the `PublicsStream` to look up symbols using their address (segment + offset).
It's largely a reimplementation of [`NearestSym`](https://github.com/microsoft/microsoft-pdb/blob/805655a28bd8198004be2ac27e6e0290121a5e89/PDB/dbi/gsi.cpp#L1492-L1581) from the reference. However, we don't return the nearest symbol, but the exact symbol.
Still, in case of ICF, we return the symbol that's first in the address map. Users can then use the returned offset to read the next records to check if multiple symbols overlap, if desired.

From #149701.",2025-09-07T20:02:11Z,2025-09-10T17:37:59Z,2025-09-10T15:38:38Z,2025-09-10T15:38:38Z,True,4,8,8,295,0,4
157357,closed,[Mips] Decode the operand of JrcRx16,s-barannikov,"This change will allow to remove `-ignore-non-decodable-operands` TableGen option.

The J(AL)R(C) instructions still have incorrect encodings, but it seems there is only one mips16 test that only checks that `nop` can be assembled.
",2025-09-07T18:25:09Z,2025-09-07T22:18:06Z,2025-09-07T18:53:05Z,2025-09-07T18:53:05Z,True,1,0,1,2,3,1
157362,closed,[llvm-pdbutil] Create public symbols in yaml2pdb,Nerixyz,"pdb2yaml dumps the public symbols, but yaml2pdb didn't create these in the exported PDB. With this PR, they're added to the final PDB.",2025-09-07T20:25:44Z,2025-09-10T15:03:17Z,2025-09-10T15:03:17Z,2025-09-10T15:03:17Z,True,1,3,3,75,0,2
157366,closed,[ORC][examples][LLVM-C] Fix ThreadSafeContext to wrap existing context,MrAnno,Fixes #155881,2025-09-07T22:02:48Z,2025-09-09T10:26:58Z,2025-09-09T10:23:54Z,2025-09-09T10:23:54Z,True,7,0,7,6,3,3
157346,closed,"Revert ""[Offload] Run unit tests as a part of check-offload""",mgorny,Reverts llvm/llvm-project#156675 due to regressions in standalone build and test errors without all plugins enabled (#157345).,2025-09-07T15:09:35Z,2025-09-07T15:12:16Z,2025-09-07T15:12:15Z,2025-09-07T15:12:15Z,True,2,0,1,1,1,1
157350,closed,[CIR] Upstream FPToFPBuiltin ASinOp,AmrDeveloper,Upstream support for FPToFPBuiltin ASinOp,2025-09-07T17:00:44Z,2025-09-10T15:47:07Z,2025-09-10T15:47:07Z,2025-09-10T15:47:07Z,True,2,1,4,56,0,5
157344,closed,[BPF] Remove skb operand of LD_ABS/LD_IND instructions,s-barannikov,"The instructions already have R6 register in the Uses list, there is no need for an additional explicit `GPR:$skb` operand.

This simplifies intrinsic selection and makes the instructions decodable without post-decoding pass inserting R6 operand.",2025-09-07T15:03:14Z,2025-09-08T23:20:04Z,2025-09-08T23:20:01Z,2025-09-08T23:20:01Z,True,1,0,1,6,45,5
157338,closed,[CSKY] Decode CARRY / GPRSP operands not encoded into instruction (NFCI),s-barannikov,"The generated decoder can now decode these operands. All we need to do is to add `bits<0>` for these operands to instruction records and provide operand decoders.

While here, reformat adjacent lines.
",2025-09-07T13:17:15Z,2025-09-07T22:18:24Z,2025-09-07T13:47:23Z,2025-09-07T13:47:23Z,True,1,0,1,155,200,8
157341,closed,[CodeGen] Make TargetRegisterInfo destructor public (NFC),s-barannikov,"All in-tree targets store target-specific TRI in target-specific Subtarget/InstrInfo class by value, but some downstream targets may prefer to store it as `std::unique_ptr<const TargetRegisterInfo>` (to avoid inclusion of MyTargetRegisterInfo.h in MySubtarget.h).

Making the destructor public makes this possible, and also follows general C++ guidelines (the destructor should be either public virtual or protected non-virtual).

All other related classes already have their destructors public.",2025-09-07T13:43:02Z,2025-09-07T16:21:33Z,2025-09-07T15:57:39Z,2025-09-07T15:57:38Z,True,1,0,1,2,1,1
157336,closed,CodeGen: Make TargetInstrInfo constructor protected,arsenm,"There's no use for the standalone base class TargetRegisterInfo
and TargetSubtargetInfo already do this.",2025-09-07T11:41:02Z,2025-09-07T16:52:50Z,2025-09-07T15:26:53Z,2025-09-07T15:26:53Z,True,4,0,1,9,2,2
157342,closed,[AArch64] Use DAG.getNegative instead of getNegatedInteger (NFC),AZero13,,2025-09-07T14:23:17Z,2025-09-07T17:35:32Z,2025-09-07T16:41:19Z,2025-09-07T16:41:19Z,True,1,0,1,5,11,1
157337,closed,CodeGen: Pass SubtargetInfo to TargetGenInstrInfo constructors,arsenm,"This will make it possible for tablegen to make subtarget
dependent decisions without adding new arguments to every
target.",2025-09-07T11:42:31Z,2025-09-08T03:12:21Z,2025-09-08T03:12:20Z,2025-09-08T03:12:20Z,True,9,5,6,113,86,52
157329,closed,[clang][bytecode][NFC] Remove some unnecessary if statements,tbaederr,We already checked that `IsStatic` is true above.,2025-09-07T07:32:14Z,2025-09-07T16:55:48Z,2025-09-07T16:55:48Z,2025-09-07T16:55:48Z,True,1,0,1,4,12,1
157325,closed,[ADT] Simplify StringSet::contains (NFC),kazutakahirata,"We can use Base::contains.
",2025-09-07T06:59:29Z,2025-09-07T17:45:03Z,2025-09-07T17:39:46Z,2025-09-07T17:39:46Z,True,1,0,1,1,1,1
157324,closed,[ADT] Refactor DenseSet::insert (NFC),kazutakahirata,"DenseMap::try_emplace can default-construct DenseSetEmptyKey, so we
don't need to pass Empty on our own.
",2025-09-07T06:59:14Z,2025-09-07T17:44:59Z,2025-09-07T17:39:39Z,2025-09-07T17:39:39Z,True,1,0,1,2,4,1
157326,closed,"[Support] Refactor IsResizableBase with ""constexpr if"" (NFC)",kazutakahirata,"We have two implementations of IsResizableBase that are selected with
a boolean template parameter.  This patch consolidates them into one
with ""constexpr if"".  The ""constexpr if"" condition uses
llvm::is_detected to check the availability of resize().
",2025-09-07T07:00:18Z,2025-09-07T17:45:06Z,2025-09-07T17:39:54Z,2025-09-07T17:39:54Z,True,1,0,1,12,22,1
157328,closed,[clang][bytcode][NFC] Use UnsignedOrNone for global ids,tbaederr,,2025-09-07T07:30:58Z,2025-09-08T06:56:46Z,2025-09-08T06:56:46Z,2025-09-08T06:56:46Z,True,1,0,1,28,28,4
157323,closed,[VPlan] Don't build recipes for unconditional switches,lukel97,"In #157322 we crash because we try to infer a type for a VPReplicate switch recipe.

My understanding was that these switches should be removed by VPlanPredicator, but this switch survived through it because it was unconditional, i.e. had no cases other than the default case.

This fixes #157322 by not emitting any recipes for unconditional switches to begin with, similar to how we treat unconditional branches.
",2025-09-07T06:27:41Z,2025-09-08T09:01:43Z,2025-09-08T09:01:43Z,2025-09-08T09:01:43Z,True,2,7,4,99,0,2
157317,closed,"Revert ""[compiler-rt][sanitizer-common] adding C23 memset_explicit interception.""",thurstond,"Reverts llvm/llvm-project#154428 due to buildbot breakages (e.g., https://lab.llvm.org/buildbot/#/builders/51/builds/22984)",2025-09-06T21:47:14Z,2025-09-06T21:57:47Z,2025-09-06T21:57:45Z,2025-09-06T21:57:45Z,True,1,0,1,1,27,3
157321,closed,MC: Add Triple overloads for more MC constructors,arsenm,"Avoids more Triple->string->Triple round trip. This
is a continuation of f137c3d592e96330e450a8fd63ef7e8877fc1908",2025-09-07T03:13:52Z,2025-09-08T05:07:35Z,2025-09-08T03:41:22Z,2025-09-08T03:41:22Z,True,4,0,2,326,269,50
157313,closed,[llvm] Proofread ExceptionHandling.rst,kazutakahirata,,2025-09-06T20:46:55Z,2025-09-07T00:14:06Z,2025-09-07T00:11:32Z,2025-09-07T00:11:32Z,True,0,0,1,18,18,1
157312,closed,[Support] Remove an unnecessary cast (NFC),kazutakahirata,"dli_fname is of type const char *.
",2025-09-06T20:46:38Z,2025-09-08T09:59:46Z,2025-09-07T00:11:24Z,2025-09-07T00:11:24Z,True,2,0,1,1,2,1
157309,closed,"[ADT] Use ""constexpr if"" in get_hashable_data (NFC)",kazutakahirata,"This patch combines two implementations of get_hashable_data into one
with ""constexpr if"".  I'm retaining the original return type of the
second variant, size_t, with static_cast<size_t>.  Moving away from
template metaprogramming should improve readability.
",2025-09-06T20:45:22Z,2025-09-07T17:44:53Z,2025-09-07T17:39:23Z,2025-09-07T17:39:23Z,True,1,0,1,10,14,1
157311,closed,[Support] Simplify Object::operator== (NFC),kazutakahirata,"This patch simplifies Object::operator== with DenseMap::operator==.
",2025-09-06T20:46:22Z,2025-09-07T17:46:48Z,2025-09-07T17:46:02Z,2025-09-07T17:46:02Z,True,1,2,1,3,10,2
157310,closed,[ADT] Clean up fwd_or_bidi_tag with std::conditional_t (NFC),kazutakahirata,"fwd_or_bidi_tag selects one of two implementations of
fwd_or_bidi_tag_impl depending on the condition.  We can replace it
with std::conditional_t, eliminating the need for helper structs
fwd_or_bidi_tag_impl.

This patch also converts the fwd_or_bidi_tag struct into an alias
template, making ""using filter_iterator"" a little more readable.
",2025-09-06T20:45:57Z,2025-09-07T17:44:56Z,2025-09-07T17:39:31Z,2025-09-07T17:39:31Z,True,1,0,1,10,19,1
157305,closed,[LLD] Recognize 'mipspe' as a PE target name,hpoussin,"When compiling for target `mipsel-windows-gnu` triple, clang is calling linker with `mipspe` machine.
Handle this case.",2025-09-06T19:52:27Z,2025-09-08T20:28:55Z,2025-09-08T20:28:55Z,2025-09-08T20:28:55Z,True,3,0,1,2,1,2
157308,closed,[SCEVExp] Add helper to clean up dead instructions after expansion.,fhahn,"Add new helper to erase dead instructions inserted during SCEV expansion but not being used due to InstSimplifyFolder simplifications.

Together with https://github.com/llvm/llvm-project/pull/157307 this also allows removing some specialized folds, e.g.  https://github.com/llvm/llvm-project/blob/main/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp#L2205",2025-09-06T20:12:28Z,2025-09-08T09:53:21Z,2025-09-08T09:53:21Z,2025-09-08T09:53:21Z,True,1,2,3,29,53,19
157307,closed,"[InstSimplify] Simplify extractvalue (umul_with_overflow(x, 1)).",fhahn,"Look through extractvalue to simplify umul_with_overflow where one of
the operands is 1.

This removes some redundant instructions when expanding SCEVs, which in
turn makes the runtime check cost estimate more accurate, reducing the
minimum iterations for which vectorization is profitable.",2025-09-06T20:01:11Z,2025-09-07T17:42:37Z,2025-09-07T17:32:40Z,2025-09-07T17:32:40Z,True,2,2,4,98,58,8
157304,closed,[NFC][libc++] Fix typo in `libcxx/include/__memory/pointer_traits.h`,vinay-deshmukh,* Apply the typo fix as a separate NFC patch from here: https://github.com/llvm/llvm-project/pull/134330/files#r2313015079,2025-09-06T19:47:06Z,2025-09-10T09:55:26Z,2025-09-10T09:55:00Z,2025-09-10T09:55:00Z,True,7,0,3,1,1,1
157295,closed,"[RISCV][GlobalIsel] Lower G_FMINIMUMNUM, G_FMAXIMUMNUM",sunshaoce,"Similar to the implementation in https://github.com/llvm/llvm-project/pull/104411 , the `fmin.s`/`fmax.s` instructions follow IEEE 754-2019 semantics, and `G_FMINIMUMNUM`/`G_FMAXIMUMNUM` are legal.",2025-09-06T18:42:17Z,2025-09-11T02:16:43Z,2025-09-11T02:16:42Z,2025-09-11T02:16:42Z,True,1,2,2,325,72,8
157285,closed,[clang-tidy] Rename 'cert-err34-c' to 'bugprone-unchecked-string-to-number-conversion',vbvictor,"Part of the work in https://github.com/llvm/llvm-project/issues/157287.

Closes https://github.com/llvm/llvm-project/issues/157302.",2025-09-06T16:36:03Z,2025-09-09T17:01:32Z,2025-09-09T15:27:14Z,2025-09-09T15:27:14Z,True,5,6,2,118,88,13
157282,closed,"Revert ""[LLD][COFF] Display the size of all consumed inputs with `/summary`""",aganea,Reverts llvm/llvm-project#157279,2025-09-06T16:01:19Z,2025-09-06T16:16:38Z,2025-09-06T16:09:06Z,2025-09-06T16:09:06Z,True,1,0,1,38,49,7
157279,closed,[LLD][COFF] Display the size of all consumed inputs with `/summary`,aganea,"When `/summary` is used, we now also display the cumulative size of all input OBJ files, including those pulled from archives. Lazy OBJ files that were not pulled in are not accounted for.

Also added separators between digit groups, to make the output more bearable.

Example output:
```
> lld-link ... /summary
                                    Summary
--------------------------------------------------------------------------------
               4,958 Input OBJ files (expanded from all cmd-line inputs)
      46,715,790,512 Size of all consumed OBJ files (non-lazy), in bytes
                  42 PDB type server dependencies
                   0 Precomp OBJ dependencies
         293,910,064 Input type records
      16,931,361,928 Size of all input type records, in bytes
          11,201,549 Merged TPI records
           2,765,494 Merged IPI records
              38,649 Output PDB strings
          21,512,230 Global symbol records
          82,380,837 Module symbol records
             715,313 Public symbol records
```

I've skipped over the exact amounts for ""Size of all consumed inputs (non-lazy)"" in the unit tests, since the sizes of OBJ files can fluctuate between compilers.",2025-09-06T15:30:04Z,2025-09-06T16:01:06Z,2025-09-06T15:53:35Z,2025-09-06T15:53:35Z,True,4,0,2,49,38,7
157266,closed,[TableGen][DecoderEmitter] Inline reportRegion method (NFC),s-barannikov,,2025-09-06T13:20:48Z,2025-09-06T14:07:52Z,2025-09-06T14:04:05Z,2025-09-06T14:04:04Z,True,1,0,1,14,24,1
157284,closed,[LLD][COFF] Display the size of all consumed inputs with /summary (take 2),aganea,"When `/summary` is used, we now also display the cumulative size of all input OBJ files, including those pulled from archives. Lazy OBJ files that were not pulled in are not accounted for.

Also added separators between digit groups, to make the output more bearable.

Example output:
```
> lld-link ... /summary
                                    Summary
--------------------------------------------------------------------------------
               4,958 Input OBJ files (expanded from all cmd-line inputs)
      46,715,790,512 Size of all consumed OBJ files (non-lazy), in bytes
                  42 PDB type server dependencies
                   0 Precomp OBJ dependencies
         293,910,064 Input type records
      16,931,361,928 Size of all input type records, in bytes
          11,201,549 Merged TPI records
           2,765,494 Merged IPI records
              38,649 Output PDB strings
          21,512,230 Global symbol records
          82,380,837 Module symbol records
             715,313 Public symbol records
```
I've skipped over the exact amounts for ""Size of all consumed inputs (non-lazy)"" in the unit tests, since the sizes of OBJ files can fluctuate between compilers.

_(this is a reopening of https://github.com/llvm/llvm-project/pull/157279 which wasa committed by mistake)_",2025-09-06T16:26:05Z,2025-09-08T12:51:01Z,2025-09-08T12:51:01Z,2025-09-08T12:51:01Z,True,3,0,2,49,38,7
157260,closed,[Headers][X86] Add constexpr support for some AVX[512] intrinsics.,moorabbit,"The following AVX[512] intrinsics are now constexpr:
- `_mm_cvtepi64_pd`
- `_mm_mask_cvtepi64_pd`
- `_mm_maskz_cvtepi64_pd`
- `_mm_cvtepu64_pd`
- `_mm_mask_cvtepu64_pd`
- `_mm_maskz_cvtepu64_pd`
- `_mm256_cvtepi64_pd`
- `_mm256_mask_cvtepi64_pd`
- `_mm256_maskz_cvtepi64_pd`
- `_mm256_cvtepu64_pd`
- `_mm256_mask_cvtepu64_pd`
- `_mm256_maskz_cvtepu64_pd`
- `_mm256_cvtepi64_ps`
- `_mm256_mask_cvtepi64_ps`
- `_mm256_maskz_cvtepi64_ps`
- `_mm256_cvtepu64_ps`
- `_mm256_mask_cvtepu64_ps`
- `_mm256_maskz_cvtepu64_ps`
- `_mm_cvtepi16_ph`
- `_mm_mask_cvtepi16_ph`
- `_mm_maskz_cvtepi16_ph`
- `_mm_set1_ph`
- `_mm_cvtepu16_ph`
- `_mm_mask_cvtepu16_ph`
- `_mm_maskz_cvtepu16_ph`
- `_mm256_cvtepi16_ph`
- `_mm256_mask_cvtepi16_ph`
- `_mm256_set1_ph`
- `_mm256_maskz_cvtepi16_ph`

This PR is part 3 [[part 1](https://github.com/llvm/llvm-project/pull/156187) - [part 2](https://github.com/llvm/llvm-project/pull/156567)] of a series of PRs fixing #155798",2025-09-06T13:04:17Z,2025-09-09T20:36:11Z,2025-09-07T10:29:59Z,2025-09-07T10:29:59Z,True,1,0,31,109,47,4
157253,closed,[offload] Permit redefining OPENMP_STANDALONE_BUILD,mgorny,Permit redefining `OPENMP_STANDALONE_BUILD` to make it possible to build offload correctly via runtimes build (i.e. build where the top-level project is `runtimes`).  This follows the same logic in `openmp` component.,2025-09-06T12:35:42Z,2025-09-08T13:16:13Z,2025-09-08T13:16:02Z,2025-09-08T13:16:02Z,True,3,0,1,2,1,1
157248,closed,[flang] Fix build after #155244,matthias-springer,Fix build after #155244.,2025-09-06T10:53:56Z,2025-09-06T11:02:03Z,2025-09-06T11:02:02Z,2025-09-06T11:02:02Z,True,1,0,1,3,1,1
157247,closed,[AArch64][GlobalISel] Fix passing <3 x ptr> via the stack.,davemgreen,"A <3 x ptr> will become a <1 x ptr> after being split, which needs to be represented as a s64 in a LLT.",2025-09-06T09:26:14Z,2025-09-08T06:57:52Z,2025-09-08T06:57:47Z,2025-09-08T06:57:47Z,True,2,0,1,36,1,2
157246,closed,"[VectorCombine] Relax vector type constraint on bitop(bitcast, constant)",XChy,"Fixes https://github.com/llvm/llvm-project/issues/157131.
This patch allows bitop(bitcast, constant) -> bitcast(bitop) for scalar integer types.",2025-09-06T09:19:15Z,2025-09-08T04:35:20Z,2025-09-08T04:35:19Z,2025-09-08T04:35:19Z,True,3,1,4,75,14,2
157244,closed,[orc-rt] Add allocation-action execution support.,lhames,"This commit contains executor-side support for ORC allocation actions (see e50aea58d59).

An AllocAction is a function pointer with type
orc_rt_WrapperFunctionBuffer (*)(const char *ArgData, size_t ArgSize), along with an associated blob of argument bytes.

An AllocActionPair is a pair of AllocActions, one to be run at memory finalization time and another to be run at deallocation time.

The runFinalizeActions function can be used to run all non-null finalize actions in a sequence of AllocActionPairs, returning the corresponding sequence of deallocation actions on success.

The runDeallocActions function can be used to run a sequence of dealloc actions returned by runFinalizeActions.",2025-09-06T08:19:54Z,2025-09-07T01:10:22Z,2025-09-07T01:09:28Z,2025-09-07T01:09:28Z,True,0,0,1,375,0,7
157242,closed,[orc-rt] Add SPS serialization for ExecutorAddr.,lhames,,2025-09-06T07:59:00Z,2025-09-06T08:09:30Z,2025-09-06T08:08:35Z,2025-09-06T08:08:35Z,True,0,0,1,29,3,2
157237,closed,[llvm] Use lit internal shell by default,boomanaiden154,"This should result in a 10-15% test time improvement and also richer
test failure outputn on Linux where it is not yet the default. We can do
this now that all of the tests have been ported over to work with lit's
internal shell.

Fixes #102697.
",2025-09-06T06:54:48Z,2025-09-10T00:05:45Z,2025-09-10T00:05:44Z,2025-09-10T00:05:44Z,True,1,0,17,12,3,1
157236,closed,[not] Update disable-symbolization.test to work with internal shell,boomanaiden154,"This test is a special case as it executes two commands that are special
cased in the internal shell implementation. env runs entirely inside the
internal shell whereas not is handled specially, but still executed
externally. The internal shell does reorder execution of these though,
putting env commands before not which means we do not pick up
environment variables set by not.

These complications make it easier to just ensure that we invoke the
actual env binary (by calling it through bash) rather than using the
internal shell implementation.

Fixes #106627 by fixing the test, but without fixing the redirection
issue given the complexity does not seem justified.
",2025-09-06T06:52:29Z,2025-09-09T20:37:15Z,2025-09-09T20:37:13Z,2025-09-09T20:37:13Z,True,2,0,12,2,2,1
157234,closed,[CGData] Rewrite tests to not use subshells,boomanaiden154,"Subshells are not supported by lit's internal shell, which we want to
enable by default for the LLVM test suite. Rewrite the tests in
llvm/test/tools/llvm-cgdata to not use subshells so we can achieve this
without losing any test coverage.
",2025-09-06T06:19:55Z,2025-09-09T13:21:45Z,2025-09-09T13:21:43Z,2025-09-09T13:21:43Z,True,0,0,10,73,41,9
157245,closed,"[VectorCombine] Relax vector type constraint on bitop(bitcast, bitcast)",XChy,"Inspired by https://github.com/llvm/llvm-project/issues/157131.
This patch allows `bitop(bitcast, bitcast) -> bitcast(bitop)` for scalar integer types.",2025-09-06T09:17:30Z,2025-09-08T06:58:10Z,2025-09-08T06:58:10Z,2025-09-08T06:58:10Z,True,1,1,4,80,15,2
157232,closed,[MC] Rewrite stdin.s to use python,boomanaiden154,"This test needs to change the file descriptor offset for the llvm-mc
output file to test that we do not get an assertion in that situation.
This doesn't seem easy to do without bash subshells. Rewrite these test
in Python so we can remove the shell requirement from this test and
enable using it with lit's internal shell. This also has the bonus of
making the behavior that we are trying to create for the test much more
explicit (a .seek call on the FD).",2025-09-06T05:57:55Z,2025-09-09T23:36:06Z,2025-09-09T23:36:04Z,2025-09-09T23:36:04Z,True,8,5,13,32,3,2
157231,closed,[llvm] Proofread CMakePrimer.rst,kazutakahirata,,2025-09-06T05:45:20Z,2025-09-06T16:52:56Z,2025-09-06T16:52:08Z,2025-09-06T16:52:08Z,True,0,0,1,22,22,1
157229,closed,[ADT] Simplify SmallSetIterator with std::variant (NFC),kazutakahirata,"SmallSet supports two underlying data structures -- SmallVector and
std::set.  SmallSetIterator supports them by maintaining a flag
IsSmall and a union of the two underlying iterators.

This patch essentially packages the flag and the union into
std::variant, eliminating a lot of code involving IsSmall.

With this change, we drop from the Rule of Five all the way down to
Rule of Zero.
",2025-09-06T05:44:38Z,2025-09-06T16:49:59Z,2025-09-06T16:49:53Z,,False,4,0,1,10,76,1
157230,closed,[BPF] Remove an unnecessary cast (NFC),kazutakahirata,"getZExtValue() already returns uint64_t.
",2025-09-06T05:44:58Z,2025-09-06T16:52:51Z,2025-09-06T16:52:00Z,2025-09-06T16:52:00Z,True,0,0,1,1,1,1
157228,closed,[ADT] Simplify TypesAreDistinct with std::conjunction (NFC),kazutakahirata,"This patch uses std::conjunction to succinctly compute ""AND"" of:

- std::negation<is_one_of<T, Us...>>
- TypesAreDistinct<Us...>            // recursive step

This way, we can eliminate the entire ""detail"" block.
",2025-09-06T05:43:44Z,2025-09-06T16:52:46Z,2025-09-06T16:51:53Z,2025-09-06T16:51:52Z,True,1,0,1,4,12,1
157227,closed,[ADT] Refactor DenseMapIterator::operator-> (NFC),kazutakahirata,"This patchs implement DenseMapIterator::operator-> in terms of
operator* to reduce code duplication.
",2025-09-06T05:43:17Z,2025-09-06T16:52:39Z,2025-09-06T16:51:45Z,2025-09-06T16:51:44Z,True,1,0,1,1,7,1
157226,closed,IRMover: Switch to SmallPtrSet,vitalybuka,"Follow up to #157218.
But I can't measure a difference on
my example.
",2025-09-06T05:25:41Z,2025-09-08T06:34:05Z,2025-09-08T05:32:37Z,2025-09-08T05:32:37Z,True,1,0,3,3,1,1
157225,closed,[clang][bytecode] Remove unused reportOverflow(),tbaederr,,2025-09-06T04:57:29Z,2025-09-06T06:37:03Z,2025-09-06T05:25:53Z,2025-09-06T05:25:53Z,True,4,0,1,0,9,2
157224,closed,[clang][bytecode] Use InterpState::InConstantContext directly,tbaederr,Instead of referring to the EvalInfo's flag.,2025-09-06T04:57:17Z,2025-09-08T14:29:45Z,2025-09-08T14:29:45Z,2025-09-08T14:29:45Z,True,1,0,1,3,1,1
157223,closed,[lit] Move pipefail test into lit tests,boomanaiden154,"These removes another test that otherwise needs a shell. This does
remove test coverage for pipefail in the external shell, but the
external shell should be disabled by default pretty soon. This also adds
test coverage for the internal shell which did not exist before.
",2025-09-06T04:35:33Z,2025-09-07T17:44:01Z,2025-09-07T17:43:59Z,2025-09-07T17:43:59Z,True,1,2,2,10,3,3
157222,closed,[MemProf] Always add hints to allocations with memprof attributes,teresajohnson,"Apply hints even if the attribute is the default ""notcold"" or
""ambiguous"", to enable better tracking through the allocator.

Add an option to control the ambiguous allocation hint value.
",2025-09-06T04:27:30Z,2025-09-07T02:49:10Z,2025-09-07T01:41:04Z,2025-09-07T01:41:04Z,True,2,2,1,145,64,2
157221,closed,[RISCV][NFC] Fix typo in RISCVIndirectBranchTracking.cpp,jaidTw,,2025-09-06T03:39:51Z,2025-09-08T07:02:48Z,2025-09-08T07:02:48Z,2025-09-08T07:02:48Z,True,1,0,1,1,1,1
157218,closed,IRMover: Proper fix of performance regression of #146020,vitalybuka,"In #157045 I didn't realize that IRMover object is
one for entire LTO, but IRLinker is created per
module. We need one cache for combined module.

Also update StringRef key to just a pointer, which
should be enough for this task.

I timed ""IRLinker::linkNamedMDNodes"" code on one
of our internal binaries, not very large, but
above average.

Before #146020: 0.4859s
After #146020: 624.4686s
After #157045: 322.3493s
After this patch: 0.5574s
",2025-09-06T01:52:08Z,2025-09-06T02:24:05Z,2025-09-06T02:24:04Z,2025-09-06T02:24:04Z,True,2,3,2,15,7,2
157220,closed,[RISCV] Exclude LPAD in machine outliner,jaidTw,"After https://github.com/llvm/llvm-project/pull/139993, the RISCVIndirectBranchTracking pass is also ran before the Machine Outliner pass, this yield a possibility that the outliner could also outlined the LPAD instruction that should be placed at the target of an indirect branch. This patch excludes LPAD instruction from the candidate of machine outliner.",2025-09-06T03:36:05Z,2025-09-09T14:50:29Z,2025-09-09T14:50:23Z,2025-09-09T14:50:23Z,True,2,8,8,76,0,3
157216,closed,AMDGPU: Remove getLdStRegisterOperandForSize,arsenm,"The AV operand classes should be used directly at the top level
of the load/store definitions. Inline the remaining use into the
strange MUBUF TFE vs. non-TFE usecase, which needed a special case
for 16-bit operands anyway.",2025-09-06T01:14:04Z,2025-09-08T08:57:58Z,2025-09-08T08:57:57Z,2025-09-08T08:57:57Z,True,2,0,1,12,34,2
157215,closed,AMDGPU: Use RegisterOperand for MIMG class data operands,arsenm,"Avoid using getLdStRegisterOperand hidden at the bottom
of the class hierarchy.",2025-09-06T01:05:11Z,2025-09-08T08:20:39Z,2025-09-08T08:20:36Z,2025-09-08T08:20:36Z,True,2,0,1,280,273,5
157210,closed,[TargetInstrInfo][AArch64] Don't assume register came from operand 0 in canCombine,topperc,"We already have the register number from the user operand. Use it instead of assuming it must be operand 0 of the producing instruction.

Fixes #157118",2025-09-06T00:20:09Z,2025-09-06T05:00:14Z,2025-09-06T05:00:12Z,2025-09-06T05:00:12Z,True,3,0,2,17,1,2
157209,closed,[orc-rt] Add missing <variant> header. (Fixes unit test on Linux),lhames,,2025-09-06T00:18:29Z,2025-09-06T00:45:54Z,2025-09-06T00:45:48Z,2025-09-06T00:45:48Z,True,0,0,1,1,0,1
157207,closed,[scudo] Use anonymous namespace for test helper code,frobtech,"Tests can be at top-level or inside an anonymous namespace,
doesn't matter.  But putting their helper code inside anonymous
namespaces both makes the code compatible with compiling using
-Wmissing-declarations and might let the compiler optimize the
test good a bit better.
",2025-09-06T00:09:15Z,2025-09-08T18:29:55Z,2025-09-08T18:29:53Z,2025-09-08T18:29:53Z,True,1,0,1,13,9,1
157205,closed,[gwp_asan] Use anonymous namespace for test helper code,frobtech,"Tests can be at top-level or inside an anonymous namespace,
doesn't matter.  But putting their helper code inside anonymous
namespaces both makes the code compatible with compiling using
-Wmissing-declarations and might let the compiler optimize the
test good a bit better.
",2025-09-05T23:56:42Z,2025-09-08T18:30:25Z,2025-09-08T18:30:23Z,2025-09-08T18:30:23Z,True,1,0,1,12,1,3
157204,closed,[MemProf] Add ambigous memprof attribute,teresajohnson,"To help track allocations that we matched with memprof profiles but
for which we weren't able to disambiguate the different hotness
contexts, apply an ""ambiguous"" memprof attribute to all allocations with
matched profiles. These will be replaced if we can identify a single
hotness type, possibly after cloning.

Eventually we plan to translate this to a special hotness hint on the
allocation call.
",2025-09-05T23:51:59Z,2025-09-06T01:32:11Z,2025-09-06T01:32:10Z,2025-09-06T01:32:10Z,True,1,4,2,46,7,4
157203,closed,[libc] Use anonymous namespace for test helper code,frobtech,"Tests can be at top-level or inside an anonymous namespace,
doesn't matter.  But putting their helper code inside anonymous
namespaces both makes the code compatible with compiling using
-Wmissing-declarations and might let the compiler optimize the
test good a bit better.
",2025-09-05T23:51:03Z,2025-09-06T00:14:58Z,2025-09-06T00:14:56Z,2025-09-06T00:14:56Z,True,1,0,1,29,6,5
157202,closed,[libc] Use anonymous namespace for file-local symbols,frobtech,"A namespace like LIBC_NAMESPACE::internal should only ever be
defined if it's providing global symbols declared in headers.
These StringUtil implementations were defining global namespaced
symbols for their file-local helper code, which they should not.
",2025-09-05T23:43:17Z,2025-09-06T00:15:13Z,2025-09-06T00:15:12Z,2025-09-06T00:15:12Z,True,1,0,1,18,20,2
157201,closed,PPC: Fix missing const on TargetInstrInfo's subtarget reference,arsenm,,2025-09-05T23:43:03Z,2025-09-06T00:13:51Z,2025-09-06T00:13:50Z,2025-09-06T00:13:50Z,True,2,0,1,3,3,2
157200,closed,[Bazel] Export compiler-rt builtins sources,chandlerc,"This provides a structured collection of the source files used in the compiler-rt builtins library in Bazel.

Normal build rules often don't work for runtime libraries as they may need to be built for a specific target platform and in an environment with the associated SDK available to build for that target. Instead, this PR exports the sources in a structured way that can be used by downstream users to collect and build these runtimes in a target-appropriate manner.

Currently, this includes AArch64, AArch32 (with and without VFP), x86-64, i386, PPC, and RISC-V. Where I could see a useful division of functionality, those are also exposed.

The rules use over-wide globs to minimize the need to manually update lists of files or to risk things slipping out of date.",2025-09-05T23:37:55Z,2025-09-07T10:36:50Z,2025-09-07T10:36:50Z,2025-09-07T10:36:50Z,True,1,3,3,308,1,2
157199,closed,[ExpandVectorPredication] Change function returns from Value* to bool. NFC,topperc,None of the callers do anything with the pointer other than check for null or equality. We can use bool to accomplish the same thing.,2025-09-05T23:36:13Z,2025-09-06T05:01:24Z,2025-09-06T05:01:22Z,2025-09-06T05:01:22Z,True,1,0,1,46,55,1
157196,closed,[lldb] Fix assertion when opcodes are exactly the length of the buffer,dsandersllvm,,2025-09-05T23:26:16Z,2025-09-08T17:37:00Z,2025-09-08T17:37:00Z,2025-09-08T17:37:00Z,True,1,0,1,1,1,1
157197,closed,[profcheck] update allow-list,mtrofin,new tests in areas not tackled yet.,2025-09-05T23:31:17Z,2025-09-05T23:31:57Z,2025-09-05T23:31:46Z,2025-09-05T23:31:46Z,True,0,0,1,16,0,1
157195,closed,[ExpandVectorPredication] Support vp.merge in foldEVLIntoMask.,topperc,Partial fix for #157184. It still crashes later in SelectionDAG.,2025-09-05T23:16:22Z,2025-09-06T05:00:58Z,2025-09-06T05:00:56Z,2025-09-06T05:00:56Z,True,1,2,1,23,2,2
157192,closed,[lldb] Replace IRExecutionUnit::GetSectionTypeFromSectionName with Ob…,adrian-prantl,"…jectFile API

This avoids code duplication.",2025-09-05T22:39:43Z,2025-09-05T22:47:04Z,2025-09-05T22:47:04Z,2025-09-05T22:47:04Z,True,1,0,1,2,57,2
157191,closed,[flang] Downgrade error to warning for consistency,klausler,"When a procedure name is declared EXTERNAL and then followed up with an explicit INTERFACE, the compiler emits an error when the procedure is a dummy procedure but only a warning otherwise.  Since the EXTERNAL statement is harmless in both cases, accept the case of a dummy procedure as well for consistency.

Fixes https://github.com/llvm/llvm-project/issues/157162.",2025-09-05T22:37:30Z,2025-09-10T23:58:18Z,2025-09-10T20:38:50Z,2025-09-10T20:38:50Z,True,7,0,3,26,8,3
157189,closed,[flang][cuda] Pass allocator index to allocate functions,clementval,Pass the allocator index as part of the allocate function. The information is part of cuf.allocate and it is useful for device resident components. ,2025-09-05T22:11:42Z,2025-09-09T18:29:00Z,2025-09-09T18:28:53Z,,False,3,5,4,115,89,11
157188,closed,[RISCV] Check for legal type before calling getSimpleValueType() in matchSplatAsGather.,topperc,"This just reorders existing so we do the legal type check first.

In this particular test case we're also protected by the i1 check that I also moved earlier.

Fixes #157177.",2025-09-05T22:10:47Z,2025-09-06T05:00:41Z,2025-09-06T05:00:38Z,2025-09-06T05:00:38Z,True,1,0,1,24,2,2
157186,closed,[Flang] Handle %VAL arguments correctly,ceseo,"Internal procedures expect reference parameters. However, when  %VAL is used, the argument should be passed by value. Create a temporary variable in call generation and pass the address to avoid a type conversion error.

Fixes #118239",2025-09-05T21:46:55Z,2025-09-10T15:51:53Z,2025-09-09T13:50:13Z,2025-09-09T13:50:13Z,True,12,10,4,59,5,3
157185,closed,[RISCV] Reduce duplication in RISCVInstrInfoSFB.td by using classes. NFC,topperc,,2025-09-05T21:45:21Z,2025-09-06T05:09:52Z,2025-09-06T04:59:50Z,2025-09-06T04:59:50Z,True,2,0,1,79,137,1
157183,closed,[libc++] Update owners of Android CI in BOT_OWNERS.txt,pirama-arumuga-nainar,"Add pirama-arumuga-nainar, Sharjeel-Khan and remove previous owner.",2025-09-05T21:43:01Z,2025-09-09T11:47:52Z,2025-09-09T11:47:52Z,2025-09-09T11:47:52Z,True,1,0,1,2,2,1
157182,closed,[OpenMP] Move `__omp_rtl_data_environment' handling to OpenMP,jhuber6,"Summary:
This operation is done every time we load a binary, this behavior should
be moved into OpenMP since it concerns an OpenMP specific data struct.
This is a little messy, because ideally we should only be using public
APIs, but more can be extracted later.
",2025-09-05T21:32:30Z,2025-09-08T14:58:39Z,2025-09-08T14:58:38Z,2025-09-08T14:58:38Z,True,2,2,1,88,104,5
157179,closed,Remove filegroup rules for .pyi files removed in 22c2e15408553b2c172d407a8ee417adc2a93757,lexi-nadia,,2025-09-05T21:16:44Z,2025-09-05T21:27:10Z,2025-09-05T21:27:10Z,,False,1,0,1,0,36,1
157178,closed,Remove filegroup rules for .pyi files removed in 22c2e15408553b2c172d407a8ee417adc2a93757,lexi-nadia,,2025-09-05T21:13:45Z,2025-09-05T21:14:06Z,2025-09-05T21:14:06Z,,False,0,0,6,0,36,1
157176,closed,[CMake] add `SKIP` to `add_lit_testsuites`,makslevental,This PR adds `SKIP` to `add_lit_testsuites`. The purpose is to let people filter the currently exhaustive inclusion of subdirectories which might not all depend on the same `DEPENDS`. The immediate use case is MLIR where we have a collection of Python tests that currently trigger rebuilds of various tools (like `mlir-opt`) which they do not depend on. That collection of tests is updated here too.,2025-09-05T21:02:23Z,2025-09-08T18:42:34Z,2025-09-06T10:41:48Z,2025-09-06T10:41:48Z,True,3,8,1,26,1,3
157174,closed,[clang] Detect int-to-float narrowing when the back-conversion is unspecified,camc,"Resolves #157067 

APFloat::convertToInteger returns opInvalidOp when the conversion has unspecified value. The int-to-float narrowing detection logic doesn't check for this when comparing the converted-back integer with the original integer.

PR adds a check for this, and test cases.",2025-09-05T20:54:07Z,2025-09-07T13:00:18Z,2025-09-07T12:59:58Z,2025-09-07T12:59:58Z,True,6,3,3,10,4,3
157173,closed,[bazel][mlir][python] Port #155741: stub auto-generation,rupprecht,"* Nanobind >= 2.9 is required now. Use 2.9.2
* Remove pyi filegroups that now refer to deleted files",2025-09-05T20:52:39Z,2025-09-05T21:20:10Z,2025-09-05T21:20:09Z,2025-09-05T21:20:09Z,True,0,0,1,3,39,2
157172,closed,[clang][OpenMP][SPIR-V] Fix addrspace of pointer kernel arguments,sarnex,"In SPIR-V, kernel arguments are not allowed to be in the Generic AS, in both Intel's internal SPIR-V offloading implementation as well as HIPSPV, `CrossWorkgroup` AS1 is used. Do the same for OMPSPV.

Currently with Generic AS the `llvm-spirv` translator blows up if we are using it, and if not, the GPU runtime blows up.

To get the existing logic to set the correct AS to kick in, we need to know if the function is a kernel or not at the time we first create the function that may end up as the kernel.

I use the existing `arrangeSYCLKernelCallerDeclaration` function to do the right kernel ABI computation, but since the function is not specific to SYCL anymore because I merged all the device kernel clang attributes into one.

Rename the function to be accurate to the current behavior, `arrangeDeviceKernelCallerDeclaration`.
",2025-09-05T20:52:29Z,2025-09-09T18:42:27Z,2025-09-09T18:42:26Z,2025-09-09T18:42:26Z,True,1,6,3,64,32,8
157170,closed,[lldb][ElfCore] Improve main executable detection in core files,GeorgeHuyubo,"This change improves how LLDB's ProcessElfCore plugin identifies the main executable when loading ELF core files. Previously, the code would simply use the first entry in the NT_FILE section, which is not guaranteed to be the main executable, also the first entry might not have a valid UUID.

1. **Storing executable name**: Extract the executable name from the ELF NT_PRPSINFO note and store it in `m_executable_name`

2. **Preferential matching**: When selecting the main executable from NT_FILE entries, prefer entries whose path ends with the stored executable name

3. **UUID-based lookup**: Call `FindModuleUUID()` helper function to properly match modules by path and retrieve a valid UUID

",2025-09-05T20:28:28Z,2025-09-11T04:19:59Z,2025-09-10T22:15:59Z,2025-09-10T22:15:59Z,True,4,8,1,42,18,2
157171,closed,[clang][ThreadSafety] Handle mutex scope,Prabhuk,"Before emitting warning about locks being held at the end of function
scope check if the underlying mutex is function scoped or not.

Issue: https://github.com/llvm/llvm-project/issues/156760",2025-09-05T20:36:46Z,2025-09-10T18:40:13Z,2025-09-10T18:40:13Z,,False,7,4,7,61,0,2
157169,closed,[CIR][NFC] Consildate CIRGenExprCXX.cpp files,andykaylor,"Somewhere in the upstreaming process, we created a file CIRGenCXXExpr.cpp that corresponded to the file CIRGenExprCXX.cpp in the incubator. Later we created a CIRGenExprCXX.cpp file.

This change consolidates those files, keeping the name used in the incubator.",2025-09-05T20:03:19Z,2025-09-05T22:49:54Z,2025-09-05T20:35:24Z,2025-09-05T20:35:24Z,True,4,0,1,409,427,3
157168,closed,[AMDGPU] Prevent VOPD combining of VGPRs with different MSBs,rampitec,,2025-09-05T19:54:36Z,2025-09-05T21:09:15Z,2025-09-05T20:34:53Z,2025-09-05T20:34:53Z,True,3,0,1,277,0,2
157166,closed,[AMDGPU] whole wave CSR tests on gfx1250. NFC.,rampitec,,2025-09-05T19:26:41Z,2025-09-05T20:57:20Z,2025-09-05T20:57:18Z,2025-09-05T20:57:18Z,True,2,0,1,4036,1269,1
157167,closed,[llvm][DebugInfo] Emit DW_OP_lit0/1 for constant boolean values,laxmansole,"Backends like NVPTX use -1 to indicate `true` and 0 to indicate `false` for boolean values. Machine instruction `#DBG_VALUE` also uses -1 to indicate a `true` boolean constant.

However, during the DWARF generation, booleans are treated as unsigned variables, and the debug_loc expression, like `DW_OP_lit0; DW_OP_not` is emitted for the `true` value.

This leads to the debugger printing `255` instead of `true` for constant boolean variables.

This change emits `DW_OP_lit1` instead of `DW_OP_lit0; DW_OP_not`.",2025-09-05T19:41:35Z,2025-09-08T18:27:17Z,2025-09-08T09:28:21Z,2025-09-08T09:28:21Z,True,3,0,1,54,2,4
157164,closed,[RISCV] Add SRAI to recursive part of isSignExtendedW.,topperc,"SRAI can only increase the number of sign bits. If the input has at least 33 sign bits, the result will to.

I don't have a test case for this currently. It was just an observation I made while thinking about the shifts and extracts.",2025-09-05T19:17:16Z,2025-09-05T20:02:15Z,2025-09-05T20:02:11Z,2025-09-05T20:02:11Z,True,1,0,1,2,0,1
157160,closed,[OpenACC][NFCI] Split recipe generation into its own class,erichkeane,"The recipe generation was dependent on the clause kind, which meant we had all of the recipe generation duplicated in each of clauses.  This patch copy/pastes all of them into their own type to do recipe generation, which should reduce clang's size.

Additionally, we've moved it off into its own file, which should make readability/organization improvements.",2025-09-05T18:56:21Z,2025-09-05T19:18:16Z,2025-09-05T19:18:16Z,2025-09-05T19:18:16Z,True,3,0,1,347,308,2
157157,closed,[libc] Fix CMPLXF128 macro definition for aarch64.,lntue,,2025-09-05T18:26:43Z,2025-09-05T20:14:11Z,2025-09-05T20:14:08Z,2025-09-05T20:14:07Z,True,1,0,1,4,0,1
157159,closed,[SCEV] Generalize (C * A /u C) -> A fold to (C1 * A /u C2) -> C1/C2 * A.,fhahn,"Generalize fold added in https://github.com/llvm/llvm-project/commit/74ec38fad0a1289f936e5388fa8bbe74653c55d9 / https://github.com/llvm/llvm-project/pull/156730 to support multiplying and
dividing by different constants, given they are both powers-of-2 and C1 is a
multiple of C2, checked via their trailing zeros.

https://alive2.llvm.org/ce/z/eqJ2xj",2025-09-05T18:56:13Z,2025-09-09T10:34:04Z,2025-09-09T09:41:35Z,2025-09-09T09:41:35Z,True,1,12,4,10,7,2
157158,closed,[FileCheck] Fix --enable-var-scope for numvars after reassignment,Clipi-12,"* When `--enable-var-scope` is active, `lib/FileCheck.cpp#clearLocalVars` gets called.
* That function loops through `GlobalNumericVariableTable` and then calls `NumericVariable::clear` on most items. It also removes them from `GlobalNumericVariableTable`.
* When reassigning an already cleared variable, `Pattern::match` calls `NumericVariable::setValue`, but it doesn't reinsert it into `GlobalNumericVariableTable`. Therefore, the next time `clearLocalVars` is called, it won't be able to loop through the variables.

Fix it by reinserting them in `GlobalNumericVariableTable` inside `Pattern::match`.",2025-09-05T18:52:20Z,2025-09-10T09:47:56Z,2025-09-09T21:28:01Z,2025-09-09T21:28:01Z,True,17,4,2,56,16,2
157156,closed,[MLIR][Python] bind InsertionPointAfter,makslevental,,2025-09-05T18:23:10Z,2025-09-05T21:30:42Z,2025-09-05T21:30:41Z,2025-09-05T21:30:41Z,True,4,0,1,65,5,3
157154,closed,"Revert ""[clang][Modules] Reporting Errors for Duplicating Link Declar…",qiongsiwu,"…ations in `modulemap`s (#148959)""

This reverts commit 538e9e8ebd09233b3900ed2dfd23e4e1ca5c9fc0 for two reasons.

1. Link decls in submodules can make sense even if the submodule is not explicit. We need to review the error check. This PR reverts the check so we still allow link decls in submodules. 
2. It is not a fatal error to have duplicating link decls. The linker deduplicates them anyways. 

rdar://159467837

",2025-09-05T18:05:31Z,2025-09-06T16:40:21Z,2025-09-06T15:50:21Z,2025-09-06T15:50:21Z,True,2,0,1,4,92,3
157149,closed,[libc][bazel] Fix missing fmodbf16 dependency,michaelrj-google,"Tests were failing due to a missing dependency on fputil/bfloat16.
",2025-09-05T17:46:51Z,2025-09-05T18:01:46Z,2025-09-05T18:00:00Z,2025-09-05T18:00:00Z,True,1,0,1,7,1,2
157150,closed,Default-initialize all fields of lldb_dap::protocol::Symbol.,lexi-nadia,,2025-09-05T17:47:02Z,2025-09-08T14:56:27Z,2025-09-05T20:51:50Z,2025-09-05T20:51:50Z,True,2,2,4,9,8,2
157148,closed,"Revert ""[clang][dataflow] Transfer more cast expressions.""",bazuzi,"Reverts llvm/llvm-project#153066

copyRecord crashes if copying from the RecordStorageLocation shared by the base/derived objects after a DerivedToBase cast because the source type is still `Derived` but the copy destination could be of a sibling type derived from Base that has children not present in `Derived`.

For example, running the dataflow analysis over the following produces UB by nullptr deref, or fails asserts if enabled:

```cc
struct Base {};

struct DerivedOne : public Base {
  int DerivedOneField;
};

struct DerivedTwo : public Base {
  int DerivedTwoField;

  DerivedTwo(const DerivedOne& d1)
      : Base(d1), DerivedTwoField(d1.DerivedOneField) {}
};
```

The constructor initializer for `DerivedTwoField` serves the purpose of forcing `DerivedOneField` to be modeled, which is necessary to trigger the crash but not the assert failure.",2025-09-05T17:46:28Z,2025-09-05T18:07:19Z,2025-09-05T18:07:18Z,2025-09-05T18:07:18Z,True,1,0,1,13,349,3
157147,closed,[RISCV] Add th.ext(u) to isSignExtendingOpW in RISCVOptWInstrs.,topperc,"These instructions extract and range of bits, move them to the LSB
then sign or zero extend the result to fill the upper bits. If
the extracted bits is small enough then the result will have 33
sign bits.",2025-09-05T17:24:06Z,2025-09-05T19:05:32Z,2025-09-05T19:05:28Z,2025-09-05T19:05:28Z,True,1,0,2,108,0,2
157145,closed,[Dexter] llvm-lit: always log DAP messages,OCHyams,"See https://github.com/llvm/llvm-project/pull/157090 description for motivation.


Printing the dap logs to stdout/err on failure sadly isn't enough (see #157130).

With this patch, we might be able to get clues about the flaky tests with well timed log inspection.",2025-09-05T17:17:14Z,2025-09-08T09:10:40Z,2025-09-08T09:10:40Z,2025-09-08T09:10:40Z,True,1,0,2,4,2,1
157146,closed,[scudo] Move getPageSize() decl to common.h header,frobtech,"The getPageSize() function is defined in the platform-specific
source files but used in common.cpp.  Every function used across
files should be declared in a header so the same declaration is
in scope for the callers and the definition.
",2025-09-05T17:23:44Z,2025-09-05T18:48:40Z,2025-09-05T18:48:38Z,2025-09-05T18:48:38Z,True,1,0,1,4,3,2
157143,closed,[bazel][libc] Update Bazel rules for fmodbf16 math function that was added in 96b1dfb57fc822ea69bf75a8f0a69eb168776faa,lexi-nadia,,2025-09-05T17:12:46Z,2025-09-05T17:26:32Z,2025-09-05T17:26:32Z,2025-09-05T17:26:32Z,True,1,0,2,12,0,2
157141,closed,[Support] Fix the style of type aliases (NFC),kazutakahirata,"This patch renames several type aliases to stick to the LLVM
coding standards.
",2025-09-05T17:06:05Z,2025-09-06T16:55:18Z,2025-09-06T16:55:09Z,2025-09-06T16:55:09Z,True,3,0,1,41,41,1
157140,closed,[CIR] Implement CXX field default initialization,andykaylor,This adds the code needed to handle default initialization for fields of various types.,2025-09-05T17:00:44Z,2025-09-05T20:19:48Z,2025-09-05T20:19:43Z,2025-09-05T20:19:43Z,True,1,0,1,321,14,6
157139,closed,[clang] Fix OOB read in SemaSwift::validateSwiftFunctionName,camc,"Resolves #157075 

This was causing an assertion failure on `_attribute__((swift_name("""")))`. Fix ensures this case shows the warn_attr_swift_name_function diagnostic as expected.",2025-09-05T17:00:05Z,2025-09-09T02:04:13Z,2025-09-09T02:03:57Z,2025-09-09T02:03:57Z,True,4,0,3,4,1,3
157137,closed,[clang] VectorExprEvaluator::VisitCallExpr - use APSInt callback instead of repeated switch statement,RKSimon,"Create a EvaluateBinOpExpr helper that each related group of elementwise binop builtins can use with their own custom callback, to help reduce the amount of duplication and avoid too much code bloat as more builtins are added.

This also handles builtins which have a elementwise LHS operand and a scalar RHS operand.

Similar to #155891 which did the same thing for the new ByteCode eval.",2025-09-05T16:32:06Z,2025-09-06T12:49:41Z,2025-09-06T12:24:22Z,2025-09-06T12:24:22Z,True,1,0,2,86,195,1
157135,closed,[PowerPC][NFC] Apply clang-format to PPCInstrFuture.td,lei137,,2025-09-05T16:26:40Z,2025-09-05T16:45:56Z,2025-09-05T16:43:10Z,2025-09-05T16:43:10Z,True,2,0,1,36,35,1
157133,closed,[RISCV] Add th.ext(u) to RISCVDAGToDAGISel::hasAllNBitUsers.,topperc,"These instructions are being used by the scalar efficiency SIG to determine if we should have a standard instruction. Improving our support for these instructions may give better data for their analysis.

I'll follow up by adding this to RISCVOptWInstrs too which will remove the 'w' suffixes added here.",2025-09-05T15:57:20Z,2025-09-05T18:57:29Z,2025-09-05T18:57:26Z,2025-09-05T18:57:26Z,True,1,0,1,12,3,3
157132,closed,[nfc][ir2vec] Remove `Valid` field,mtrofin,It is tied to the vocab having had been set. Checking that vector's `emtpy` is sufficient. Less state to track (for a maintainer),2025-09-05T15:52:32Z,2025-09-07T18:26:39Z,2025-09-07T18:26:23Z,2025-09-07T18:26:23Z,True,3,0,3,7,15,2
157130,closed,[Dexter] Temporarily print DAP logs on specific exception,OCHyams,"Temporarily print the DAP log if this fails to aid debugging a buildbot failure that doesn't reproduce easily.

See #157090 description for motivation

I think dumping the DAP log on unhandled exception could be a nice general feature, but for now I'd just like to be able to understand this specific failure mode better",2025-09-05T15:46:33Z,2025-09-08T10:53:54Z,2025-09-08T10:53:54Z,2025-09-08T10:53:54Z,True,5,1,3,94,83,82
157127,closed,[mlir][python] UB dialect python bindings,Hardcode84,,2025-09-05T15:37:03Z,2025-09-05T15:52:05Z,2025-09-05T15:52:01Z,2025-09-05T15:52:01Z,True,2,0,1,55,2,5
157126,closed,[X86][bytecode] Allow SSE/AVX BLENDVPD/PD intrinsics to be used in constexpr,RKSimon,"BLENDV intrinsics use the signbit of the condition mask to select between the LHS (false) and RHS (true) operands

Fixes #157066",2025-09-05T15:36:29Z,2025-09-06T11:57:02Z,2025-09-05T20:14:30Z,2025-09-05T20:14:30Z,True,2,2,3,36,18,7
157123,closed,[clang-tidy][NFC] Enable `readability-container-contains` check in clang-tidy config and apply fix-its,flovent,Closes #156157,2025-09-05T15:22:35Z,2025-09-09T13:56:36Z,2025-09-08T12:23:16Z,2025-09-08T12:23:16Z,True,9,0,1,19,20,16
157120,closed,[flang][FIR] enable fir.box_addr codegen inside fir.global,jeanPerier,"This is needed for https://github.com/llvm/llvm-project/pull/153222.

The semantics patch will allow lowering to represent contiguous designator as such in FIR in some cases of array component reference, but this creates a new hlfir.designate pattern that had no code generation support.

@vzakhari implemented the hlfir.designate to fir lowering for this pattern in https://github.com/llvm/llvm-project/pull/154232. This introduced a usage of fir.box_addr in fir.global that had no support for llvm code generation because it was never used.

FIR lowering of the fir.box type inside fir.global is special (it is an actual descriptor struct value instead of being a descriptor in memory) and causes builtin.unrealized_conversion_cast to be inserted under the hood by MLIR dialect conversion framework after each operation producing a fir.box is translated. These builtin.unrealized_conversion_cast must be removed before the code generation of operation of using the fir.box in order to get the right ""by value"" code generation required in global initial value definitions.
",2025-09-05T15:13:14Z,2025-09-08T08:15:25Z,2025-09-08T08:15:22Z,2025-09-08T08:15:22Z,True,1,0,1,52,19,2
157116,closed,[CIR] Add support for __builtin_alloca,mmha,This patch adds support for the alloca builtin and extends AllocaOp with a dynamic size argument.,2025-09-05T14:28:55Z,2025-09-09T13:47:18Z,2025-09-09T13:47:18Z,2025-09-09T13:47:18Z,True,2,11,2,175,6,8
157119,closed,[MLIR][Vector] Add warp distribution for `scf.if`,akroviakov,"This PR adds `scf.if` op distribution to the existing `VectorDistribute` patterns. 
The logic mostly follows that of `scf.for`: move op outside, wrap each branch with `gpu.warp_execute_on_lane_0`. 
A notable difference to `scf.for` is that each branch has its own set of escaping values, and `scf.if` itself does not have block arguments.",2025-09-05T14:54:26Z,2025-09-10T20:33:27Z,2025-09-10T20:33:27Z,2025-09-10T20:33:27Z,True,2,22,7,372,19,3
157114,closed,[libc++] Remove some of the type aliases in __hash_table,philnik777,,2025-09-05T14:19:27Z,2025-09-09T14:27:08Z,2025-09-09T14:27:06Z,2025-09-09T14:27:05Z,True,1,0,1,25,54,3
157115,closed,[flang][OpenMP] Fix build break with gcc 7.5.0 after e58de06414,kparzysz,Example: https://lab.llvm.org/buildbot/#/builders/140/builds/30179,2025-09-05T14:28:54Z,2025-09-05T16:20:20Z,2025-09-05T16:20:14Z,2025-09-05T16:20:14Z,True,1,0,2,2,1,1
157109,closed,[Clang][bytecode] interp__builtin_elementwise_binop - remove unused BuiltinID argument. NFC,RKSimon,,2025-09-05T13:39:37Z,2025-09-05T14:06:09Z,2025-09-05T14:06:05Z,2025-09-05T14:06:05Z,True,1,0,1,10,10,1
157107,closed,[NFC][DecoderEmitter] Arrange functions by class 1/N,jurahul,Rearrange functions so that all member functions for each class are together. ,2025-09-05T13:34:23Z,2025-09-05T15:07:46Z,2025-09-05T15:07:46Z,,False,4,1,1,21,31,1
157112,closed,[InstCombine] Add test for freeze of PHI with noundef start value (NFC),c-rhodes,"We should be able to remove this freeze as the incoming values to the PHI have the same well-defined start value and the GEP can't produce poison, but this is currently unsupported.

If the freeze is pushed to the incoming values we can remove it: https://godbolt.org/z/8dE4o1bKf",2025-09-05T14:13:44Z,2025-09-09T07:50:25Z,2025-09-09T07:50:25Z,2025-09-09T07:50:25Z,True,1,4,3,49,0,1
157106,closed,[Clang][bytecode] Add interp__builtin_elementwise_triop_fp to handle general 3-operand floating point intrinsics,RKSimon,"Refactor interp__builtin_elementwise_fma into something similar to interp__builtin_elementwise_triop with a callback function argument to allow reuse with other intrinsics

This will allow reuse with some upcoming x86 intrinsics",2025-09-05T13:33:14Z,2025-09-05T14:57:12Z,2025-09-05T14:57:07Z,2025-09-05T14:57:07Z,True,1,2,3,16,7,1
157105,closed,[clang][bytecode][NFC] Use an early return in CheckLoad,tbaederr,"If the block is not accessible, one of the check has to fail.",2025-09-05T13:29:37Z,2025-09-05T13:56:11Z,2025-09-05T13:56:11Z,2025-09-05T13:56:11Z,True,1,0,1,2,3,1
157104,closed,[libc++][C++03] cherry-pick #112102,philnik777,,2025-09-05T13:28:37Z,2025-09-09T12:05:33Z,2025-09-09T11:50:49Z,2025-09-09T11:50:49Z,True,2,0,1,17,3,2
157099,closed,[Coroutines] Walk inlinedAt recursively to create legal DILabels,Dinistro,"This commit resolves a defect in the creation of DILabels for suspend points. While a previous change introduced support for inlined locations, it did not consider that a location might originate from multiple inlinings. Therefore, we extend this to walk iteratively through all `inlinedAt` locations to get to the root.",2025-09-05T13:02:07Z,2025-09-05T14:07:32Z,2025-09-05T14:07:29Z,2025-09-05T14:07:29Z,True,1,0,1,16,8,2
157100,closed,[X86][bytecode] Allow SSE/AVX PBLENDVB intrinsics to be used in constexpr,RKSimon,"BLENDV intrinsics use the signbit of the condition mask to select between the LHS (false) and RHS (true) operands

First part of #157066 - the BLENDVPS/D requires floatbits hacking which I need to do some prep work for",2025-09-05T13:10:46Z,2025-09-05T14:49:09Z,2025-09-05T14:34:37Z,2025-09-05T14:34:37Z,True,1,1,3,38,8,7
157095,closed,[libc++][C++03] cherry-pick #126273,philnik777,,2025-09-05T12:52:04Z,2025-09-08T09:57:03Z,2025-09-08T09:57:01Z,2025-09-08T09:57:00Z,True,1,0,1,7,5,2
157094,closed,[orc-rt] Add a make_scope_exit utility.,lhames,"make_scoped_exit takes a function object and returns an object that will run the given function object at destruction time (unless the scope-exit object's `release` method is called to disable it).

This can be useful when a function needs to conditionally perform some cleanup, but may exit along multiple pathways. E.g.

```
  // Allocate resource here.
  auto DoCleanup = make_scope_exit([]() {
    // release resource here.
  });

  // various conditional error return paths.
  if (...)
    return make_error<...>(...);

  // successful return: cancel cleanup.
  DoCleanup.release();
  return Error::success();
```",2025-09-05T12:41:57Z,2025-09-05T12:53:16Z,2025-09-05T12:53:13Z,2025-09-05T12:53:13Z,True,0,0,1,94,0,4
157096,closed,[libc] Implement `CMPLX` for clang < 12,c8ef,Fixes https://github.com/llvm/llvm-project/pull/156344#issuecomment-3256837826,2025-09-05T12:52:30Z,2025-09-05T15:14:00Z,2025-09-05T14:46:38Z,2025-09-05T14:46:38Z,True,1,2,4,12,7,1
157093,closed,[NFC] Fix a comment for cfloat128.h,c8ef,,2025-09-05T12:38:59Z,2025-09-05T13:16:08Z,2025-09-05T13:16:04Z,2025-09-05T13:16:04Z,True,1,0,1,1,1,1
157091,closed,[orc-rt] Introduce WrapperFunction APIs.,lhames,"Introduces the following key APIs:

`orc_rt_WrapperFunction` defines the signature of an ORC asynchronous wrapper function:

```
typedef void (*orc_rt_WrapperFunctionReturn)(
    orc_rt_SessionRef Session, void *CallCtx,
    orc_rt_WrapperFunctionBuffer ResultBytes);

typedef void (*orc_rt_WrapperFunction)(orc_rt_SessionRef Session, void *CallCtx,
                                       orc_rt_WrapperFunctionReturn Return,
                                       orc_rt_WrapperFunctionBuffer ArgBytes);
```

A wrapper function takes a reference to the session object, a context pointer for the call being made, and a pointer to an orc_rt_WrapperFunctionReturn function that can be used to send the result bytes.

The `orc_rt::WrapperFunction` utility simplifies the writing of wrapper functions whose arguments and return values are serialized/deserialized using an abstract serialization utility.

The `orc_rt::SPSWrapperFunction` utility provides a specialized version of `orc_rt::WrapperFunction` that uses SPS serialization.",2025-09-05T12:27:20Z,2025-09-05T12:40:49Z,2025-09-05T12:39:54Z,2025-09-05T12:39:54Z,True,0,0,1,409,0,7
157089,closed,[InstCombine] Make foldCmpLoadFromIndexedGlobal() GEP-type independent,nikic,"foldCmpLoadFromIndexedGlobal() currently checks that the global type, the GEP type and the load type match in certain ways. Replace this with generic logic based on offsets.

This is a reboot of https://github.com/llvm/llvm-project/pull/67093. This PR is less ambitious by requiring that the constant offset is smaller than the stride, which avoids the additional complexity of that PR.",2025-09-05T12:21:34Z,2025-09-08T10:54:27Z,2025-09-08T10:54:25Z,2025-09-08T10:54:25Z,True,3,0,3,216,75,3
157088,closed,[Maintainers] Add for HashRecognize,artagnon,,2025-09-05T12:14:00Z,2025-09-05T13:13:59Z,2025-09-05T13:00:19Z,2025-09-05T13:00:19Z,True,1,0,1,8,1,2
157090,closed,[Dexter] Work around flaky LLDB DAP stackTrace response,OCHyams,"Buildbot cross-project-tests-sie-ubuntu sees sporadic test failures due to missing ""stackTrace"" ""source"" ""path"". The ""path"" field is optional for ""source"" according to DAP, so it's well formed. It works _most_ of the time, and doesn't consistently fail for any one test which is all strangely inconsistent.

* feature_tests/subtools/test/target_run_args_with_command.c - https://lab.llvm.org/buildbot/#/builders/181/builds/27287/steps/6/logs/stdio
* feature_tests/commands/perfect/dex_declare_address/address_after_ref.cpp - https://lab.llvm.org/buildbot/#/builders/181/builds/27321/steps/6/logs/stdio
* feature_tests/commands/perfect/command_line.c - https://lab.llvm.org/buildbot/#/builders/181/builds/27268/steps/6/logs/stdio

I can't replicate the failures locally after running the feature_tests in a loop for 3 hours, and haven't been able to work out why the ""source"" is sometimes missing by just looking at LLDB code.

So, instead, here is a plaster that I am hoping will improve bot consistency:

* Attempt to get the stack frames with source paths 3 times before giving up.

It would be ideal if we didn't need to do any of this. I think `_post_step_hook` could be removed if the behaviour in #156650 was fixed/changed.",2025-09-05T12:22:58Z,2025-09-09T09:00:38Z,2025-09-09T09:00:38Z,,False,2,0,1,31,11,1
157078,closed,"[orc-rt] Add MemProt, MemLifetime, AllocGroup, and AllocGroupMap.",lhames,"MemProt and MemLifetime are enum classes representing memory protection (Read | Write | Exec) and lifetime policy (Standard or Finalize-only) respectively.

An AllocGroup is a compressed (MemProt, MemLifetime) pair.

AllocGroupSmallMap<T> is a compressed map of AllocGroup -> T.

These utilities will be used in upcoming memory management APIs in the ORC runtime.",2025-09-05T11:38:59Z,2025-09-05T11:52:36Z,2025-09-05T11:52:33Z,2025-09-05T11:52:33Z,True,0,0,1,236,0,5
157077,closed,[orc-rt] Add [[nodiscard]] attributes to Math.h functions. NFC.,lhames,,2025-09-05T11:29:05Z,2025-09-05T11:35:49Z,2025-09-05T11:35:45Z,2025-09-05T11:35:45Z,True,0,0,1,2,2,1
157076,closed,[orc-rt] Add substitutes for std::countl_zero and std::bit_width.,lhames,These can be used until the ORC runtime can assume c++-20 or greater.,2025-09-05T11:17:21Z,2025-09-05T11:22:35Z,2025-09-05T11:22:30Z,2025-09-05T11:22:30Z,True,0,0,1,97,0,2
157074,closed,"[orc-rt] Fix byteswap implementation for 64-bit types, rename tests.",lhames,The 64-bit path included references to the llvm:: namespace that would have caused compile failures but for the fact that they were compiled out on all machines where the ORC runtime is currently tested.,2025-09-05T11:12:21Z,2025-09-05T11:15:42Z,2025-09-05T11:15:39Z,2025-09-05T11:15:39Z,True,0,0,1,4,4,2
157070,closed,[RISCV] Use non-VP select in gather->strided load combine. NFCish,lukel97,"Similar to #157068, remove our reliance on trivial VP intrinsics by using a regular select instruction and letting RISCVVLOptimizer take care of VL.
",2025-09-05T10:47:06Z,2025-09-06T03:45:49Z,2025-09-06T03:45:49Z,2025-09-06T03:45:49Z,True,1,0,1,3,3,1
157068,closed,[RISCV][LoopIdiomVectorize] Replace vp.icmp -> regular icmp. NFCish,lukel97,"To match the general direction of the loop vectorizer and reduce our dependency on [trivial VP intrinsics](https://discourse.llvm.org/t/rfc-remove-codegen-support-for-trivial-vp-intrinsics-in-the-risc-v-backend/87999), replace the use of vp.icmp with a regular icmp. RISCVVLOptimizer can take care of propagating VL.

",2025-09-05T10:31:09Z,2025-09-05T11:09:08Z,2025-09-05T11:09:07Z,2025-09-05T11:09:07Z,True,1,0,1,17,22,3
157062,closed,[Clang] Convert ConstraintRefersToContainingTemplateChecker to using RAV,zyn0217,"We previously employed a TreeTransform to perform a task that should have been achieved by RAV. The TreeTransform approach was a bit wasteful, as we discarded the transform result and incurred some incorrect semantic analysis.

Fixes https://github.com/llvm/llvm-project/issues/156225",2025-09-05T10:05:52Z,2025-09-06T02:47:11Z,2025-09-06T02:43:43Z,2025-09-06T02:43:43Z,True,2,0,2,74,37,4
157071,closed,[RISCV] Use non-vp select in RISCVGatherScatterLowering. NFCish,lukel97,"Similar to #157070 and #157068, let RISCVVLOptimizer do the work.
",2025-09-05T10:57:43Z,2025-09-06T03:46:03Z,2025-09-06T03:46:03Z,2025-09-06T03:46:03Z,True,1,0,1,35,71,3
157056,closed,[DAG] SelectionDAG::canCreateUndefOrPoison - AVGFLOOR/AVGCEIL don't create undef/poison,RKSimon,"AVGFLOORS: https://alive2.llvm.org/ce/z/6TdoQ_
AVGFLOORU: https://alive2.llvm.org/ce/z/4pfi4i
AVGCEILS: https://alive2.llvm.org/ce/z/nWu8WM
AVGCEILU: https://alive2.llvm.org/ce/z/CGvWiA

Fixes #147696",2025-09-05T08:59:02Z,2025-09-05T11:20:53Z,2025-09-05T11:11:16Z,2025-09-05T11:11:16Z,True,4,0,2,12,14,3
157057,closed,[Support][NFC] Move OptimizationLevel to the Support directory,david-arm,"Sometimes code depends upon the constant variables declared in OptimizationLevel (e.g. see #156802), which then requires them to add a dependency on the Passes directory. Given that code is much more likely to depend upon Support than Passes I believe it makes sense to move OptimizationLevel to Support. The Passes component already depends upon Support.

This PR was inspired by a suggestion from @sdesmalen-arm!",2025-09-05T09:13:45Z,2025-09-09T12:00:09Z,2025-09-09T12:00:09Z,,False,10,0,1,15,15,16
157055,closed,[libclc] Implement erf/erfc vector function with loop since scalar function is large,wenju-he,"This PR reduces amdgcn--amdhsa.bc size by 1.8% and nvptx64--nvidiacl.bc size by 4%.
Loop trip count is constant and backend can decide whether to unroll.",2025-09-05T08:51:08Z,2025-09-05T11:58:28Z,2025-09-05T11:58:24Z,2025-09-05T11:58:24Z,True,0,1,3,30,2,3
157054,closed,AMDGPU: Remove tablegen bz30254 workarounds from BUF instructions,arsenm,,2025-09-05T08:47:18Z,2025-09-05T14:07:59Z,2025-09-05T14:07:58Z,2025-09-05T14:07:58Z,True,2,0,1,37,56,1
157053,closed,AMDGPU: Change BUF classes to use RegisterOperand parameters,arsenm,,2025-09-05T08:47:17Z,2025-09-05T13:52:25Z,2025-09-05T13:32:40Z,2025-09-05T13:32:40Z,True,3,2,1,120,112,2
157048,closed,release/21.x: [lldb][DataFormatter] Allow std::string formatters to match against custom allocators (#156050),llvmbot,"Backport 4b362f152e58abd6aeed5d603a6dfc10115ed1ab

Requested by: @Michael137",2025-09-05T08:31:34Z,2025-09-08T07:41:19Z,2025-09-08T07:40:45Z,2025-09-08T07:40:44Z,True,3,0,1,58,33,3
157049,closed,[clang-tidy] Remove global options IgnoreMacros and StrictMode,carlosgalvezp,"They had been marked as deprecated since clang-tidy 20.x. After 2 releases, it's now time to fully remove support for them.

Fixes #156885",2025-09-05T08:32:24Z,2025-09-06T10:41:38Z,2025-09-06T10:41:35Z,2025-09-06T10:41:34Z,True,2,1,1,39,70,36
157047,closed,release/21.x: [X86] Only fold AND/ANDNP back to VSELECT if we know the predicated mask select is legal (#156663),llvmbot,"Backport 86879d46f6476386dc07772ede83cd43b6ddd739

Requested by: @RKSimon",2025-09-05T08:30:47Z,2025-09-09T08:35:46Z,2025-09-09T08:35:08Z,2025-09-09T08:35:08Z,True,4,0,1,29,0,2
157046,closed,[clang] Move two flags from EvalInfo to State,tbaederr,"Instead of relaying from InterpState to the parent state (which is an EvalInfo), just save the variables in State instead, so both subclasses have access to it.",2025-09-05T08:29:19Z,2025-09-06T04:16:16Z,2025-09-06T04:16:16Z,2025-09-06T04:16:16Z,True,1,3,1,33,36,4
157045,closed,IRLinker: avoid quadratic behavior,vitalybuka,"After #146020  `is_contained` does linear search trough
all previously inserted operands.

On large binaries it can take up to 30% for ThinLTO linking with CFI, which
uses long lists of `cfi.functions` metadata.
",2025-09-05T08:21:02Z,2025-09-08T13:56:51Z,2025-09-05T08:55:10Z,2025-09-05T08:55:10Z,True,3,2,2,14,1,1
157040,closed,[clang][bytecode][NFC] Remove instance pointer from emitDestruction,tbaederr,"We only call this when we just pushed a new pointer to the stack, so try to save the folling PopPtr op by removing the pointer inside emitDestruction directly, e.g. by letting the Call op just remove it.",2025-09-05T07:54:40Z,2025-09-05T08:38:50Z,2025-09-05T08:29:43Z,2025-09-05T08:29:43Z,True,2,0,1,47,59,5
157038,closed,[clang] Fix of test 'ctu-import-type-decl-definition.c' (NFC),balazske,It looks not possible to have a `sed` command with -i option that works on all platforms. The -i option is not necessary so it is removed.,2025-09-05T07:41:26Z,2025-09-05T15:50:58Z,2025-09-05T15:50:58Z,2025-09-05T15:50:58Z,True,4,1,2,2,2,1
157037,closed,"AMDGPU: Directly use align2 classes in gfx90a mimg operands
",arsenm,"This regresses the assembler diagnostics. I made some attempts
at avoiding this, but it turns out the way we manage these
is really wrong. We're completely ignoring the reported missing
features from MatchInstructionImpl and also don't have properly
configured predicates to automatically get the message.",2025-09-05T07:38:11Z,2025-09-06T01:14:06Z,2025-09-06T01:05:33Z,2025-09-06T01:05:33Z,True,2,4,1,61,45,4
157030,closed,[InstCombine] Added optimisation for trunc (Pow2 >> x) to i1,kper,"Closes #156898

I have added two cases. The first one matches when the constant is exactly power of 2. The second case was to address the general case mentioned in the linked issue. I, however, did not really solve the general case.
We can only emit a `icmp ult` if all the bits are one and that's only the case when the constant + 1 is a power of 2. Otherwise, we need to create `icmp eq` for every bit that is one.

Here are a few examples which won't be working with the two cases:
-  constant is `9`: https://alive2.llvm.org/ce/z/S5FLJZ
- subrange in `56`: https://alive2.llvm.org/ce/z/yn_ZNG
- and finally an example as worst case (because it alternates the bits): https://alive2.llvm.org/ce/z/nDitNA
",2025-09-05T07:13:53Z,2025-09-10T15:54:18Z,2025-09-10T15:54:18Z,2025-09-10T15:54:18Z,True,7,8,1,147,0,2
157036,closed,Mark test in optimization-remark.f90 as UNSUPPORTED on RISC-V,julianmorillo,"Make the test more tolerant (needed for RISC-V, as this target is not expected to emit optimization remarks)",2025-09-05T07:35:17Z,2025-09-09T08:09:03Z,2025-09-08T16:36:13Z,2025-09-08T16:36:13Z,True,4,2,4,11,10,1
157034,closed,[X86][AVX10] Remove EVEX512 and AVX10-256 implementations,phoebewang,"The 256-bit maximum vector register size control was removed from AVX10 whitepaper, ref: https://cdrdv2.intel.com/v1/dl/getContent/784343

We have warned these options in LLVM21 through #132542. This patch removes underlying implementations in LLVM22.",2025-09-05T07:26:24Z,2025-09-05T14:14:28Z,2025-09-05T14:08:59Z,2025-09-05T14:08:59Z,True,4,0,3,1154,1748,157
157029,closed,"[orc-rt] Clean up SPS serialization for Error, Expected; add testcase.",lhames,"This commit cleans up the SPS serialization code for Error and Expected, and adds test cases for success and failure values of each.",2025-09-05T07:12:45Z,2025-09-05T07:18:56Z,2025-09-05T07:18:42Z,2025-09-05T07:18:42Z,True,0,0,1,199,111,3
157027,closed,[SelectionDAG] Clean up SCALAR_TO_VECTOR handling in SimplifyDemanded…,bjope,"…VectorElts

This patch reverts changes from commit 585e65d3307f5f0 (https://reviews.llvm.org/D104250), as it doesn't seem to be needed nowadays.

The removed code was doing a recursive call to
SimplifyDemandedVectorElts trying to simplify the vector %vec when finding things like
  (SCALAR_TO_VECTOR (EXTRACT_VECTOR_ELT %vec, 0))

I figure that (EXTRACT_VECTOR_ELT %vec, 0) would be simplified based on only demanding element zero regardless of being used in a SCALAR_TO_VECTOR operation or not.

It had been different if the code tried to simplify the whole expression as %vec. That could also have motivate why to make element zero a special case. But it only simplified %vec without folding away the SCALAR_TO_VECTOR.",2025-09-05T06:59:12Z,2025-09-05T13:08:50Z,2025-09-05T13:08:50Z,2025-09-05T13:08:50Z,True,1,0,1,0,21,1
157023,closed,[Utils] Remove an unnecessary cast (NFC),kazutakahirata,"MergedCounts is of type double.
",2025-09-05T05:51:16Z,2025-09-05T15:23:18Z,2025-09-05T06:33:18Z,2025-09-05T06:33:18Z,True,1,0,1,1,1,1
157024,closed,[llvm] Proofread BitCodeFormat.rst,kazutakahirata,,2025-09-05T05:51:32Z,2025-09-05T15:45:38Z,2025-09-05T15:43:26Z,2025-09-05T15:43:26Z,True,0,0,1,19,19,1
157022,closed,[Support] Fix copy-paste errors in YAMLTraits.h,kazutakahirata,"has_MappingEnumInputTraits and its EmptyContext specialization define
Signature_validate to check for a member function named enumInput.
Note that in other YAML traits, Signature_foo is used to test the
presence of member method foo.

This patch fixes these copy-paste errors.
",2025-09-05T05:50:59Z,2025-09-05T15:45:32Z,2025-09-05T15:43:17Z,2025-09-05T15:43:17Z,True,1,2,1,4,4,1
157020,closed,"[ADT] Remove an unused private ""using"" directive",kazutakahirata,"SmallSetIterator::SelfTy is not used anywhere.
",2025-09-05T05:50:18Z,2025-09-05T15:45:26Z,2025-09-05T15:43:09Z,2025-09-05T15:43:09Z,True,1,0,1,0,1,1
157021,closed,[Support] Modernize PointerLikeTypeTraits with llvm::is_detected (NFC),kazutakahirata,"This patch consolidates four separate template structs into a single
IsPointerLike struct.  A helper alias:

  using check_IsPointerLike = ...;

encapsulates the logic to determine a type has pointer-like traits.
",2025-09-05T05:50:38Z,2025-09-05T15:37:49Z,2025-09-05T15:37:44Z,,False,2,0,1,7,16,1
157012,closed,[NFC][AsmMatcherEmitter] Misc code cleanup,jurahul,"- Rework `parseTwoOperandConstraint` to be simpler.
- Use structured binding is range for loops.
- Use ListSeparator in `emitGetSubtargetFeatureName`.
- Drop {} for single statement if.
- Remove redundant StringRef -> StringRef conversions.",2025-09-05T04:41:20Z,2025-09-05T14:28:36Z,2025-09-05T14:28:36Z,2025-09-05T14:28:35Z,True,1,2,2,34,59,1
157019,closed,[clang] fix definition data not being propagated to all redecls,mizvekov,"This fixes the workaround added in 8a63989, so that when a fake definition data is corrected, all redeclarations are also updated to point to it.

Since this regression was never released, there are no release notes.

Fixes #154840",2025-09-05T05:35:22Z,2025-09-05T06:36:59Z,2025-09-05T06:36:57Z,2025-09-05T06:36:57Z,True,1,3,1,99,0,2
157011,closed,[RISCV] Add -print-pipeline-passes test as follow up to #156798. NFC,topperc,,2025-09-05T04:34:23Z,2025-09-05T15:07:42Z,2025-09-05T15:07:39Z,2025-09-05T15:07:39Z,True,1,0,1,12,0,1
157009,closed,[Flang][OpenMP] Fix default firstprivatization miscategorization of mod file symbols,agozillon,"In at least certain cases, notably when equivalence is used (at least for the example this showed up as a problem in) we currently miscategorize symbols as firstprivate when they may not be, as they can throw a false positive when a use symbol from a mod file is picked up.

The fix to this is to chase up the appropriate symbol to access the correct details.",2025-09-05T04:07:04Z,2025-09-09T09:44:01Z,2025-09-08T16:53:00Z,2025-09-08T16:53:00Z,True,7,3,2,46,8,2
157010,closed,[libc] Workaround for GCC on `typedef` for `_Complex __float128`,frederick-vs-ja,"Currently, GCC can't parse `typedef _Complex __float128 cfloat128;`, although `__typeof__` can be used as a workaround. Reported https://gcc.gnu.org/PR121799 which was later considered as duplicate of https://gcc.gnu.org/PR32187.

Some recent changes exposed it to GCC and then caused CI failure for libc++. This patch adds a workaround for GCC.",2025-09-05T04:28:23Z,2025-09-05T05:50:38Z,2025-09-05T05:50:35Z,2025-09-05T05:50:35Z,True,3,2,2,5,0,1
157007,closed,[NFC][PowerPC] adding the options for register names and VSR to VR ,Himadhith,"NFC patch to add the flags -ppc-asm-full-reg-names --ppc-vsr-nums-as-vr to the following test files 
```
llvm/test/CodeGen/PowerPC/recipest.ll
llvm/test/CodeGen/PowerPC/setcc-logic.ll
llvm/test/CodeGen/PowerPC/vector-popcnt-128-ult-ugt.ll
```

Created this PR based on this discussion: https://github.com/llvm/llvm-project/pull/151971#issuecomment-3234090675",2025-09-05T03:39:38Z,2025-09-05T04:57:02Z,2025-09-05T04:57:02Z,2025-09-05T04:57:02Z,True,1,0,1,23290,23282,3
157006,closed,[libc++][test] Fix size calculation for `unordered_map` in ABI test,frederick-vs-ja,"Currently, `libcxx\test\libcxx\containers\associative\unord.map\abi.compile.pass.cpp` consistently fails for 32-bit platforms.

There's an off-by-4 size calculation error for some `unordered_map` specializations, possibly due to mistakenly ignoring some data member.",2025-09-05T03:28:03Z,2025-09-05T09:46:35Z,2025-09-05T09:46:29Z,2025-09-05T09:46:29Z,True,3,0,1,3,3,1
157004,closed,[MLIR][Bytecode] Enforce alignment requirements,nikalra,"Adds a check that the bytecode buffer is aligned to any section alignment requirements. Without this check, if the source buffer is not sufficiently aligned, we may early return when aligning the data pointer. In that case, we may end up trying to read successive sections from an incorrect offset, giving the appearance of invalid bytecode.

This requirement is documented in the bytecode unit tests, but is not otherwise documented in the code or Bytecode reference.",2025-09-05T02:56:43Z,2025-09-08T18:23:22Z,2025-09-05T05:31:41Z,2025-09-05T05:31:40Z,True,1,20,2,124,6,3
157002,closed,[NFC][libclc] Replace _CLC_V_V_VP_VECTORIZE macro with use of unary_def_with_ptr_scalarize.inc,wenju-he,"Commit d50f2ef437ae removes _CLC_V_V_VP_VECTORIZE from header file, but
the macro is still used in our downstream code:
https://github.com/intel/llvm/blob/0433e4d6f5c9/libclc/libspirv/lib/ptx-nvidiacl/math/modf.cl#L30
https://github.com/intel/llvm/blob/0433e4d6f5c9/libclc/libspirv/lib/ptx-nvidiacl/math/sincos.cl#L31

We can either revert d50f2ef437ae or replace macro with use of
unary_def_with_ptr_scalarize.inc. This PR uses the latter approach.",2025-09-05T02:53:24Z,2025-09-09T00:11:31Z,2025-09-09T00:11:27Z,2025-09-09T00:11:27Z,True,0,0,5,115,62,2
157001,closed,AMDGPU: Fix using unaligned vgprs in mimg error test,arsenm,"These instructions really have 2 errors, from the unsupported
image base instruction plus the unaligned vgpr usage. This
test intends to test the base instruction error, so fix the
secondary error to avoid changing the diagnostic in a future
patch.",2025-09-05T02:27:49Z,2025-09-05T22:43:31Z,2025-09-05T22:43:30Z,2025-09-05T22:43:30Z,True,2,0,1,7,7,1
157003,closed,[bazel][libc] Port #156344: complex macros,rupprecht,,2025-09-05T02:54:50Z,2025-09-05T03:10:17Z,2025-09-05T03:10:17Z,2025-09-05T03:10:17Z,True,1,0,1,15,1,1
156998,closed,AMDGPU: Test a few more cases for assembler errors for misaligned gfx90a vgprs,arsenm,,2025-09-05T01:32:14Z,2025-09-06T01:14:20Z,2025-09-05T22:32:40Z,2025-09-05T22:32:40Z,True,4,0,1,81,0,1
156997,closed,AMDGPU: Check aligned vgpr feature in assembler,arsenm,Use the new feature instead of listing the two separate cases.,2025-09-05T01:31:17Z,2025-09-05T23:28:38Z,2025-09-05T23:28:36Z,2025-09-05T23:28:36Z,True,2,0,1,1,1,1
156994,closed,[BOLT][AArch64][instr] Remove instructions on saving and restoring NZCV,yozhu,"Remove the `NZCV` save and restore instructions from instrumentation
sequence because the instructions used for getting counter address,
counter increment and stack push/pop won't impact `NZCV`. And with
this we can use `X1` to do counter increment and then the push and
pop of `X2` can be removed.",2025-09-05T00:36:21Z,2025-09-10T17:16:07Z,2025-09-10T17:16:07Z,2025-09-10T17:16:07Z,True,3,0,1,2,6,1
156993,closed,AMDGPU: Use switch to implement getRegPressureSetLimit,arsenm,This will now warn if new entries appear.,2025-09-05T00:29:04Z,2025-09-05T03:52:02Z,2025-09-05T03:52:00Z,2025-09-05T03:52:00Z,True,2,0,1,5,4,1
156992,closed,[mlir][vector] Add support for lowering n-D vector.to_elements op.,hanhanW,"The revision adds a pattern that flattens 2 or more dimensional `vector.to_elements` ops by `vector.shape_cast` + `vector.to_elements`.

It also adds the lowering pattern to ConvertVectorToLLVMPass and complete the tests.

It recovers the e2e lowering breakage from https://github.com/llvm/llvm-project/commit/b4c31dc98dfc929728904cd96f0f4cf812c4d5b5 on LLVM path.",2025-09-05T00:28:36Z,2025-09-05T17:19:39Z,2025-09-05T16:46:22Z,,False,7,3,1,146,0,7
156989,closed,AMDGPU: Really fix operands for global vgpr rtn atomics,arsenm,"The default non-agpr suffixed version was still using AVLdSt operands.

Since the the atomic instructions are defined with ret and non-ret
at the same root defm, it's easiest to compute the equivalent register
operand.",2025-09-05T00:27:44Z,2025-09-05T22:41:18Z,2025-09-05T22:41:16Z,2025-09-05T22:41:16Z,True,2,1,1,43,30,3
156990,closed,AMDGPU: Add agpr variants of flat atomic return instructions,arsenm,"We apparently do not have exhausive assembler error tests like for
the other atomic cases.",2025-09-05T00:27:46Z,2025-09-05T22:41:56Z,2025-09-05T22:41:53Z,2025-09-05T22:41:53Z,True,2,0,2,97,69,5
156988,closed,AMDGPU: Fix using wrong type in i32 atomic cmpxchg test,arsenm,Copy paste error from i64 case,2025-09-05T00:17:15Z,2025-09-05T00:56:13Z,2025-09-05T00:56:12Z,2025-09-05T00:56:12Z,True,2,0,1,126,137,1
156987,closed,[lldb] Add more mnemonics,JDevlieghere,Add a few more command option mnemonics.,2025-09-04T23:52:39Z,2025-09-05T16:25:03Z,2025-09-05T16:25:00Z,2025-09-05T16:25:00Z,True,1,0,1,64,60,1
156986,closed,[NFC][TableGen] Fix GlobalISel TableGen backend namespace usage,jurahul,"- Move standalone functions and variables out of anonymous namespace and make them static.
- Restrict the scope of anonymous namespace to just class declarations.
- Remove llvm/gi namespace enclosing the entire .cpp files and instead use `using namespace`.
- Use nested namespaces when possible.",2025-09-04T23:51:47Z,2025-09-05T14:27:58Z,2025-09-05T14:27:57Z,2025-09-05T14:27:57Z,True,1,4,2,57,73,9
156983,closed,[LLDB] Fix deterministic-build.cpp post #156931,boomanaiden154,"This test was brokem by migrating to the lit internal shell due to a lack of env prefix for setting environment variables. This was fixed in prevented the breakpoint in the test from mapping to anything, causing the test to file. This patch restores the original line numbering.",2025-09-04T23:43:18Z,2025-09-04T23:56:20Z,2025-09-04T23:56:17Z,2025-09-04T23:56:17Z,True,4,0,2,1,1,1
156985,closed,[profcheck] Change the FileCheck substitute command,alanzhao1,"The intent of the original regex doesn't work if, for example, the last RUN line was a pipe and FileCheck is in the next RUN line. See for example
[`function-specialization3.ll`](https://github.com/llvm/llvm-project/blob/a7c2ce6009a8034ebbf718c12a6e56c085036b57/llvm/test/Transforms/FunctionSpecialization/function-specialization3.ll). To fix this we just replace the redirerect stdout to `/dev/null` with `cat > /dev/null`, which works because it's effectively a no-op command that can be piped to or run standalone.

Tracking issue: #147390",2025-09-04T23:49:58Z,2025-09-05T17:22:46Z,2025-09-05T17:18:32Z,2025-09-05T17:18:32Z,True,2,0,2,12,2,1
156982,closed,[flang][acc] honor reduction clause's implied copy attribute,akuhlens,"The Open ACC spec states that the reduction clause implies the copy clause. Account for this in the check for `default(none)` variables. Add a test that shouldn't error, but did before this PR.",2025-09-04T23:18:27Z,2025-09-06T16:43:30Z,2025-09-06T15:30:08Z,2025-09-06T15:30:08Z,True,3,0,1,18,2,2
156981,closed,[lldb] Reflow descriptions in source/Commands/Options.td,JDevlieghere,Reflow command descriptions butchered by clang-format.,2025-09-04T23:16:33Z,2025-09-04T23:32:43Z,2025-09-04T23:31:35Z,2025-09-04T23:31:35Z,True,1,0,1,73,91,1
156991,closed,AMDGPU: Remove flat special case in getRegClass,arsenm,"These instructions now have correct operand definitions that
are all AGPR or all VGPR.",2025-09-05T00:27:48Z,2025-09-05T22:42:18Z,2025-09-05T22:42:16Z,2025-09-05T22:42:16Z,True,2,0,3,99,84,6
156980,closed,"Reland""[lldb] Add count for errors of DWO files in statistics and combine DWO file count functions""",zw3917,"This relands changes in https://github.com/llvm/llvm-project/pull/155023 for adding a count of dwo errors and combine all the dwo related stats into one struct.

The previous PR was reverted in https://github.com/llvm/llvm-project/pull/156777 as the newly added unit test `test_dwo_id_mismatch_error_stats` sometimes fails due to inappropriate use of `glob.glob`.
This change modified the tests created in the former PR to collect and modify the dwo files by there names instead of using index after `glob.glob`. This will avoid the possible failure in these tests if the order of dwo files changes. 

[Original PR: https://github.com/llvm/llvm-project/pull/155023](https://github.com/llvm/llvm-project/pull/155023)

## Testing
Ran unit tests
```
$ ./bin/llvm-lit /data/users/ziyiww/llvm-project/lldb/test/API/commands/statistics/basic/TestStats.py
./bin/llvm-lit /data/users/ziyiww/llvm-project/lldb/test/API/commands/statistics/basic/TestStats.py -v
-- Testing: 1 tests, 1 workers --
PASS: lldb-api :: commands/statistics/basic/TestStats.py (1 of 1)

Testing Time: 388.52s

Total Discovered Tests: 1
  Passed: 1 (100.00%)

$ bin/lldb-dotest -p TestStats.py /data/users/ziyiww/llvm-project/lldb/test/API/commands/statistics/basic/
----------------------------------------------------------------------
Ran 27 tests in 386.302s

OK (skipped=3)
```

",2025-09-04T23:15:55Z,2025-09-09T16:02:17Z,2025-09-09T16:02:17Z,2025-09-09T16:02:17Z,True,3,4,6,168,27,8
156975,closed,"Revert ""[UBSan] [min-rt] make minimal runtime handlers weak""",vitalybuka,"Existing `__ubsan_report_error` should be enough to solve this.

Ability to override on two levels, may result in hard to debug bugs
when in the same binary strong __ubsan_report_error and __ubsan_handle_##name##_minimal_abort
 defined in unrelated components.

With one entry point we will have at least linking error.

Reverts llvm/llvm-project#154220",2025-09-04T22:17:04Z,2025-09-05T00:34:57Z,2025-09-04T22:30:02Z,2025-09-04T22:30:02Z,True,2,0,1,7,6,1
156973,closed,[NFC][TableGen] Use `BitsInit::convertInitializerToInt` in a few places,jurahul,"- Replace manual code to convert a `BitsInit` to a uint64_t by using `convertInitializerToInt` where applicable. 
- Add `BitsInit::convertKnownBitsToInt` to handle existing patterns in DFAEmitter.cpp and RegisterInfoEmitter.cpp.
- Consolidate 3 copies of the same function in X86 emitters into a single function.",2025-09-04T22:00:33Z,2025-09-05T04:26:45Z,2025-09-05T04:26:41Z,2025-09-05T04:26:41Z,True,1,2,1,31,71,9
156974,closed,[RISCV] Reorganize select lowering to pull binop expansion early,preames,"This is purely stylistic, but I think makes the code easier to follow.

It isn't quite NFC because it undoes the arithmetic lowering for the select c, simm12, 0 cases for a processor with both conditional move forwarding and zicond.
",2025-09-04T22:08:11Z,2025-09-06T01:20:54Z,2025-09-06T01:13:53Z,2025-09-06T01:13:53Z,True,7,0,2,22,36,2
156979,closed,[compiler-rt] Fix a bug introduced into DEFINE_COMPILERRT_FUNCTION_ALIAS,jroelofs,"... during a refactoring for arm64ec in #137960 6ade80ce18087b1e27505985a254c487679e16b8. The subtle change here results in a change in symbols in the library from:

```
  00000038 T ___gesf2
  00000038 T ___gtsf2
```

to:

```
           I ___gesf2 (indirect for __gtsf2)
  00000038 T ___gtsf2
```

... which is a breaking change on Mach-O platforms.

rdar://157846316",2025-09-04T23:04:21Z,2025-09-09T20:17:17Z,2025-09-09T20:17:17Z,2025-09-09T20:17:17Z,True,0,0,1,1,1,1
156972,closed,[mlir][spirv][vector] Use adaptor.getElements() in FromElements lowering.,hanhanW,,2025-09-04T21:56:08Z,2025-09-04T23:28:00Z,2025-09-04T23:06:33Z,2025-09-04T23:06:33Z,True,5,0,1,20,7,2
156971,closed,[AMDGPU] Register amdgpu-lower-vgpr-encoding pass in npm,rampitec,,2025-09-04T21:48:28Z,2025-09-05T07:07:50Z,2025-09-05T07:07:47Z,2025-09-05T07:07:47Z,True,2,4,2,158,44,10
156969,closed,[CI] Only invoke ninja for runtimes build if runtimes are specified,boomanaiden154,"Otherwise we end up running ninja without any targets specified which just builds the rest of the default enabled targets. This shouldn't have too much impact, but can involve building extra things that we don't need.

This also makes the monolithic-windows.sh script consistent with the monolithic-windows.sh script.",2025-09-04T21:04:48Z,2025-09-04T21:41:11Z,2025-09-04T21:41:11Z,2025-09-04T21:41:10Z,True,0,0,1,5,3,1
156970,closed,[CIR] Add support for delegating constructors with VTT args,andykaylor,This adds support for handling delegating constructors with VTT arguments.,2025-09-04T21:26:31Z,2025-09-05T20:19:55Z,2025-09-05T20:19:13Z,2025-09-05T20:19:13Z,True,1,7,2,263,3,2
156968,closed,[NFC][TableGen] Adopt `CodeGenInstruction::getName()`,jurahul,,2025-09-04T20:58:19Z,2025-09-04T23:49:31Z,2025-09-04T23:49:26Z,2025-09-04T23:49:26Z,True,1,2,4,85,97,15
156967,closed,[libc] Remove unused _Thread_local define from headers.,vonosmas,"It was added in dd33f9cdef9f6209aa34713e1417f4a2e24e5ca6 to describe thread-local errno, but is no longer used in the codebase (with the exception of a single integration test, but the llvm-libc-provided `#define _Thread_local thread_local` is not needed there anyway, since `_Thread_local` is a keyword from C11 onwards.",2025-09-04T20:48:09Z,2025-09-04T21:53:31Z,2025-09-04T21:02:44Z,2025-09-04T21:02:44Z,True,7,0,1,0,3,1
156966,closed,[AMDGPU] Print high vgpr operand comments from objdump,rampitec,"This followed the agreed convention: every basic block shall
start with all MSBs zero. Codegen does the same lowering.",2025-09-04T20:40:23Z,2025-09-04T23:56:51Z,2025-09-04T23:56:49Z,2025-09-04T23:56:49Z,True,2,0,1,89,22,4
156965,closed,[AMDGPU] High VGPR lowering on gfx1250,rampitec,,2025-09-04T20:25:40Z,2025-09-04T23:20:50Z,2025-09-04T23:20:48Z,2025-09-04T23:20:48Z,True,2,0,1,1378,4,13
156964,closed,"Revert ""[libc++] Add thread safety annotations for std::lock (#154078)""",PiJoules,"This reverts commit 0a2eb850d0dbd9caa1b22ee94f3b2b9903f679cb.

Reverting because this leads to a false positive with -Wthread-safety. See https://github.com/llvm/llvm-project/issues/156760.",2025-09-04T20:23:42Z,2025-09-05T12:41:20Z,2025-09-05T12:41:20Z,,False,3,0,1,6,62,3
156963,closed,[CIR] Fix Complex emit promotion for Div op,AmrDeveloper,"This change fixes emitting promotion type for div op

Issue: https://github.com/llvm/llvm-project/issues/141365",2025-09-04T20:21:34Z,2025-09-05T18:22:59Z,2025-09-05T18:22:59Z,2025-09-05T18:22:58Z,True,1,2,1,123,3,2
156962,closed,[clang] Fix typo in comment,benwu25,Fixes what is presumably a typo in a comment in `builtinIsSupported`.,2025-09-04T20:19:31Z,2025-09-06T01:29:56Z,2025-09-06T01:29:39Z,2025-09-06T01:29:39Z,True,4,0,3,1,1,1
156961,closed,[flang][OpenMP] Reassociate logical ATOMIC update expressions,kparzysz,"This is a follow-up to PR153488 and PR155840, this time for expressions of logical type. The handling of logical operations in Expr<T> differs slightly from regular arithmetic operations. The difference is that the specific operation (e.g. and, or, etc.) is not a part of the type, but stored as a data member.
Both the matching code and the reconstruction code needed to be extended to correctly handle the data member.

This fixes https://github.com/llvm/llvm-project/issues/144944",2025-09-04T20:13:57Z,2025-09-05T13:41:10Z,2025-09-05T13:41:01Z,2025-09-05T13:41:01Z,True,2,2,1,252,30,3
156960,closed,[TableGen] Don't print the instruction enum value in multiple comments in GenInstrInfo.inc.,topperc,The name is most interesting and if you really need the number you can use the name to find the entry in the enum or use the first field of the table row.,2025-09-04T19:50:24Z,2025-09-04T20:27:03Z,2025-09-04T20:26:57Z,2025-09-04T20:26:57Z,True,1,0,1,7,7,2
156958,closed,[Support] Request including reproduction instructions in bug report message,carlosgalvezp,"Many times people only upload the backtrace without reproduction, making it difficult to work on the issue.",2025-09-04T19:43:50Z,2025-09-06T12:00:02Z,2025-09-06T10:44:10Z,2025-09-06T10:44:10Z,True,2,1,1,1,1,1
156957,closed,"[RISCV] Use arithmetic for select c, 0, simm12 even with zicond",preames,"The arithmetic expansion requires fewer registers, and is often fewer instructions.  The critical path does increase by (up to) one instruction.

This is a sub-case of the expansion we do without zicond, but restricted specifically to the simm12 case.  In the general case where the other source is a register using zicond is likely better.  (Edit: While technically true, this is a bit misleading, we do this in combineSelectToBinOp which is also used in the zicond path, just further down.)",2025-09-04T19:39:43Z,2025-09-04T21:51:18Z,2025-09-04T21:51:14Z,2025-09-04T21:51:14Z,True,3,2,3,120,248,4
156956,closed,ensure that dap_symbol is always initialized,lexi-nadia,,2025-09-04T19:23:54Z,2025-09-05T20:48:03Z,2025-09-04T20:16:18Z,2025-09-04T20:16:18Z,True,4,0,1,1,1,1
156954,closed,[bazel] Add -lbsd for lldb on Linux,keith,"In the case you link libedit statically with a vendored sysroot, this
flag is also required. It should be harmless in the case you link it
dynamically since libedit already links libbsd otherwise.
",2025-09-04T19:18:38Z,2025-09-04T19:52:44Z,2025-09-04T19:52:43Z,2025-09-04T19:52:43Z,True,0,0,1,13,0,1
156953,closed,[libc++] Add an optional integration of libc++'s test suite with SPEC,ldionne,This allows running the SPEC benchmarks as part of libc++'s own benchmarks by providing an external installation of SPEC.,2025-09-04T19:17:03Z,2025-09-05T12:54:52Z,2025-09-05T12:54:49Z,2025-09-05T12:54:49Z,True,2,2,3,197,0,3
156950,closed,[clang-tools-extra] Remove 'REQUIRES: shell' from lit tests.,cmtice,"As preparation for making lit use the internal shell by default in clang-tools-extra (with significant expected performance gains), this removes 'REQUIRES: shell' from the clang-tools-extra lit tests that have it, and updates the one test that was not passing with 'LIT_USE_INTERNAL_SHELL=1' to now pass with the internal shell.",2025-09-04T19:03:31Z,2025-09-08T18:44:40Z,2025-09-08T18:40:18Z,2025-09-08T18:40:18Z,True,4,8,3,7,9,6
156946,closed,Fix bazel build for ed3597e2f7c4a5ae1ad70de81032f2addf78e267,quanwanandy,,2025-09-04T18:29:30Z,2025-09-04T19:27:02Z,2025-09-04T19:27:02Z,2025-09-04T19:27:02Z,True,1,0,3,25,5,1
156944,closed,[Clang][bytecode] Add interp__builtin_elementwise_triop to handle general 3-operand integer intrinsics,RKSimon,"Refactor interp__builtin_elementwise_fsh into something similar to interp__builtin_elementwise_int_binop with a callback function argument to allow reuse with other intrinsics

This will allow reuse with some upcoming x86 intrinsics

We can flesh out handling for mixed vector/scalar args as the need arises",2025-09-04T18:25:35Z,2025-09-05T08:43:24Z,2025-09-05T08:19:32Z,2025-09-05T08:19:32Z,True,1,2,2,20,31,1
156945,closed,[LoopIdiomVectorize] Fix FindFirstByte successors,sjoerdmeijer,"This refactors fixSuccessorPhis from
LoopIdiomVectorize::transformByteCompare and uses it in LoopIdiomVectorize::expandFindFirstByte to ensure that all successor Phis have incoming values from the vector basic blocks.

Fixes #156588.",2025-09-04T18:26:45Z,2025-09-05T13:09:39Z,2025-09-05T13:05:08Z,2025-09-05T13:05:08Z,True,5,2,2,341,51,2
156942,closed,[nfc] Make function-specialization3.ll test compatible with profile propagation unittests,alanzhao1,"The build configuration described in
https://discourse.llvm.org/t/rfc-profile-information-propagation-unittesting/73595/11 causes this test to fail because that build configuration injects profile metadata which show up in the output. To fix this we just change the assertion to tolerate the presence of profile metadata.

Tracking issue: #147390",2025-09-04T18:10:13Z,2025-09-08T21:47:09Z,2025-09-08T21:47:09Z,,False,4,0,1,2,2,1
156939,closed,[lit] Add support for env -i,boomanaiden154,"env -i is needed for some lit tests. The feature requires a minimal amount of work to support and there is no easy way to rewrite the tests that require it.

At least two tests that need this:
1. clang/test/Driver/env.c
2. lldb/test/Shell/Host/TestCustomShell.test",2025-09-04T18:05:12Z,2025-09-04T19:42:36Z,2025-09-04T19:27:25Z,2025-09-04T19:27:25Z,True,2,0,2,43,10,4
156934,closed,[clang] Add [system] label to modules from resource headers,cyndyishida,"Since resource headers are installed, commonly as system dependencies, they should have `[system]` on them. Fix up the ones missing. ",2025-09-04T17:27:53Z,2025-09-05T23:26:14Z,2025-09-05T23:26:14Z,2025-09-05T23:26:14Z,True,1,0,1,2,2,1
156938,closed,[OpenACC][NFCI] Split up the init and decl from OpenACC recipes,erichkeane,"Expressions/references with 'bounds' are going to need to do initialization significantly differently, so we need to have the initializer and the declaration 'separate' in the future.  This patch splits the AST node into two, and normalizes them a bit.

Additionally, since this required significant work on the recipe generation, this patch also does a bit of a refactor to improve readability and future expansion, now that we have a good understanding of how these are going to look.",2025-09-04T17:44:53Z,2025-09-04T20:52:03Z,2025-09-04T20:30:22Z,2025-09-04T20:30:22Z,True,3,0,1,338,287,11
156932,closed,[DirectX] Add isinf f16 emulation for SM6.8 and lower,farzonl,"fixes #156068

- We needed to add a new sub arch to the target tripple so we can test that emulation does not happen when targeting SM6.9
- The HLSL toolchain needed to be updated to handle the conversion of strings to enums for the new sub arch.
- The emulation is done in DXILIntrinsicExpansion.cpp and needs to be able to convert both llvm.is.fpclass and lvm.dx.isinf to the proper emulation
- test updates in TargetParser/TripleTest.cpp, isinf.ll, is_fpclass.ll,  and DXCModeTest.cpp",2025-09-04T17:20:29Z,2025-09-05T18:02:48Z,2025-09-05T18:02:48Z,2025-09-05T18:02:48Z,True,3,6,4,126,14,8
156931,closed,[LLDB] Fix tests that fail when using internal shell.,cmtice,"These tests were failing on darwin, because the internal shell needs environment var definitions to start with 'env'.  This PR (hopefully) fixes that problem.",2025-09-04T17:15:43Z,2025-09-04T23:06:57Z,2025-09-04T17:43:10Z,2025-09-04T17:43:10Z,True,8,1,2,3,4,3
156930,closed,[HLSL][NFC] Change line endings to LF,hekota,Changes line endings in files related to HLSL to LF (`\n`).,2025-09-04T17:07:41Z,2025-09-04T21:19:24Z,2025-09-04T21:19:24Z,2025-09-04T21:19:24Z,True,2,0,2,5473,5473,92
156928,closed,[AVR] Remove LPM/ELPM custom decoder (NFC),s-barannikov,Follow-up to #156361.,2025-09-04T16:56:52Z,2025-09-05T07:25:59Z,2025-09-05T07:25:54Z,2025-09-05T07:25:54Z,True,0,0,1,3,17,2
156927,closed,[NFC][InstrInfoEmitter] Include location of inst definition in comment,jurahul,"Print the source location of the instruction definition in comment next to the enum value for each instruction. To make this more readable, change formatting of the instruction enums to be better aligned.

Example output:

```
    VLD4qWB_register_Asm_8                 = 573, // (ARMInstrNEON.td:8849)
    VMOVD0                                 = 574, // (ARMInstrNEON.td:6337)
    VMOVDcc                                = 575, // (ARMInstrVFP.td:2466)
    VMOVHcc                                = 576, // (ARMInstrVFP.td:2474)
    VMOVQ0                                 = 577, // (ARMInstrNEON.td:6341)
```",2025-09-04T16:50:50Z,2025-09-08T19:40:31Z,2025-09-04T22:06:40Z,2025-09-04T22:06:40Z,True,15,5,3,19,5,2
156926,closed,[ADT] Fix formatting in DenseMapInfo.h,kazutakahirata,"This is a follow-up for #156810.
",2025-09-04T16:48:16Z,2025-09-04T18:08:32Z,2025-09-04T18:08:16Z,2025-09-04T18:08:16Z,True,1,0,1,4,4,1
156925,closed,release/21.x: [Coroutines] Restore accidentally dropped intrinsic IDs,llvmbot,"Backport a647bb4a7ba23b5a7c7484fd5162fef2d10c7068

Requested by: @nikic",2025-09-04T16:47:11Z,2025-09-08T07:40:31Z,2025-09-08T07:39:57Z,2025-09-08T07:39:57Z,True,3,0,1,3,0,1
156924,closed,"[MLIR][XeGPU] Reapply attempt for ""Scattered ops sg-to-wi distribution #154949""",akroviakov,"This PR is a reapply of https://github.com/llvm/llvm-project/pull/154949, which failed one of sanitizer checks.
The issue was querying the `warpOp` results in `LoadDistribution` after calling `moveRegionToNewWarpOpAndAppendReturns()`, which resulted in use after free. This PR solves the issue by moving the op query before the call and is otherwise identical to the one linked above.",2025-09-04T16:43:03Z,2025-09-04T19:04:30Z,2025-09-04T19:04:30Z,2025-09-04T19:04:30Z,True,0,0,11,315,24,4
156923,closed,[VPlan] Only compute reg pressure if considered. NFCI,lukel97,"In #149056 VF pruning was changed so that it only pruned VFs that stemmed from MaxBandwidth being enabled.

However we always compute register pressure regardless of whether or not max bandwidth is permitted for any VFs (via `MaxPermissibleVFWithoutMaxBW`).

This skips the computation if not needed and renames the method for clarity.

The diff in reg-usage.ll is due to the scalable VPlan not actually having any maxbandwidth VFs, so I've changed it to check the fixed-length VF instead, which is affected by maxbandwidth.
",2025-09-04T16:37:48Z,2025-09-05T00:23:48Z,2025-09-05T00:23:47Z,2025-09-05T00:23:47Z,True,1,0,2,12,10,2
156922,closed,[libc][NFC] Add cmake facility to unify the way we parse arguments.,lntue,Also this will allow all arguments to have overlay-only and full-build-only options.,2025-09-04T16:37:34Z,2025-09-09T20:29:45Z,2025-09-09T20:29:38Z,2025-09-09T20:29:38Z,True,1,0,2,87,0,1
156920,closed,[NFC][MC][ARM] Reorder decoder functions 5/N,jurahul,"Move all decode functions (except `DecodeT2AddrModeImm8`) that had forward declarations around so that they are defined before their first use and not need a forward declaration.

Work on https://github.com/llvm/llvm-project/issues/156560 : Reorder ARM disassembler decode functions to eliminate forward declarations
",2025-09-04T16:18:13Z,2025-09-08T14:07:03Z,2025-09-08T14:06:59Z,2025-09-08T14:06:59Z,True,2,0,1,264,294,1
156918,closed,"[AArch64] Add freeze(avg(x,y)) test coverage for #147696",RKSimon,,2025-09-04T16:06:32Z,2025-09-05T07:59:27Z,2025-09-04T16:38:41Z,2025-09-04T16:38:41Z,True,1,0,1,76,0,1
156916,closed,[LoopVectorizer][AArch64] Add a -sve-vscale-for-tuning override option.,davemgreen,It can be useful for debugging and tuning to be able to alter the VScaleForTuning. This adds a quick option to the aarch64 subtarget for it.,2025-09-04T15:48:56Z,2025-09-09T09:50:01Z,2025-09-09T09:46:13Z,2025-09-09T09:46:13Z,True,3,4,2,10,0,2
156917,closed,[MLIR] Make the pass_thru argument of llvm masked.load intrinsic Optional instead of Variadic,joker-eph,This is meant as NFC as multiple values there was never supported anyway. Extra values would be dropped when translating to LLVM IR.,2025-09-04T16:05:15Z,2025-09-04T17:15:24Z,2025-09-04T17:15:24Z,2025-09-04T17:15:24Z,True,1,0,1,4,4,1
156929,closed,[Clang] Allow non-constant sizes for __builtin_assume_dereferenceable.,fhahn,"Update Clang's __builtin_assume_dereferenceable to support non-constant lengths. The corresponding assume bundle has been updated to support non-constant sizes in cad62df49a7.

The current docs for the builtin don't mention the constant requirement for the size argument, so don't need to be updated: https://clang.llvm.org/docs/LanguageExtensions.html#builtin-assume-dereferenceable

A number of patches landed recently to make the optimizer make better use of the dereferenceable assumptions, and once
https://github.com/llvm/llvm-project/pull/156730 lands, it can be used to vectorize  some early-exit loops, for example std::find with std::vector::iterator: https://godbolt.org/z/qo58PKG37
```
  #include <algorithm>
  #include <cstddef>
  #include <vector>

  auto find(std::vector<short>::iterator first, short s, unsigned size) {
    auto Addr = __builtin_assume_aligned(std::to_address(first),  2);
    __builtin_assume_dereferenceable(std::to_address(first), size * sizeof(short));
    return std::find(first, first + size, s);
  }
```",2025-09-04T17:00:02Z,2025-09-05T19:45:56Z,2025-09-05T14:51:55Z,2025-09-05T14:51:55Z,True,1,2,2,68,3,4
156915,closed,[ARM] Specify hasOneUse for shouldFoldConstantShiftPairToMask,AZero13,"It should be one use, just like AArch64",2025-09-04T15:45:03Z,2025-09-04T19:13:09Z,2025-09-04T19:13:05Z,,False,1,0,3,99,27,6
156910,closed,[SCEVExp] Fix early exit in ComputeEndCheck.,fhahn,"ComputeEndCheck incorrectly returned false for unsigned predicates starting at zero and a positive step.

The AddRec could still wrap if Step * trunc ExitCount wraps or trunc ExitCount strips leading 1s.

Fixes https://github.com/llvm/llvm-project/issues/156849.",2025-09-04T15:24:13Z,2025-09-05T15:17:39Z,2025-09-05T15:13:11Z,2025-09-05T15:13:11Z,True,1,0,3,71,36,6
156904,closed,[clang] Rewrite tests relying on shell environment variable features,boomanaiden154,"This patch rewrites a couple tsts that fail when running with lit's
internal shell enabled due to assumptions about setting environment
variables. There were a couple cases where there was an implict env.
Most of the cases needed unset swapped for env -u.

Toeards #102699.
",2025-09-04T15:02:46Z,2025-09-05T21:00:29Z,2025-09-04T18:17:53Z,2025-09-04T18:17:53Z,True,8,3,2,56,53,7
156897,closed,[QualGroup] Add August and September 2025 slides and unify Meeting Materials,uwendi,"This patch updates the Qualification WG documentation to:

- Add PDF slide decks for the August and September 2025 sync-up meetings
- Merge the ""Meeting Minutes"" and ""Presentation Slides"" sections into a unified ""Meeting Materials"" section
- Clarify that agendas and minutes are all published in the Discourse thread
- Temporarily link to slide files in `llvm/docs/qual-wg/slides/`
- Mention that a future patch will migrate these slide files to the `llvm-www` repository, once a suitable hosting location is confirmed with the community (e.g. per discussion with @nikic in https://github.com/llvm/llvm-project/pull/147196).
",2025-09-04T14:47:36Z,2025-09-10T05:25:48Z,2025-09-09T14:52:13Z,2025-09-09T14:52:13Z,True,4,0,3,18,19,3
156900,closed,[X86] Fix expand-fp on optnone functions,frederik-h,"As observed by @mikaelholmen, PR #130988
""[AMDGPU] Implement IR expansion for frem instruction"" introduced a regression on x86. Its changes led to the pass being skipped on functions with the optnone attribute. @bjope also noted that a check concerning the optnone handling is wrong.

This patch fixes both issues which together fixes the regression. During the review it was observed that, even before PR #130988, the pass would not run on optnone functions with the new pass manager. This is also fixed.",2025-09-04T14:52:39Z,2025-09-05T14:22:26Z,2025-09-05T14:22:22Z,2025-09-05T14:22:22Z,True,1,13,4,353,5,4
156901,closed,[Headers][X86] Allow AVX512 integer min/max mask/maskz variants intrinsics to be used in constexpr,markbhasawut,"Update the AVX512 integer min/max mask/maskz variants intrinsics to be constexpr compatible.

This is a follow-up to #156833, and the last in the 'Allow MMX/SSE/AVX2/AVX512 integer min/max intrinsics to be used in constexpr' series.

Closes #153153",2025-09-04T14:58:54Z,2025-09-06T12:25:38Z,2025-09-06T12:25:38Z,2025-09-06T12:25:37Z,True,4,0,3,449,242,8
156893,closed,[PowerPC][NFC] Update TableGen range punctuator with '...',lei137,The '-' punctuator was deprecated via: https://github.com/llvm/llvm-project/commit/196e6f9f18933ed33eee39a1c9350ccce6b18e2c,2025-09-04T14:15:07Z,2025-09-05T13:39:01Z,2025-09-04T15:25:15Z,2025-09-04T15:25:15Z,True,1,0,1,786,786,6
156895,closed,Minor post-commit review changes for #130988 (NFC),frederik-h,,2025-09-04T14:30:17Z,2025-09-09T09:56:53Z,2025-09-05T12:27:24Z,2025-09-05T12:27:24Z,True,1,3,1,2,2,1
156892,closed,[AArch64][GlobalISel] Add codegen for simd fpcvt instructions,Lukacma,"This patch adds codegen support for fcvt instructions that keep the result in 32-bit or 64-bit SIMD&FP registers in both SelectionDAG and GlobalISel. For a long time, LLVM primarily generated fpcvt instructions, which store the result in GPRs, resulting in extra moves when the value was used by NEON instructions that operate on SIMD&FP registers. Although patterns existed for generating the SIMD variants, they relied on single-element vector types (such as v1i32 or v1i64) to decide whether the SIMD variant should be selected. This was not useful, because many NEON intrinsics and other LLVM IR operations use scalar types (i32/i64) even though they expect the result to be stored in SIMD&FP registers.

This patch is part of a series that addresses this and also adds support for generating these instructions in GlobalISel. To fix this in SelectionDAG, bitcasts of the result to a floating-point type serve as a hint that the SIMD variant of the conversion should be used, rather than relying on single-element vector types. These bitcasts are not currently generated by LLVM, but the goal is to add explicit bitcasts to the inputs and outputs of NEON intrinsics operating on integers in follow-up patches.

For GlobalISel, the register bank selection algorithm is used to determine which variant to generate",2025-09-04T14:11:41Z,2025-09-09T14:24:26Z,2025-09-09T14:24:26Z,,False,3,15,4,3443,86,12
156890,closed,AMDGPU: Add agpr versions of global return atomics,arsenm,"Incremental step towards removing the special case hack
in TargetInstrInfo::getRegClass.",2025-09-04T14:04:58Z,2025-09-04T23:47:57Z,2025-09-04T23:47:51Z,2025-09-04T23:47:51Z,True,2,0,3,43784,1269,7
156884,closed,[AArch64] NFC: Rename LastPopI in emitEpilogue,sdesmalen-arm,"LastPopI suggests it is an iterator to the last stack pop instruction, which is not what it actually points to. Instead, in one instance it points to the homogenous epilogue instruction, in the other it points to the first GPR reload.",2025-09-04T13:31:26Z,2025-09-05T13:49:31Z,2025-09-05T13:49:31Z,2025-09-05T13:49:31Z,True,1,0,1,23,22,1
156878,closed,"[AArch64][SME] Use `mrs %reg, SVCR` rather than ABI routine with `+sme`",MacDue,"Calling `__arm_sme_state` does more than we need in most cases and clobbers both x0 and x1.

This also removes `(set|get)PStateSMRegUsed`, since we can directly check the virtual register instead.",2025-09-04T12:54:36Z,2025-09-05T09:19:09Z,2025-09-05T09:19:06Z,2025-09-05T09:19:06Z,True,2,0,2,57,99,13
156880,closed,X86: Stop using MachineFunction in getPointerRegClass,arsenm,"This should be a low level function used to interpret an
MCInstrDesc that only depends on the hwmode. It should not depend
on other dynamic context like the parent function. In general more
ABI properties like this should be expressed directly in the instruction
definitions, so introduce new TCRETURN pseudos to use with the special
case register classes (e.g. in a better future the callee saved registers
would always be encoded directly in a mask on the return instruction).

This will help unify X86 onto a pending replacement mechanism for
getPointerRegClass.",2025-09-04T13:01:43Z,2025-09-11T10:12:54Z,2025-09-10T14:39:52Z,2025-09-10T14:39:52Z,True,4,4,7,36,26,8
156881,closed,[AArch64][nfc] Remove llvm/test/CodeGen/AArch64/README,c-rhodes,"It was added (02650ac03632) to document SVE-related warnings in tests, but these were removed a while ago now (672f67300466).",2025-09-04T13:14:33Z,2025-09-05T08:09:05Z,2025-09-05T08:09:01Z,2025-09-05T08:09:01Z,True,1,0,1,0,11,1
156876,closed,[AVR] Refactor ADIW/SBIW/MOVW instruction descriptions (NFCI),s-barannikov,"* Remove custom decoders for these instructions
* Instead, provide decoders for DREGS/IWREGS register classes
* Change register pair encodings to simplify instruction descriptions
* Add/fix a few clarifying comments",2025-09-04T12:48:11Z,2025-09-05T12:32:57Z,2025-09-05T12:32:54Z,2025-09-05T12:32:54Z,True,1,4,4,54,60,3
156875,closed,[Analysis][NFC] Improve documentation for getMemoryOpCost,david-arm,"The operand info argument appears to refer to different things depending upon whether it's a load or a store, so I've clarified this in the documentation.",2025-09-04T12:47:16Z,2025-09-10T12:55:42Z,2025-09-10T12:38:57Z,2025-09-10T12:38:57Z,True,2,0,1,3,1,1
156874,closed,AMDGPU: Add more tests for flat/global atomicrmw with agprs,arsenm,"Add comprehensive tests for global atomics with return in
agpr / AV usage contexts.",2025-09-04T12:39:37Z,2025-09-04T23:39:01Z,2025-09-04T23:38:59Z,2025-09-04T23:38:59Z,True,4,2,2,43717,1247,5
156872,closed,[Offload] Fix CHECK string in llvm-omp-device-info test,jplehr,,2025-09-04T12:28:37Z,2025-09-04T12:30:41Z,2025-09-04T12:30:37Z,2025-09-04T12:30:37Z,True,1,0,1,2,2,1
156868,closed,[lldb] fix Python 3.9+ specific typing annotations,charles-zablit,"This patch replaces `list` with its `typing` implementation, i.e `list[str]` becomes `List[str]`.

[Type hinting generic in the standard collection were introduced in Python 3.9](https://peps.python.org/pep-0585/), however the minimum supported Python version for lldb is 3.8. This patch will unblock the [bots for Ubuntu 20.04](https://ci.swift.org/view/Swift%20rebranch/job/oss-swift-rebranch-package-ubuntu-20_04/2847/consoleText), which run on Python 3.8.",2025-09-04T12:02:12Z,2025-09-09T11:43:05Z,2025-09-05T16:25:38Z,2025-09-05T16:25:38Z,True,11,0,1,4,0,1
156867,closed,[orc-rt] Fix header list in CMakeLists.txt after 6af1247ecb9.,lhames,6af1247ecb9 renamed both C and C++ WrapperFunctionResult.h headers to WrapperFunction.h. This commit updates CMakeLists.txt to reflect that change.,2025-09-04T11:55:54Z,2025-09-04T12:04:22Z,2025-09-04T12:04:17Z,2025-09-04T12:04:17Z,True,0,0,1,2,2,1
156869,closed,[orc-rt] Fix typo in include guard comment. NFC.,lhames,,2025-09-04T12:06:08Z,2025-09-04T12:14:39Z,2025-09-04T12:14:36Z,2025-09-04T12:14:36Z,True,0,0,1,1,1,1
156873,closed,[clang-tidy] Do not crash when an empty directory is used in the comp…,carlosgalvezp,"…ilation database

Currently a hard crash encourages people to report a bug upstream, but this is not really a bug. Instead, print an error and use a reasonable default (the current working directory).

Fixes #57264",2025-09-04T12:35:01Z,2025-09-05T18:39:04Z,2025-09-05T18:38:59Z,2025-09-05T18:38:59Z,True,3,2,1,29,7,5
156862,closed,[AVR] Refactor MUL/FMUL instruction descriptions (NFC),s-barannikov,"* Split MULSU format from MULS and fix the comment
* Remove custom decoder functions for the instructions
* Add a decoder for LD8lo register class",2025-09-04T11:41:00Z,2025-09-05T11:02:07Z,2025-09-05T11:02:04Z,2025-09-05T11:02:04Z,True,0,2,3,38,46,3
156865,closed,[RISCV][GISel] Lower G_SADDE,woruyu,"### Summary
Try to implemente Lower G_SADDE in LegalizerHelper::lower",2025-09-04T11:50:39Z,2025-09-11T01:32:57Z,2025-09-11T01:32:57Z,2025-09-11T01:32:56Z,True,4,9,5,415,3,6
156860,closed,AMDGPU: Fix mis-selecting saddr flat atomics on gfx9,arsenm,"This would select the pseudo and then crash when the MC instruction
was used. I believe this has been broken since 9912ccb0b4d17",2025-09-04T11:33:35Z,2025-09-04T23:38:26Z,2025-09-04T23:38:24Z,2025-09-04T23:38:24Z,True,2,3,1,7832,76,3
156858,closed,[clang][bytecode] Print 8 bit integers as 32 bit in Function::dump(),tbaederr,"Otherwise we get the char representation in our disassembly output, which we don't want.",2025-09-04T11:15:59Z,2025-09-05T17:34:10Z,2025-09-04T12:15:05Z,2025-09-04T12:15:05Z,True,3,0,1,14,1,1
156857,closed,[NVPTX] Add sm_88 and sm_110* arch supports,rajatbajpai,"This change adds support of sm_88, sm_110, sm_110a, and sm_110f. These are added with PTX ISA version 9.0.",2025-09-04T11:13:46Z,2025-09-10T06:28:44Z,2025-09-05T08:38:49Z,2025-09-05T08:38:49Z,True,1,3,1,23,3,2
156854,closed,Fix thread handle leak on Windows,lmielick,Contrary to pthread_join on Windows WaitForSingleObject does not destroy the thread handle. Add missing CloseHandle call to avoid a handle leak.,2025-09-04T11:05:53Z,2025-09-08T12:04:55Z,2025-09-08T12:04:36Z,2025-09-08T12:04:36Z,True,9,3,2,7,8,1
156852,closed,[AVR] Remove some custom decoder functions (NFCI),s-barannikov,"The generated decoding functions look identical to the custom ones,
we only need to provide custom decoders for some operands.
",2025-09-04T10:47:01Z,2025-09-05T08:20:41Z,2025-09-05T08:18:23Z,2025-09-05T08:18:22Z,True,1,2,2,19,120,3
156848,closed,[X86] Add assembly comment for VMOVSH instructions,RKSimon,Matches existing MOVSD/S implementations,2025-09-04T10:31:57Z,2025-09-04T11:26:13Z,2025-09-04T11:02:05Z,2025-09-04T11:02:05Z,True,1,0,1,24,17,5
156847,closed,[X86] Compute the known bits for VPMADD52L/VPMADD52H in SimplifyDemandedBitsForTargetNode,XChy,Address TODO and compute the known bits with the intermediate result.,2025-09-04T10:27:06Z,2025-09-04T12:21:51Z,2025-09-04T12:21:51Z,2025-09-04T12:21:51Z,True,1,0,2,115,3,2
156844,closed,[Clang] Introduce -fsanitize=alloc-token,melver,"Introduce the `-fsanitize=alloc-token` command-line option, hooking up
the AllocToken pass -- it provides allocation tokens to compatible
runtime allocators, enabling different heap organization strategies,
e.g. hardening schemes based on heap partitioning.

The instrumentation rewrites standard allocation calls into variants
that accept an additional `uint64_t token_id` argument. For example,
calls to `malloc(size)` become `__alloc_token_malloc(size, token_id)`,
and a C++ `new MyType` expression will call `__alloc_token_Znwm(size,
token_id)`.

Currently untyped allocation calls do not yet have `!alloc_token_hint`
metadata, and therefore receive the fallback token only. This will be
fixed in subsequent changes through best-effort type-inference.

One benefit of the instrumentation approach is that it can be applied
transparently to large codebases, and scales in deployment as other
sanitizers.

Similarly to other sanitizers, instrumentation can selectively be
controlled using `__attribute__((no_sanitize(""alloc-token"")))`. Support
for sanitizer ignorelists to disable instrumentation for specific
functions or source files is implemented.

See clang/docs/AllocToken.rst for more usage instructions.

Link: https://discourse.llvm.org/t/rfc-a-framework-for-allocator-partitioning-hints/87434
",2025-09-04T09:54:53Z,2025-09-04T09:56:46Z,2025-09-04T09:55:29Z,,False,2,0,1,587,10,25
156843,closed,[AllocToken] Introduce AllocToken instrumentation pass,melver,"Introduce `AllocToken`, an instrumentation pass designed to provide
tokens to memory allocators enabling various heap organization
strategies, such as heap partitioning.

Initially, the pass instruments functions marked with a new attribute
`sanitize_alloc_token` by rewriting allocation calls to include a token
ID, appended as a function argument with the default ABI.

The design aims to provide a flexible framework for implementing
different token generation schemes. It currently supports the following
token modes:

- TypeHash (default): token IDs based on a hash of the allocated type
- Random: statically-assigned pseudo-random token IDs
- Increment: incrementing token IDs per TU

For the `TypeHash` mode introduce support for `!alloc_token_hint`
metadata: the metadata can be attached to allocation calls to provide
richer semantic information to be consumed by the AllocToken pass.
Optimization remarks can be enabled to show where no metadata was
available.

An alternative ""fast ABI"" is provided, where instead of passing the
token ID as an argument (e.g., `__alloc_token_malloc(size, id)`), the
token ID is directly encoded into the name of the called function (e.g.,
`__alloc_token_0_malloc(size)`). Where the maximum tokens is small, this
offers more efficient instrumentation by avoiding the overhead of
passing an additional argument at each allocation site.

Link: https://discourse.llvm.org/t/rfc-a-framework-for-allocator-partitioning-hints/87434 [1]
",2025-09-04T09:54:45Z,2025-09-04T09:57:00Z,2025-09-04T09:55:45Z,,False,2,0,1,969,3,27
156835,closed,[SLP][NFC] Remove unused local variable in lambda,garthlei,,2025-09-04T09:27:25Z,2025-09-11T02:28:23Z,2025-09-11T02:05:56Z,2025-09-11T02:05:56Z,True,5,0,1,0,3,1
156834,closed,[mlir][sme] Use signed comparison in ArmSMEToSCF,banach-space,"This change switches from `ult` to `slt` in the comparison generated by
`TileLoadOpWithMaskAndPadNonZeroConversion`.

From the updated test:
```
%[[ROW_IS_ACTIVE:.*]] = arith.cmpi slt, %[[TILE_SLICE_INDEX]], %[[NUM_ROWS]] : index
```

Here:
- `%[[TILE_SLICE_INDEX]]` is always non-negative.
- `%[[NUM_ROWS]]` represents the number of remaining rows.

`%[[NUM_ROWS]]` is computed as:

```mlir
    %c-4 = arith.constant -4 : index
    %c-4_vscale = arith.muli %c-4, %vscale_11 : index
    %num_rows_remaining = arith.addi %num_rows_init, %c-4_vscale : index
```

(inserted by the ""arm-sme-vector-legalization"" pass, see
`VectorLegalization.cpp`).

Because of the subtraction, `%num_rows_remaining` can be negative.
Therefore, the comparison must be signed (`slt`) rather than unsigned (`ult`).

Fixes: https://github.com/iree-org/iree/issues/21714
",2025-09-04T09:20:08Z,2025-09-08T12:51:25Z,2025-09-05T07:58:52Z,2025-09-05T07:58:52Z,True,2,0,1,2,2,2
156833,closed,[Headers][X86] Allow AVX2/AVX512 integer min/max intrinsics to be used in constexpr,markbhasawut,"Update the AVX2/AVX512 min/max integer intrinsics to be constexpr compatible.

This PR is a follow-up to #156678. The AVX512 mask/maskz variants will be addressed in the next follow-up.

Part of #153153.",2025-09-04T09:02:24Z,2025-09-04T13:52:27Z,2025-09-04T13:52:27Z,2025-09-04T13:52:27Z,True,2,0,2,158,100,8
156832,closed,[Dexter] Only increment step index if we record the step,OCHyams,"Should fix the issue raised here - https://github.com/llvm/llvm-project/pull/156481#issuecomment-3251158052 

Prior to this patch we incremented step_index every time the debugger stopped. Now that some stops are not recorded, we should only increment the step_index for those that are.

This should make the `-v` output more consistent between platforms and debuggers.",2025-09-04T08:56:17Z,2025-09-04T14:58:57Z,2025-09-04T09:17:57Z,2025-09-04T09:17:57Z,True,2,0,1,4,4,3
156831,closed,[DAG][ARM] canCreateUndefOrPoisonForTargetNode - ARMISD VORRIMM\VBICIMM nodes can't create poison/undef,woruyu,"### Summary
This PR resolves https://github.com/llvm/llvm-project/issues/156640",2025-09-04T08:53:33Z,2025-09-05T08:40:03Z,2025-09-05T08:40:03Z,2025-09-05T08:40:03Z,True,1,6,2,35,0,3
156819,closed,[X86] make the set/r/4 intrinsics macros into functions,SadiinsoSnowfall,"Change the definitions of `_mm_setr_ph`,  `_mm256_setr_ph` and  `_mm512_setr_ph` to be functions instead of macros. 
Resolves #156709

Pending questions :
- [x] Should the `_mm_setr_ph` and `_mm256_setr_ph` functions be marked as `__DEFAULT_FN_A TTRS128_CONSTEXPR` and `__DEFAULT_FN_ATTRS256_CONSTEXPR` respectively ? I marked `_mm512_setr_ph`  as `__DEFAULT_FN_ATTRS512_CONSTEXPR` because this attribute list is also applied to `_mm512_set_ph`. This is not the case for `_mm_set_ph` and `_mm256_set_ph`.
- [x] What about the other `setr` intrinsics such as `_mm512_setr_ps`, `_mm512_setr_pd`, `_mm512_setr_epi64`, etc... Should they be made into real functions too ? If so, should it be done in this PR ?",2025-09-04T07:38:00Z,2025-09-04T13:38:00Z,2025-09-04T13:37:36Z,2025-09-04T13:37:36Z,True,5,0,2,64,32,3
156824,closed,[libc++][C++03] cherry-pick #125423,philnik777,,2025-09-04T08:25:40Z,2025-09-05T12:45:59Z,2025-09-05T12:45:59Z,2025-09-05T12:45:58Z,True,1,0,1,15,13,4
156818,closed,[MLIR][Python] Add optional `results` parameter for building op with inferable result types,PragmaTwice,"Currently in MLIR python bindings, operations with inferable result types (e.g. with `InferTypeOpInterface` or `SameOperandsAndResultType`) will generate such builder functions:

```python
def my_op(arg1, arg2 .. argN, *, loc=None, ip=None):
  ... # result types will be inferred automatically
```

However, in some cases we may want to provide the result types explicitly. For example, the implementation of interface method `inferResultTypes(..)` can return a failure and then we cannot build the op in that way. Also, in the C++ side we have multiple `build` methods for both explicitly specify the result types and automatically inferring them.

In this PR, we change the signature of this builder function to:

```python
def my_op(arg1, arg2 .. argN, *, results=None, loc=None, ip=None):
  ... # result types will be inferred automatically if results is None
```

If the `results` is not provided, it will be inferred automatically, otherwise the provided result types will be utilized. Also, `__init__` methods of the generated op classes are changed correspondingly. Note that for operations without inferable result types, the signature remain unchanged, i.e. `def my_op(res1 .. resN, arg1 .. argN, *, loc=None, ip=None)`.

---

Previously I have considered an approach like `my_op(arg, *, res1=None, res2=None, loc=None, ip=None)`, but I quickly realized it had some issues. For example, if the user only provides some of the arguments—say `my_op(v1, res1=i32)`—this could lead to problems. Moreover, we don’t seem to have a mechanism for inferring only part of result types. A unified `results` parameter seems to be more simple and straightforward.",2025-09-04T07:23:33Z,2025-09-05T00:57:39Z,2025-09-05T00:57:39Z,2025-09-05T00:57:39Z,True,6,7,4,76,56,4
156817,closed,X86: Use LiveRegUnits in findDeadCallerSavedReg,arsenm,"My goal here was to eliminate the use of getGPRsForTailCall.
I don't think it makes sense to use here, considering this function
handles other non-tail call cases. It seems to have been used to
find a non-callee saved register in a roundabout way. We can be more
precise by letting LiveRegUnits figure out the CSR set for the current
function.

There are a few things I find confusing about this function; the API
isn't right. The callers ideally would be maintaining LiveRegUnits
in the context where they need the free register. It also doesn't
provide a RegisterClass to use. Also, this should work for any
block and this shouldn't need to special case this set of return
opcodes. I'm also not sure why there is a special case for RIP. It was introduced in 
fe5e5dcab0c09ca4567611ba680c7a603bf6b89d but doesn't appear to
be tested.

There are a few codegen test changes. One of them I think is a correct
improvement since the old code didn't consider undef uses as available.
The others I think are just to allocation order changes, since we're now
using the broader GPR_*NOSP classes.",2025-09-04T07:15:25Z,2025-09-09T03:52:01Z,2025-09-09T03:51:59Z,2025-09-09T03:51:59Z,True,3,5,2,21,27,5
156815,closed,release/21.x: [clang][docs] Fix implicit-int-conversion-on-negation typos,correctmost,"References to `-Wimplicit-int-comparison-on-negation` should be `-Wimplicit-int-conversion-on-negation` instead.

See: https://github.com/llvm/llvm-project/pull/139429/files#r2124372667",2025-09-04T06:42:34Z,2025-09-08T09:36:15Z,2025-09-08T07:39:07Z,2025-09-08T07:39:07Z,True,6,0,1,2,2,1
156812,closed,[Support] Make shouldReverseIterate constexpr,kazutakahirata,"This patch makes shouldReverseIterate constexpr, allowing compile-time
evaluation at call sites.
",2025-09-04T06:27:17Z,2025-09-04T18:08:28Z,2025-09-04T18:08:08Z,2025-09-04T18:08:07Z,True,4,0,2,1,2,1
156814,closed,[llvm] Proofread CodeGenerator.rst,kazutakahirata,,2025-09-04T06:28:59Z,2025-09-04T14:46:28Z,2025-09-04T14:46:28Z,2025-09-04T14:46:28Z,True,0,0,1,22,22,1
156810,closed,[ADT] Simplify DenseMapInfo<std::tuple<...>> with constexpr if (NFC),kazutakahirata,"This patch consolidates two implementations of getHashValueImpl into
one with ""constexpr if"", which should be more readable than the
SFINAE-based approach.

The same applies to isEqualImpl.
",2025-09-04T06:26:00Z,2025-09-04T16:18:06Z,2025-09-04T14:46:04Z,2025-09-04T14:46:04Z,True,1,3,1,20,26,1
156813,closed,[Utils] Remove an unnecessary cast (NFC),kazutakahirata,"getZExtValue() already return uint64_t.
",2025-09-04T06:27:37Z,2025-09-04T16:18:24Z,2025-09-04T14:46:20Z,2025-09-04T14:46:20Z,True,1,0,1,2,2,1
156811,closed,[ADT] Simplify EnumeratedArray::operator[] (NFC),kazutakahirata,"This patch simplifies EnumeratedArray::operator[] with the
injected-class-name.
",2025-09-04T06:26:41Z,2025-09-04T16:18:14Z,2025-09-04T14:46:12Z,2025-09-04T14:46:12Z,True,1,0,1,1,2,1
156808,closed,[AMX] Fix LIT test with adjustsStack attribute for expensive checks build.,karthik-senthil,The generated MIR fails machine verifier as stack pointer is being modified without appropriate attributes in frameInfo. This PR fixes this issue by adding adjustsStack=true attribute. Fixes the post commit regression identified in #155673.,2025-09-04T06:15:12Z,2025-09-04T06:56:02Z,2025-09-04T06:46:08Z,2025-09-04T06:46:07Z,True,2,0,1,2,1,1
156807,closed,[MLIR][NVVM] Add definition for nvvm dialect,grypp,,2025-09-04T06:04:24Z,2025-09-05T16:23:01Z,2025-09-05T16:23:00Z,2025-09-05T16:23:00Z,True,1,13,4,46,2,1
156803,closed,[lldb-dap] Add command line option `--connection-timeout`,royitaqi,"# Usage

This is an optional new command line option to use with `--connection`.

```
--connection-timeout <timeout>    When using --connection, the number of seconds to
        wait for new connections after the server has started and after all clients
        have disconnected. Each new connection will reset the timeout. When the
        timeout is reached, the server will be closed and the process will exit.
        Not specifying this argument or specifying non-positive values will cause
        the server to wait for new connections indefinitely.
```

A corresponding extension setting `Connection Timeout` is added to the `lldb-dap` VS Code extension.

# Benefits

Automatic release of resources when lldb-dap is no longer being used (e.g. release memory used by module cache).

# Test

Added 3 API tests.
```
$ ninja lldb-api-test-deps
$ bin/llvm-lit -a ../llvm-project/lldb/test/API/tools/lldb-dap/server/TestDAP_server.py
...
Ran 6 tests in 24.928s
...
Total Discovered Tests: 1
  Passed: 1 (100.00%)
```

Before adding the tests, there were already 3 tests and they took 11.7s to run.
```
Ran 3 tests in 11.703s
```
",2025-09-04T05:33:39Z,2025-09-10T18:51:33Z,2025-09-10T15:21:13Z,2025-09-10T15:21:12Z,True,11,20,8,188,13,8
156802,closed,[AArch64] Don't run loop-idiom-vectorize pass in the O0 pipeline,MaskRay,"As noted in #156787
",2025-09-04T04:49:45Z,2025-09-06T07:56:35Z,2025-09-06T07:12:36Z,2025-09-06T07:12:36Z,True,5,8,4,13,1,3
156800,closed,[NFC][IntrinsicEmitter] Include source location with enum definition,jurahul,"Include the source location of the intrinsic record definition in a comment next to the enum definition for that intrinsic. This will help quickly locate the definition of a given intrinsic when it's not obvious from a simple search (for example, intrinsics defined by stitching components of names).",2025-09-04T04:43:06Z,2025-09-04T12:57:37Z,2025-09-04T12:57:37Z,2025-09-04T12:57:37Z,True,2,0,1,5,2,1
156797,closed,[orc-rt] Fix WrapperFunctionResultTest comments. NFC.,lhames,,2025-09-04T04:26:36Z,2025-09-04T04:35:44Z,2025-09-04T04:35:36Z,2025-09-04T04:35:36Z,True,0,0,1,2,2,1
156799,closed,[orc-rt] Rename WrapperFunctionBuffer and headers.,lhames,"Renames WrapperFunctionResult to WrapperFunctionBuffer. This reflects intended usage as a buffer for both arguments and results.

The WrapperFunctionResult.h headers are renamed to WrapperFunction.h as they will be extended with further wrapper-function related APIs in an upcoming patch.",2025-09-04T04:39:40Z,2025-09-04T04:45:59Z,2025-09-04T04:45:55Z,2025-09-04T04:45:55Z,True,0,0,1,228,230,6
156798,closed,[RISCV] Don't run loop-idiom-vectorize pass in the O0 pipeline.,topperc,As noted in [156787](https://github.com/llvm/llvm-project/issues/156787),2025-09-04T04:36:05Z,2025-09-04T16:36:50Z,2025-09-04T16:23:14Z,2025-09-04T16:23:14Z,True,3,0,1,2,1,1
156796,closed,[AMDGPU][Legalizer] Avoid pack/unpack for G_FSHR,gandhi56,Scalarize G_FSHR only if the subtarget does not support V2S16 type.,2025-09-04T04:24:01Z,2025-09-04T23:15:11Z,2025-09-04T23:12:58Z,2025-09-04T23:12:58Z,True,4,4,2,576,1156,3
156795,closed,[orc-rt] Fix memory leak in WrapperFunctionResult.,lhames,"Previously `Tmp` could have been left owning a heap-allocated buffer and would not have freed it on destruction (since Tmp was a C orc_rt_WrapperFunctionResult).

This patch removes Tmp and simply resets R before swapping it with Other.R.",2025-09-04T04:11:33Z,2025-09-04T04:15:46Z,2025-09-04T04:15:43Z,2025-09-04T04:15:43Z,True,0,0,1,3,4,1
156794,closed,[Headers][X86] Group related AVX512VL FMA intrinsics together (NFC),ckoparkar,Follow-up of #156385.,2025-09-04T03:47:27Z,2025-09-04T13:26:23Z,2025-09-04T13:17:05Z,2025-09-04T13:17:05Z,True,1,0,1,361,361,2
156788,closed,[CoroSplit] AllocaUseVisitor visits insertvalue/insertelement,NewSigma,Pointers to allocas might be escaped by users of `insertvalue/insertelement`. `AllocaUseVisitor` should visit these instructions so that CoroSplit can successfully determine which allocas should live on the frame.,2025-09-04T02:15:34Z,2025-09-11T03:28:32Z,2025-09-11T03:28:21Z,2025-09-11T03:28:21Z,True,3,0,2,72,0,2
156789,closed,[NFC][libclc] Set MACRO_ARCH to ${ARCH} uncondionally before customizing,wenju-he,"Our downstream libclc add a few more targets that customizes build_flags and opt_flags. Then in each customization block, MACRO_ARCH is defined to be ${ARCH}.
Hoisting MACRO_ARCH definition out of if-else-end block avoids code duplication. This also avoids potential error when MACRO_ARCH definition is forgotten, e.g. in https://github.com/intel/llvm/pull/19971.",2025-09-04T02:51:27Z,2025-09-04T23:35:44Z,2025-09-04T23:35:41Z,2025-09-04T23:35:41Z,True,0,0,1,1,1,1
156784,closed,build: make sanitizer builds use optimized tablegen,mizvekov,Honor LLVM_OPTIMIZED_TABLEGEN  when LLVM_USE_SANITIZER is used.,2025-09-04T01:35:27Z,2025-09-04T19:54:52Z,2025-09-04T19:54:51Z,2025-09-04T19:54:51Z,True,1,1,1,2,1,1
156785,closed,[libc++][test] Get rid of warning on macOS about undefined macro,frederick-vs-ja,"`TEST_CLANG_VER` is not defined for Apple Clang, so it's better to detect whether the macro is defined to get rid of warnings due to `-Wundef`. This also corresponds to the guard in `<mutex>`.",2025-09-04T01:42:19Z,2025-09-04T07:08:54Z,2025-09-04T07:00:32Z,2025-09-04T07:00:31Z,True,1,0,1,1,1,1
156783,closed,[memprof] Add RecordSerializationRoundTripVersion4HotColdSchema,kazutakahirata,"I'm planning to remove the V2 support.  Now, HotColdSchema is one
feature that's tested in V2 but not in V4.

This patch derives:

  RecordSerializationRoundTripVersion4HotColdSchema

from:

  RecordSerializationRoundTripVersion2HotColdSchema

and then adds DummyMap, a V4-speicifc item.
",2025-09-04T01:24:38Z,2025-09-05T03:11:55Z,2025-09-05T02:58:42Z,2025-09-05T02:58:42Z,True,2,0,1,69,0,1
156780,closed,[flang] Move AddAliasTags pass after BoxedProcedurePass.,vzakhari,"Move AddAliasTags after BoxedProcedurePass to be able to compute
the size of Fortran variables by converting their types to LLVM
types and applying DL size/alignment computations.
This is one of the approaches to unblock #156558.

This change does not affect performance in my testing.
",2025-09-04T00:17:43Z,2025-09-04T18:00:14Z,2025-09-04T17:30:17Z,2025-09-04T17:30:16Z,True,2,0,1,5,5,3
156779,closed,[VectorCombine] fix division by zero in foldSelectShuffle,davidberard98,"In https://github.com/pytorch/pytorch/issues/161371, we see that MaxElementsInVector can be 0, causing a division by zero in `AddShuffleMaskAdjustedCost`.

This will set MaxElementsInVector to 1 to avoid division by zero.",2025-09-04T00:15:45Z,2025-09-08T16:55:38Z,2025-09-08T16:55:37Z,,False,2,6,1,23,1,2
156778,closed,[libclc] Override generic symbol using llvm-link --override flag instead of using weak linkage,wenju-he,"Before this PR, weak linkage is applied to a few CLC generic functions to allow target specific implementation to override generic one. However, adding weak linkage has a side effect of preventing inter-procedural optimization, such as PostOrderFunctionAttrsPass, because weak function doesn't have exact definition (as determined by hasExactDefinition in the pass).

This PR resolves the issue by adding --override flag for every non-generic bitcode file in llvm-link run. This approach eliminates the need for weak linkage while still allowing target-specific implementation to override generic one.
llvm-diff shows imporoved attribute deduction for some functions in amdgcn--amdhsa.bc, e.g.
  %23 = tail call half @llvm.sqrt.f16(half %22)
=>
  %23 = tail call noundef half @llvm.sqrt.f16(half %22)",2025-09-04T00:11:46Z,2025-09-05T11:58:13Z,2025-09-05T11:58:07Z,2025-09-05T11:58:07Z,True,2,0,3,23,12,4
156777,closed,"Revert ""[lldb] Add count for errors of DWO files in statistics and combine DWO file count functions""",dmpots,"Reverts llvm/llvm-project#155023

The PR tests passed, but it failed in the CI. Reverting to give time to investigate.",2025-09-04T00:02:38Z,2025-09-04T00:20:19Z,2025-09-04T00:20:16Z,2025-09-04T00:20:16Z,True,1,0,1,27,177,8
156776,closed,[libc][NFC] disable localtime on aarch64/baremetal,michaelrj-google,"The fuchsia builder was broken by https://github.com/llvm/llvm-project/pull/110363
This patch disables localtime for aarch64 baremetal, which is the
failing target.

Context: https://lab.llvm.org/buildbot/#/builders/11/builds/23186
",2025-09-03T23:51:13Z,2025-09-03T23:53:18Z,2025-09-03T23:53:12Z,2025-09-03T23:53:12Z,True,2,0,1,3,2,1
156774,closed,[lldb] Correct style of error messages,JDevlieghere,"The LLVM Style Guide says the following about error and warning messages [1]:

> [T]o match error message styles commonly produced by other tools,
> start the first sentence with a lowercase letter, and finish the last
> sentence without a period, if it would end in one otherwise.

I often provide this feedback during code review, but we still have a bunch of places where we have inconsistent error message, which bothers me as a user. This PR identifies a handful of those places and updates the messages to be consistent.

[1] https://llvm.org/docs/CodingStandards.html#error-and-warning-messages",2025-09-03T23:48:55Z,2025-09-04T23:37:44Z,2025-09-04T23:37:41Z,2025-09-04T23:37:41Z,True,4,2,1,84,84,27
156771,closed,[lldb] Reland: Add Pythonic API to SBStructuredData extension,kastiglione,"* Adds `dynamic` property to automatically convert `SBStructuredData`
instances to the associated Python type (`str`, `int`, `float`, `bool`,
`NoneType`, etc)
* Implements `__getitem__` for Pythonic array and dictionary
subscripting
  * Subscripting return the result of the `dynamic` property
* Updates `__iter__` to support dictionary instances (supporting `for`
loops)
* Adds `__str__`, `__int__`, and `__float__`

With these changes, these two expressions are equal:

```py
data[""name""] == data.GetValueForKey(""name"").GetStringValue(1024)
```

**Note**: Unlike the original commit (#155061), this re-commit removes the `__bool__` implementation, which broke crashlog. Somewhere in the crashlog execution, it depends on `__bool__` meaning only `IsValid()`.

Additionally did some cleanup in TestStructuredDataAPI.py.
",2025-09-03T23:19:28Z,2025-09-04T15:34:38Z,2025-09-04T15:34:35Z,2025-09-04T15:34:35Z,True,1,0,1,186,30,2
156770,closed,[CIR] Finish record layout for classes with virtual bases,andykaylor,There was a small piece left unimplemented for classes with a primary virtual base. This adds that implementation.,2025-09-03T23:16:47Z,2025-09-04T19:41:58Z,2025-09-04T19:41:53Z,2025-09-04T19:41:53Z,True,1,0,1,26,2,2
156768,closed,[MLIR][XeVM] Add lowering for llvm load store ops with XeVM cache control,silee2,Add lowering support for LLVM load / store ops with XeVM cache control attributes.,2025-09-03T22:39:37Z,2025-09-09T16:12:17Z,2025-09-09T16:12:17Z,2025-09-09T16:12:17Z,True,2,7,7,235,116,5
156769,closed,"[RISCV] Fold (X & (7 << 29)) == 0 -> (srliw X, 29) == 0 for RV64.",topperc,"This is similar to the recently added (X & -4096) == 0 -> (X >> 12) == 0,
but operating only on the lower 32 bits.
    
This also removes the (X & (1 << 31)) == 0 -> (xor (srliw X, 31), 1)
isel pattern. seqz and xori 1 should have similar cost and encoding
size.",2025-09-03T22:47:15Z,2025-09-04T05:16:08Z,2025-09-04T05:16:06Z,2025-09-04T05:16:06Z,True,1,12,3,56,12,4
156772,closed,[clang] fix error recovery for invalid nested name specifiers,mizvekov,"This fixes a regression which was introduced in #147835.

Since this regression was never released, there are no release notes.

Fixes #156458",2025-09-03T23:27:25Z,2025-09-04T02:46:28Z,2025-09-04T00:27:31Z,2025-09-04T00:27:31Z,True,1,0,1,80,55,5
156764,closed,release/21.x: [lldb][DWARFASTParserClang] Don't complete conflicting Objective-C++ types (#156681),llvmbot,"Backport a862225813c251c28b085603b7d32d4b111dbc57

Requested by: @Michael137",2025-09-03T22:04:04Z,2025-09-08T07:39:16Z,2025-09-08T07:38:46Z,2025-09-08T07:38:46Z,True,6,0,1,82,0,2
156765,closed,[AMDGPU] Define 1024 VGPRs on gfx1250,rampitec,"This is a baseline support, it is not useable yet.",2025-09-03T22:22:34Z,2025-09-04T00:20:49Z,2025-09-03T23:25:18Z,2025-09-03T23:25:18Z,True,5,0,1,671,505,33
156763,closed,[Clang-Tidy] Add google-runtime-float Clang-Tidy check,brenfwd,Add a new checker to clang-tidy for use of the `long double` type [per Google style guide](https://google.github.io/styleguide/cppguide.html#Floating-Point_Types).,2025-09-03T22:02:25Z,2025-09-09T21:52:58Z,2025-09-09T20:55:04Z,2025-09-09T20:55:04Z,True,7,33,11,172,0,8
156761,closed,"Revert ""[MLIR][XeGPU] Scattered ops sg-to-wi distribution""",thurstond,"Reverts llvm/llvm-project#154949 due to suspected buildbot breakage (https://lab.llvm.org/buildbot/#/builders/55/builds/16630/steps/11/logs/stdio). Previously commented on the original pull request: https://github.com/llvm/llvm-project/pull/154949#issuecomment-3250709417

```
******************** TEST 'MLIR :: Dialect/XeGPU/subgroup-distribute.mlir' FAILED ********************
...
# | PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
# | Stack dump:
# | 0.	Program arguments: /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm_build_hwasan/bin/mlir-opt -xegpu-subgroup-distribute -allow-unregistered-dialect -canonicalize -cse -split-input-file /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/mlir/test/Dialect/XeGPU/subgroup-distribute.mlir
# |  #0 0x0000c0af4b066df0 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/llvm/lib/Support/Unix/Signals.inc:834:13
# |  #1 0x0000c0af4b060e20 llvm::sys::RunSignalHandlers() /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/llvm/lib/Support/Signals.cpp:105:18
# |  #2 0x0000c0af4b0691b4 SignalHandler(int, siginfo_t*, void*) /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/llvm/lib/Support/Unix/Signals.inc:426:38
# |  #3 0x0000ee25a3dcb8f8 (linux-vdso.so.1+0x8f8)
# |  #4 0x0000ee25a36c7608 (/lib/aarch64-linux-gnu/libc.so.6+0x87608)
# |  #5 0x0000ee25a367cb3c raise (/lib/aarch64-linux-gnu/libc.so.6+0x3cb3c)
# |  #6 0x0000ee25a3667e00 abort (/lib/aarch64-linux-gnu/libc.so.6+0x27e00)
# |  #7 0x0000c0af4ae7e4b0 __sanitizer::Atexit(void (*)()) /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp:168:10
# |  #8 0x0000c0af4ae7c354 __sanitizer::Die() /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_termination.cpp:52:5
# |  #9 0x0000c0af4ae66a30 Unlock /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/hwasan/../sanitizer_common/sanitizer_mutex.h:250:16
# | #10 0x0000c0af4ae66a30 ~GenericScopedLock /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/hwasan/../sanitizer_common/sanitizer_mutex.h:386:51
# | #11 0x0000c0af4ae66a30 __hwasan::ScopedReport::~ScopedReport() /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/hwasan/hwasan_report.cpp:54:5
# | #12 0x0000c0af4ae661b8 __hwasan::(anonymous namespace)::BaseReport::~BaseReport() /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/hwasan/hwasan_report.cpp:477:7
# | #13 0x0000c0af4ae63f5c __hwasan::ReportTagMismatch(__sanitizer::StackTrace*, unsigned long, unsigned long, bool, bool, unsigned long*) /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/hwasan/hwasan_report.cpp:1094:1
# | #14 0x0000c0af4ae4f8e0 Destroy /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/hwasan/../sanitizer_common/sanitizer_common.h:532:31
# | #15 0x0000c0af4ae4f8e0 ~InternalMmapVector /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/hwasan/../sanitizer_common/sanitizer_common.h:642:56
# | #16 0x0000c0af4ae4f8e0 __hwasan::HandleTagMismatch(__hwasan::AccessInfo, unsigned long, unsigned long, void*, unsigned long*) /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/hwasan/hwasan.cpp:245:1
# | #17 0x0000c0af4ae51e8c __hwasan_tag_mismatch4 /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/hwasan/hwasan.cpp:764:1
# | #18 0x0000c0af4ae67b30 __interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long) /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/compiler-rt/lib/interception/interception_linux.cpp:60:0
# | #19 0x0000c0af5641cd24 getNumResults /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/mlir/include/mlir/IR/Operation.h:404:37
# | #20 0x0000c0af5641cd24 getOpResultImpl /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/mlir/include/mlir/IR/Operation.h:1010:5
# | #21 0x0000c0af5641cd24 getResult /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/mlir/include/mlir/IR/Operation.h:407:54
# | #22 0x0000c0af5641cd24 mlir::OpTrait::detail::MultiResultTraitBase<mlir::gpu::WarpExecuteOnLane0Op, mlir::OpTrait::VariadicResults>::getResult(unsigned int) /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/mlir/include/mlir/IR/OpDefinition.h:638:62
# | #23 0x0000c0af56426b60 getType /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/mlir/include/mlir/IR/Value.h:63:33
# | #24 0x0000c0af56426b60 getType /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/mlir/include/mlir/IR/Value.h:105:39
# | #25 0x0000c0af56426b60 (anonymous namespace)::LoadDistribution::matchAndRewrite(mlir::gpu::WarpExecuteOnLane0Op, mlir::PatternRewriter&) const /home/b/sanitizer-aarch64-linux-bootstrap-hwasan/build/llvm-project/mlir/lib/Dialect/XeGPU/Transforms/XeGPUSubgroupDistribute.cpp:991:55
...
```",2025-09-03T21:35:31Z,2025-09-03T21:40:20Z,2025-09-03T21:40:18Z,2025-09-03T21:40:18Z,True,1,0,1,24,315,4
156759,closed,[NFC][MC][DecoderEmitter] Refactor code related to EncodingField,jurahul,"- Add comment to document various EncodingField members.
- Add comment in `addOneOperandFields` to give an example of the generated encoding fields.
- Rename `Bits` argument for `addOneOperandFields` to `InstBits` to clarify that it represents the instruction bits as opposed to operand bits
- Cleanup the loop to form encoding fields in `addOneOperandFields`.
- Change `OperandInfo` to vend out an `ArrayRef<EncodingField>` via a new `fields` member instead of start/end.
- Use structured binding in the loop over fields in `emitBinaryParser`.",2025-09-03T21:27:21Z,2025-09-04T12:59:39Z,2025-09-04T12:59:39Z,2025-09-04T12:59:39Z,True,1,2,1,39,19,1
156758,closed,[LAA] Support assumptions with non-constant deref sizes.,fhahn,"Update evaluatePtrAddrecAtMaxBTCWillNotWrap to support non-constant sizes in dereferenceable assumptions.

Apply loop-guards in a few places needed to reason about expressions involving trip counts of the from (BTC - 1).",2025-09-03T21:26:58Z,2025-09-04T10:32:37Z,2025-09-04T10:32:34Z,2025-09-04T10:32:34Z,True,1,0,1,56,25,3
156754,closed,[Sema][Parse][HLSL] Implement front-end rootsignature validations,inbelic,"This pr implements the following validations:

1. Check that descriptor tables don't mix Sample and non-Sampler resources
2. Ensure that descriptor ranges don't append onto an unbounded range
3. Ensure that descriptor ranges don't overflow
4. Adds a missing validation to ensure that only a single `RootFlags` parameter is provided

Resolves: https://github.com/llvm/llvm-project/issues/153868.",2025-09-03T21:02:51Z,2025-09-09T17:15:34Z,2025-09-09T17:15:34Z,2025-09-09T17:15:33Z,True,1,3,9,187,15,9
156757,closed,[CIR] Add support for delegating constructor initialization,andykaylor,"This adds support for zero-initialization during delegating constructor processing.

Note, this also adds code to skip emitting constructors that are trivial and default to match the classic codegen behavior. The incubator does not skip these constructors, but I have found a case where this results in a call to a default constructor that is never defined.",2025-09-03T21:26:54Z,2025-09-04T21:00:34Z,2025-09-04T21:00:31Z,2025-09-04T21:00:31Z,True,4,0,1,96,29,5
156751,closed,[Sparc] Remove extra ASRRegs operand in SMAC/UMAC instructions,s-barannikov,"The `$asr18` operand is not decoded/encoded/printed, and ASR18 is already in the `Uses` list.
Extracted from #156358, where the extra operand causes DecoderEmitter to emit an error about an operand with a missing encoding.",2025-09-03T20:23:17Z,2025-09-04T08:06:27Z,2025-09-04T08:06:23Z,2025-09-04T08:06:23Z,True,1,0,1,4,4,1
156752,closed,[MLIR] Apply clang-tidy fixes for readability-container-size-empty in XeGPUOps.cpp (NFC),joker-eph,,2025-09-03T20:30:07Z,2025-09-03T20:30:39Z,2025-09-03T20:30:10Z,2025-09-03T20:30:10Z,True,2,0,1,1,1,1
156750,closed,[HLSL] Fix OpaqueValueExpr handling in InitListExpr,s-perron,"The OpaqueValueVisitor was not correctly traversing the AST to find all
OpaqueValueExprs. This resulted in some expressions not being correctly
initialized. This change fixes the visitor to correctly traverse the AST.

Fixes https://github.com/llvm/llvm-project/issues/156786
",2025-09-03T20:14:04Z,2025-09-09T14:39:30Z,2025-09-09T14:39:30Z,2025-09-09T14:39:30Z,True,3,0,4,18,5,2
156749,closed,[NFC] Apply clang-format to PPCInstrFutureMMA.td,lei137,,2025-09-03T20:12:12Z,2025-09-04T14:19:03Z,2025-09-03T22:25:00Z,2025-09-03T22:25:00Z,True,1,6,1,296,294,1
156748,closed,[MLIR] Apply clang-tidy fixes for readability-identifier-naming in Serializer.cpp (NFC),joker-eph,,2025-09-03T20:07:24Z,2025-09-03T20:24:50Z,2025-09-03T20:08:39Z,,False,2,0,1,4,4,1
156746,closed,[NFC][flang] Updated tests with -force-no-alias options.,vzakhari,"This is a follow up on #155949. I removed -force-no-alias
options from the tests and updated the checks.
",2025-09-03T20:02:57Z,2025-09-04T16:32:03Z,2025-09-04T16:32:03Z,2025-09-04T16:32:03Z,True,1,0,1,29,29,9
156743,closed,[MLIR] Apply clang-tidy fixes for readability-simplify-boolean-expr in Specialize.cpp (NFC),joker-eph,,2025-09-03T19:52:43Z,2025-09-03T19:53:15Z,2025-09-03T19:52:46Z,2025-09-03T19:52:46Z,True,2,0,1,3,5,1
156742,closed,lit] Update internal shell lexer to remove escape on '$' only for double-quoted strings.,cmtice,PR 156125 removed the escape (backslash) in front of '$' for all quoted strings. It has since been pointed out this should only happen for double-quoted strings. This PR fixes that.,2025-09-03T19:51:51Z,2025-09-03T21:50:04Z,2025-09-03T21:31:05Z,2025-09-03T21:31:05Z,True,1,0,1,3,1,2
156740,closed,[Xtensa] Fix lowering FP compare operations.,andreisfr,"Implement lowering of the SETONE/SETOGT/SETOGE/SETUGT/SETUGE operations. This fixes f32 ""copysign"" and ""ueq"" tests.

This PR fixes https://github.com/llvm/llvm-project/issues/149666#event-18712363149",2025-09-03T19:48:24Z,2025-09-08T18:15:19Z,2025-09-08T17:42:52Z,2025-09-08T17:42:52Z,True,4,0,2,34,15,2
156739,closed,[MLIR] Apply clang-tidy fixes for readability-simplify-boolean-expr in Specialize.cpp (NFC),joker-eph,,2025-09-03T19:46:40Z,2025-09-03T19:52:51Z,2025-09-03T19:46:42Z,2025-09-03T19:46:42Z,True,2,0,1,3,5,1
156738,closed,[MLIR] Apply clang-tidy fixes for readability-simplify-boolean-expr in Specialize.cpp (NFC),joker-eph,,2025-09-03T19:45:14Z,2025-09-03T19:52:51Z,2025-09-03T19:45:17Z,2025-09-03T19:45:17Z,True,1,0,1,3,5,1
156745,closed,[OpenACC] Fix crash because of miscalculated dependence.,erichkeane,"We were causing ANY dependence to cause the return type of the array section to be dependent, when in reality it should only be so if one of its Bounds/Base are dependent. This patch fixes that.",2025-09-03T20:01:14Z,2025-09-03T20:27:41Z,2025-09-03T20:27:40Z,2025-09-03T20:27:40Z,True,1,0,1,35,32,17
156737,closed,[libc++] Make it possible to mark a gen-test as UNSUPPORTED,ldionne,"Previously, only the tests that are generated by  the gen-test could be marked as UNSUPPORTED. After this patch, the gen-test itself can be marked as UNSUPPORTED, which makes it possible to add RUN lines that would be an error when unsupported to the gen-test itself.",2025-09-03T19:35:13Z,2025-09-04T15:26:04Z,2025-09-04T15:26:00Z,2025-09-04T15:26:00Z,True,3,0,3,97,103,10
156735,closed,"Revert ""[llvm-exegesis] Exclude loads/stores from aliasing instruction set""",sjoerdmeijer,"Reverts llvm/llvm-project#156300

Need to look at the X86 test failures. ",2025-09-03T19:01:05Z,2025-09-03T19:43:03Z,2025-09-03T19:43:02Z,2025-09-03T19:43:02Z,True,1,0,1,0,10,2
156736,closed,[LLDB][NativePDB] Find global variables in namespaces,Nerixyz,"To find global variables, `SymbolFileNativePDB` used to search the globals stream for the name passed to `FindGlobalVariables`. However, the symbols in the globals stream contain the fully qualified name and `FindGlobalVariables` only gets the basename. The approach here is similar to the one for types and functions.

As we already search the globals stream for functions, we can cache the basenames for global variables there as well.

This makes the `expressions.test` from the DIA PDB plugin pass with the native one (#114906).",2025-09-03T19:16:57Z,2025-09-04T17:30:34Z,2025-09-04T17:30:34Z,2025-09-04T17:30:34Z,True,1,1,2,81,30,3
156734,closed,[LLVM][MC][DecoderEmitter] Fail fatally if `Insn` and decoder table bitwidths mismatch,jurahul,"When decoders are specialized per-bitwidth:
- Encode the bit width of a decoder table as a ULEB128 encoded entry at the start of each decoder table.
- Add a fatal error in `decodeInstruction` if the bit width for `InsnType` does not match the bit width encoded in the decoder table.
",2025-09-03T18:57:51Z,2025-09-04T12:59:13Z,2025-09-04T12:59:13Z,2025-09-04T12:59:13Z,True,1,11,4,44,7,2
156733,closed,[libc] Fix buildbot failures,krishna2803,,2025-09-03T18:56:07Z,2025-09-03T19:10:02Z,2025-09-03T19:09:54Z,2025-09-03T19:09:54Z,True,2,0,1,3,1,1
156731,closed,[MLIR][XeGPU] Add support for vector.multi_reduction in wg to sg pass,nbpatel,This PR adds pattern for lowering vector.multi_reduction from workgroup to subgroup IR. It currently only supports 2D vector. ,2025-09-03T18:55:28Z,2025-09-08T21:00:20Z,2025-09-08T21:00:20Z,,False,0,0,5,239,4,2
156730,closed,"[SCEV] Fold (C * A /u C) -> A, if A is a multiple of C and C a pow-of-2.",fhahn,Alive2 Proof: https://alive2.llvm.org/ce/z/JoHJE9,2025-09-03T18:53:00Z,2025-09-05T19:06:05Z,2025-09-05T08:45:14Z,2025-09-05T08:45:14Z,True,6,3,3,297,256,10
156729,closed,[LLDB] Make internal shell the default for running LLDB lit tests.,cmtice,"This patch updates the lld lit test config to use the internal shell by default. This has some performance advantages (~10-15%) and also produces nicer failure output. It also updates the two LLDB tests to not require shell (so that they run under the internal shell), after first verifying that they run and pass using the internal shell; and it fixes one test that was not passing under the internal shell.",2025-09-03T18:41:34Z,2025-09-04T18:14:42Z,2025-09-03T23:34:29Z,2025-09-03T23:34:29Z,True,11,4,3,12,6,4
156725,closed,[lldb] Reimplement __str__ in SBStructuredDataExtensions.i,kastiglione,"Follow up to #155061 and #156721.

After discussing with @medismailben, the ideal course of to have a `__str__`, however, instead of throwing an exception, the fallback behavior calls `__repr__` (`GetDescription`).

The main value of this is that `str(string_data)` will produce the string itself, not a quoted string as returned by `__repr__`/`GetDescription`.
",2025-09-03T18:24:29Z,2025-09-03T19:15:53Z,2025-09-03T19:15:49Z,,False,1,0,1,27,2,2
156728,closed,"Revert ""[lldb] Add Pythonic API to SBStructuredData extension (#155061)""",kastiglione,Reverts #155061 (and #156721) which caused Crashlog shell tests to break.,2025-09-03T18:37:18Z,2025-09-03T19:15:24Z,2025-09-03T19:15:21Z,2025-09-03T19:15:21Z,True,1,0,1,30,207,2
156726,closed,[MLIR][NVVM] [NFC] Add summary and description fields for several OPs,smada3,"Several operations in the NVVM dialect were missing summaries and descriptions. This PR
adds summaries and descriptions for the following operations:

1. nvvm.bar.warp.sync
2. nvvm.barrier
3. nvvm.barrier0
4. nvvm.mbarrier.arrive
5. nvvm.mbarrier.arrive.expect_tx
6. nvvm.mbarrier.arrive.expect_tx.shared
7. nvvm.mbarrier.arrive.nocomplete
8. nvvm.mbarrier.arrive.nocomplete.shared
9. nvvm.mbarrier.arrive.shared
10. nvvm.mbarrier.init
11. nvvm.mbarrier.init.shared
12. nvvm.mbarrier.inval
13. nvvm.mbarrier.inval.shared
14. nvvm.mbarrier.test.wait
15. nvvm.mbarrier.test.wait.shared
16. nvvm.mbarrier.try_wait.parity
17. nvvm.mbarrier.try_wait.parity.shared

Documentation available here: [mbarrier](https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-mbarrier), [barrier](https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#parallel-synchronization-and-communication-instructions-mbarrier)
",2025-09-03T18:27:24Z,2025-09-05T18:33:03Z,2025-09-05T18:32:41Z,2025-09-05T18:32:41Z,True,8,36,10,326,9,1
156722,closed,[Headers][X86] Allow AVX512F mullox intrinsics to be used in constexpr,markbhasawut,"This PR adds constexpr support for the following AVX512F mullox intrinsics:

  - _mm512_mullox_epi64
  - _mm512_mask_mullox_epi64

Closes #156632
Fixes #155411",2025-09-03T17:42:28Z,2025-09-04T07:13:33Z,2025-09-03T21:37:34Z,2025-09-03T21:37:33Z,True,2,0,1,5,3,2
156721,closed,[lldb] Revert custom __str__ in SBStructuredDataExtensions.i,kastiglione,"`__str__` was implemented in #155061, however its behavior was limited to only a some kinds of `SBStructuredData`. That was a breaking change, and this change removes that implementation of `__str__`, relying on the existing behavior which calls `GetDescription`.",2025-09-03T17:37:19Z,2025-09-03T19:16:06Z,2025-09-03T17:51:09Z,2025-09-03T17:51:09Z,True,2,0,1,3,20,2
156719,closed,[RISCV] Correct getOperandLog2EEW for VCOMPRESS_VM.,topperc,,2025-09-03T17:15:10Z,2025-09-04T05:14:45Z,2025-09-04T05:14:42Z,2025-09-04T05:14:42Z,True,1,1,3,30,3,2
156718,closed,[AArch64] Improve lowering for scalable masked interleaving stores,david-arm,"Similar to #154338, this PR aims to support lowering of certain IR
to SVE's st2 and st4 instructions. The typical IR scenario looks
like:

  %mask = .. @llvm.vector.interleave2(<vscale x 16 x i1> %m, <vscale x 16 x i1> %m)
  %val = .. @llvm.vector.interleave2(<vscale x 16 x i8> %v1, <vscale x 16 x i8> %v2)
  .. @llvm.masked.store.nxv32i8.p0(<vscale x 32 x i8> %val, ..., <vscale x 32 x i1> %mask)

where we're interleaving both the value and the mask being passed
to the wide store. When the mask interleave parts are identical
we can lower this to st2b.

This PR adds a DAG combine for lowering this kind of IR pattern
to st2X and st4X SVE instructions.",2025-09-03T17:14:40Z,2025-09-08T09:34:53Z,2025-09-08T09:34:53Z,2025-09-08T09:34:53Z,True,2,12,4,857,36,4
156716,closed,[OpenACC] Change lowering signature for 'destroy',erichkeane,"Patch #156545 is introducing a different syntax for the 'destroy' section of a recipe, which takes the 'original' value as the first argument, and the one-to-be-destroyed as the 2nd.  This patch corrects the lowering to match that signature.",2025-09-03T17:03:47Z,2025-09-03T18:06:10Z,2025-09-03T17:53:37Z,2025-09-03T17:53:37Z,True,3,0,1,128,124,14
156712,closed,[lldb] Moving MCPTransport into its own file.,ashgti,Moving `lldb_protocol::mcp::MCPTransport` into its own file and renaming to `lldb_protocol::mcp::Transport`.,2025-09-03T16:34:48Z,2025-09-04T15:52:34Z,2025-09-04T15:52:34Z,2025-09-04T15:52:34Z,True,1,0,2,96,48,8
156714,closed,[X86] Recognise VPMADD52L pattern with AVX512IFMA/AVXIFMA (#153787),Arghnews,"Match `(X * Y) + Z` in `combineAdd`. If target supports and we don't overflow (ie. we know the top 12 bits are unset), rewrite using VPMADD52L

Have deliberately not put tests into existing `combine-vpmadd52.ll` as the flags make it a pain

Have just done the `L` version for now at least, wanted to get feedback before continuing

@RKSimon",2025-09-03T16:44:07Z,2025-09-10T08:28:59Z,2025-09-10T08:28:59Z,2025-09-10T08:28:59Z,True,8,30,10,628,0,2
156711,closed,Fix `python/ir/auto_location.py` test on Windows,anmyachev,"Initially found in: https://github.com/llvm/llvm-project/pull/151246#discussion_r2318830512

To fix:
```txt
******************** TEST 'MLIR :: python/ir/auto_location.py' FAILED ********************
Exit Code: 1

Command Output (stdout):
--
# RUN: at line 1
""C:/hostedtoolcache/windows/Python/3.11.9/x64/python3.exe"" D:\a\triton\triton\llvm-project\mlir\test\python\ir\auto_location.py | d:\a\triton\triton\llvm-project\build\bin\filecheck.exe D:\a\triton\triton\llvm-project\mlir\test\python\ir\auto_location.py
# executed command: C:/hostedtoolcache/windows/Python/3.11.9/x64/python3.exe 'D:\a\triton\triton\llvm-project\mlir\test\python\ir\auto_location.py'
# executed command: 'd:\a\triton\triton\llvm-project\build\bin\filecheck.exe' 'D:\a\triton\triton\llvm-project\mlir\test\python\ir\auto_location.py'
# .---command stderr------------
# | D:\a\triton\triton\llvm-project\mlir\test\python\ir\auto_location.py:37:11: error: CHECK: expected string not found in input
# |  # CHECK: loc(callsite(""testInferLocations""(""{{.*}}[[SEP:[/\\]]]test[[SEP]]python[[SEP]]ir[[SEP]]auto_location.py"":31:13 to :43) at callsite(""run""(""{{.*}}[[SEP]]test[[SEP]]python[[SEP]]ir[[SEP]]auto_location.py"":13:4 to :7) at ""<module>""(""{{.*}}[[SEP]]test[[SEP]]python[[SEP]]ir[[SEP]]auto_location.py"":26:1 to :4))))
# |           ^
# | <stdin>:2:25: note: scanning from here
# | TEST: testInferLocations
# |                         ^
# | 
# | Input file: <stdin>
# | Check file: D:\a\triton\triton\llvm-project\mlir\test\python\ir\auto_location.py
# | 
# | -dump-input=help explains the following input dump.
# | 
# | Input was:
# | <<<<<<
# |           1:  
# |           2: TEST: testInferLocations 
# | check:37                             X error: no match found
# |           3: loc(callsite(""testInferLocations""(""D:\\a\\triton\\triton\\llvm-project\\mlir\\test\\python\\ir\\auto_location.py"":31:13 to :43) at callsite(""run""(""D:\\a\\triton\\triton\\llvm-project\\mlir\\test\\python\\ir\\auto_location.py"":13:4 to :7) at ""<module>""(""D:\\a\\triton\\triton\\llvm-project\\mlir\\test\\python\\ir\\auto_location.py"":26:1 to :4)))) 
# | check:37     
```

@makslevental ",2025-09-03T16:28:09Z,2025-09-03T17:37:45Z,2025-09-03T17:34:31Z,2025-09-03T17:34:31Z,True,4,0,1,1,1,1
156708,closed,[OpenMP] Fix: Add missing preprocessor guard for hwloc types on macOS ,ghost,"Fix #156679
The issue stems from the __kmp_is_hwloc_membind_supported function in openmp/runtime/src/kmp_alloc.cpp. The function uses a type from the hwloc library (hwloc_membind_policy_t), but it was only guarded by #if KMP_USE_HWLOC. On macOS, KMP_AFFINITY_SUPPORTED is not defined, so the necessary header file (hwloc.h) isn't included, leading to an unknown type error.

The fix is to update the preprocessor guard to #if KMP_USE_HWLOC && KMP_AFFINITY_SUPPORTED, ensuring the function is only compiled when the hwloc type is available. ",2025-09-03T16:21:01Z,2025-09-04T11:22:44Z,2025-09-03T21:34:53Z,,False,8,1,2,2,1,1
156710,closed,[DAGCombine] Propagate nuw when evaluating sub with narrower types,dtcxzyw,"Proof: https://alive2.llvm.org/ce/z/cdbzSL
Closes https://github.com/llvm/llvm-project/issues/156559.
",2025-09-03T16:27:29Z,2025-09-04T02:26:35Z,2025-09-04T02:17:46Z,2025-09-04T02:17:46Z,True,2,3,3,213,1,2
156707,closed,[DOC][GlobalIsel] Add description for G_FREEZE,sunshaoce,Description based on https://llvm.org/docs/LangRef.html#id333,2025-09-03T16:18:15Z,2025-09-04T15:51:56Z,2025-09-04T15:51:53Z,2025-09-04T15:51:53Z,True,1,0,1,9,0,1
156706,closed,[bazel][mlir] Port #156374: ptr_add shaped operands support,rupprecht,,2025-09-03T16:17:54Z,2025-09-03T16:22:12Z,2025-09-03T16:22:11Z,2025-09-03T16:22:11Z,True,0,0,1,2,0,1
156705,closed,[libc] fixed signed char issues in strsep()/strtok()/strtok_r().,enh-google,"Also add the missing tests for all the related functions (even the ones that were already right), and add the missing bazel build rules.",2025-09-03T16:16:39Z,2025-09-03T18:00:38Z,2025-09-03T18:00:38Z,2025-09-03T18:00:38Z,True,1,0,1,68,7,9
156703,closed,[OpenMP] Add tests for mapping of chained 'containing' structs,jtb20,"This PR adds several new tests for mapping of chained structures, i.e. those resembling:

```
  #pragma omp target map(tofrom: a->b->c)
```

These are currently XFAILed, although the first two tests actually work with unified memory -- I'm not sure if it's possible to easily improve the condition on the XFAILs in question to make them more accurate.

These cases are all fixed by the WIP PR https://github.com/llvm/llvm-project/pull/153683.",2025-09-03T15:52:03Z,2025-09-08T09:30:13Z,2025-09-08T09:30:05Z,2025-09-08T09:30:05Z,True,1,7,1,351,0,3
156702,closed,"[flang][OpenMP] Rename variable `block` to `body`, NFC",kparzysz,"`block` is a global variable that represents the Block parser, so avoid using local variables with the same name.",2025-09-03T15:48:36Z,2025-09-04T12:55:29Z,2025-09-04T12:55:24Z,2025-09-04T12:55:24Z,True,1,0,1,3,3,1
156701,closed,"[flang][OpenMP] Simplify LooselyStructuredBlockParser, NFC",kparzysz,"Part of the logic in this parser was dealing with a list of executable constructs that begins with BLOCK. Since after 6b92a3bc21cdc we're doing it via a lookahead, this handling can be simplified.",2025-09-03T15:41:51Z,2025-09-04T12:56:02Z,2025-09-04T12:55:57Z,2025-09-04T12:55:57Z,True,1,0,1,4,15,1
156697,closed,[bazel] Port #153661: LifetimeSafetyTest dep,rupprecht,,2025-09-03T15:31:20Z,2025-09-03T15:35:23Z,2025-09-03T15:35:22Z,2025-09-03T15:35:22Z,True,0,0,1,1,0,1
156696,closed,AMDGPU: Remove the DS special case in getRegClass,arsenm,"These instructions should now have proper representation
with separate instructions for operands which must be paired.",2025-09-03T15:30:38Z,2025-09-04T06:14:20Z,2025-09-04T06:14:17Z,2025-09-04T06:14:17Z,True,2,0,3,725,376,4
156695,closed,AMDGPU: Define agpr versions of ds permute instructions,arsenm,"Correctly model these without AV_* operands. This is another
step towards removing the special casing in
TargetInstrInfo::getRegClass. Also add some tests for this.",2025-09-03T15:30:36Z,2025-09-04T06:14:01Z,2025-09-04T06:13:59Z,2025-09-04T06:13:59Z,True,2,2,2,717,363,3
156693,closed,[flang][OpenMP] Parse ORDERED as standalone when DEPEND/DOACROSS is p…,kparzysz,"…resent

The OpenMP spec 4.5-5.1 defines ORDERED as standalone when a DEPEND clause is present (with either SOURCE or SINK as argument). The OpenMP spec 5.2+ defines ORDERED as standalone when a DOACROSS clause is present.",2025-09-03T15:24:41Z,2025-09-04T13:30:28Z,2025-09-04T13:30:24Z,2025-09-04T13:30:23Z,True,1,3,1,36,38,6
156691,closed,[bazel][libc] Update MPFR to v4.2.2,bbarenblat,"Use MPFR v4.2.2 rather than MPFR v4.1.1 for Bazel/Clang builds to avoid conflicts with glibc’s `__float128` fallback typedef. See https://gitlab.inria.fr/mpfr/mpfr/-/commit/c37c9d599b9aced92e182507bf223440bbc9a9f1 for further details.

Fixes https://github.com/llvm/llvm-project/issues/147879",2025-09-03T15:21:51Z,2025-09-03T15:34:56Z,2025-09-03T15:34:56Z,2025-09-03T15:34:55Z,True,1,0,1,3,3,1
156688,closed,[ConstraintElim] Bail out on non-canonical GEPs,dtcxzyw,"In most cases, GEPs should be canonicalized by InstCombine. Bail out on non-canonical forms for simplicity.
Fixes https://github.com/llvm/llvm-project/pull/155253#issuecomment-3248457478.

If we really need to handle non-canonical forms, see https://alive2.llvm.org/ce/z/RTwsFT.
",2025-09-03T15:10:17Z,2025-09-04T07:41:26Z,2025-09-03T15:42:53Z,2025-09-03T15:42:53Z,True,2,0,1,24,2,2
156690,closed,[NFC][MC][ARM] Reorder decoder functions 4/N,jurahul,"- Move the #include for ARMGenDisassemblerTables.inc to after the definitions of all the decode functions. 
- Move `checkDecodedInstruction` to just before the `ARMDisassembler` member function definitions (which use it).
- Drop all forward declarations of the static decode functions that can be dropped without further reordering.

Work on https://github.com/llvm/llvm-project/issues/156560 : Reorder ARM disassembler decode functions to eliminate forward declarations",2025-09-03T15:19:08Z,2025-09-04T12:58:04Z,2025-09-04T12:58:04Z,2025-09-04T12:58:04Z,True,4,0,2,39,528,1
156689,closed,[bazel][mlir] Port #156355: translations to LLVMIR for ptr ops,rupprecht,,2025-09-03T15:16:48Z,2025-09-03T15:20:03Z,2025-09-03T15:20:01Z,2025-09-03T15:20:01Z,True,0,0,1,2,0,1
156687,closed,[DataLayout] Specialize the getTypeAllocSize() implementation,nikic,"getTypeAllocSize() currently works by taking the type store size and aligning it to the ABI alignment. However, this ends up doing redundant work in various cases, for example arrays will unnecessarily repeat the alignment step, and structs will fetch the StructLayout multiple times.

As this code is rather hot (it is called every time we need to calculate GEP offsets for example), specialize the implementation. This repeats a small amount of logic from getAlignment(), but I think that's worthwhile.

Compile-time: https://llvm-compile-time-tracker.com/compare.php?from=38b376f1927df5c1dea1065041779b28b13b9dd9&to=848ed4571d91d1c6b2d2e484a28a0fe2b67e7995&stat=instructions%3Au",2025-09-03T15:05:01Z,2025-09-04T07:27:35Z,2025-09-04T07:27:34Z,2025-09-04T07:27:33Z,True,2,1,1,39,7,3
156684,closed,[X86] Allow rotate to be affected by modulo shift,AZero13,"The rotate uses the bottom 5 bits, so we can apply the same modulo we have here too.",2025-09-03T14:43:04Z,2025-09-03T22:21:55Z,2025-09-03T22:21:52Z,,False,4,0,2,723,0,3
156683,closed,[llvm-readobj][ELF] Prints hex format values in lower-case mode,kaadam,"Previously, llvm-readelf dumped hex format values in different ways. Some of them were printed in upper-case, while the others were in lower-case format. This change switches the format to lower-case in all cases.

Why is this useful? As an example, FileCheck comparisons are case-sensitive by default. This change means it's easier to compare those values, because they have the same format.",2025-09-03T14:39:56Z,2025-09-05T13:11:38Z,2025-09-05T13:11:14Z,2025-09-05T13:11:14Z,True,5,4,6,37,34,8
156682,closed,[analyzer] Consolidate the va_list checkers,NagyDonat,"Previously the analyzer had an undocumented top-level checker group called `valist` which offered several checkers to detect use of uninitialized `va_list` objects and leaks of `va_list`s.

As the responsibilities of these checkers were messily intertwined and `va_list` is a rarely used language feature, this commit simplifies the situation by consolidating these checkers into a single checker which will be called `security.VAList`.

Note that I'm choosing the capitalization `VAList` to be consistent with the example of the AST node type `VAArgExpr`. I updated many variable names to ensure that `ValistChecker.cpp` uses this spelling everywhere (in CamelCased names). I'm planning to rename `ValistChecker.cpp` to `VAListChecker.cpp` in a follow-up commit.

This commit also adds documentation for this checker in checkers.rst.

Among the test files I preserved the existing separation but I eliminated some duplicated cases now that there is no way to separately enable the old sub-checkers.

For the background of this change see also the discourse thread https://discourse.llvm.org/t/clean-up-valist-checkers/85277/3",2025-09-03T14:38:20Z,2025-09-08T11:16:24Z,2025-09-08T11:16:24Z,2025-09-08T11:16:24Z,True,2,4,4,96,194,7
156681,closed,[lldb][DWARFASTParserClang] Don't complete conflicting Objective-C++ types,Michael137,"This upstreams https://github.com/swiftlang/llvm-project/pull/10313.

If we detect a situation where a forward declaration is C++ and the definition DIE is Objective-C, then just don't try to complete the type (it would crash otherwise). In the long term we might want to add support for completing such types.

We've seen real world crashes when debugging WebKit and wxWidgets because of this. Both projects forward declare ObjC++ decls in the way shown in the test.

rdar://145959981",2025-09-03T14:32:24Z,2025-09-03T22:04:14Z,2025-09-03T19:04:53Z,2025-09-03T19:04:53Z,True,6,0,1,82,0,2
156678,closed,[Headers][X86] Allow MMX/SSE integer min/max intrinsics to be used in constexpr,markbhasawut,"Update the MMX/SSE integer min/max intrinsics to be constexpr compatible.

This is a part of #153153.",2025-09-03T14:13:20Z,2025-09-03T18:16:12Z,2025-09-03T17:46:55Z,2025-09-03T17:46:55Z,True,5,0,2,61,30,7
156677,closed,[NFC][TableGen][analyzer] Fix some obsolete comments,NagyDonat,"ClangSACheckersEmitter.cpp had some comments that described the structure of its output, which would have been helpful, but became out of sync with the code. This commit updates them to ensure they are consistent with `CheckerRegistry.cpp`.",2025-09-03T14:11:19Z,2025-09-04T11:15:38Z,2025-09-04T11:15:38Z,2025-09-04T11:15:38Z,True,1,0,1,32,17,1
156676,closed,[VPlan] Let Not preserve uniformity in isSingleScalar,artagnon,"LogicalAnd and WidePtrAdd should also preserve uniformity, but we don't have test coverage to enable adding them.",2025-09-03T14:08:39Z,2025-09-04T10:27:21Z,2025-09-04T10:27:14Z,2025-09-04T10:27:14Z,True,2,0,1,5,38,2
156675,closed,[Offload] Run unit tests as a part of check-offload,jhuber6,"Summary:
Add a dependnecy on the unit tests on the main check-offload test suite.
This matches what the other projects do, pass `llvm-lit` to the
directory to only run the lit tests, use the `check-offload-unit` for
only the unit tests.
",2025-09-03T14:02:15Z,2025-09-10T08:47:51Z,2025-09-03T15:26:44Z,2025-09-03T15:26:44Z,True,13,0,1,1,1,1
156672,closed,[libc++][C++03] cherry-pick #128054,philnik777,,2025-09-03T13:55:02Z,2025-09-05T12:45:45Z,2025-09-05T12:45:45Z,2025-09-05T12:45:45Z,True,1,0,1,3,4,2
156669,closed,[clang][bytecode] Reject final ltor casts on string literals,tbaederr,Similar to what the current interpreter does.,2025-09-03T13:29:46Z,2025-09-05T05:14:13Z,2025-09-04T12:08:05Z,2025-09-04T12:08:05Z,True,3,0,1,21,2,2
156666,closed,[clang][bytecode] Remove superfluous check for complex types,tbaederr,`!E->getType()->isAnyComplexType()` is implied by `!canClassify()`.,2025-09-03T13:19:38Z,2025-09-04T05:40:49Z,2025-09-04T05:40:48Z,2025-09-04T05:40:48Z,True,1,0,1,1,2,1
156668,closed,[analyzer] Canonicalize the Decls of FieldRegions,balazs-benics-sonarsource,"When calculating the offset of a FieldRegion, we need to find out which field index the given field refers to.
Previously, if for some reason the field was not found, then the `Idx` passed to `Layout.getFieldOffset` was out of bounds and caused undefined behavior when dereferenced an out of bounds element in `ASTVector::FieldOffsets::operator[]`, which asserts this in debug builds, but exposes the undefined behavior in release builds.

In this patch, I refactored how we enumerate the fields, and gracefully handle the scenario where the field is not found.
That case is still bad, but at least it should not expose the undefined behavior in release builds, and should assert earlier in debug builds than before.

The motivational case was transformed into a regression test, that would fail if no canonicalization would happen when creating a FieldRegion. This was reduced from a production crash.
In the test case, due to how modules work, there would be multiple copies of the same template specialization in the AST. This could lead into inconsistent state when the FieldRegion's Decl was different to the RecordDecl's field - because one referred to the first and the other to the second. This made `calculateOffset` fail to compute the field index, triggering the undefined behavior in production.

While this inconsistency gets fixed now, I think the assertion is still warranted to avoid potential undefined behavior in release builds.

CPP-6691,CPP-6849",2025-09-03T13:24:37Z,2025-09-04T06:31:02Z,2025-09-04T06:20:00Z,2025-09-04T06:20:00Z,True,2,4,3,55,13,3
156664,closed,"release/21.x: [DebugInfo] When referencing structured bindings use the reference's location, not the binding's declaration's location (#153637)",llvmbot,"Backport 665e875f1a86be650e044bb20744bb272d03e11d

Requested by: @Michael137",2025-09-03T13:09:27Z,2025-09-11T06:01:36Z,2025-09-08T07:38:07Z,2025-09-08T07:38:07Z,True,7,0,1,69,16,4
156662,closed,[mlir][IR] Fix enum attribute handling by using parseKeywordOrString instead of parseKeyword,fabianmcg,"Change enum attribute parsing to handle special characters and multi-word
identifiers. This allows enum attrs to use symbols like ""+"" and strings
with separators like ""dash-separated-sentence"" instead of being limited to
valid identifiers. 

This also aligns enum attribute parsing with how enums are already handled
by the `FieldParser`:
https://github.com/llvm/llvm-project/blob/main/mlir/tools/mlir-tblgen/EnumsGen.cpp#L108",2025-09-03T13:02:29Z,2025-09-03T13:35:30Z,2025-09-03T13:23:42Z,2025-09-03T13:23:42Z,True,0,0,1,29,9,5
156663,closed,[X86] Only fold AND/ANDNP back to VSELECT if we know the predicated mask select is legal,RKSimon,"By only checking type legality we didn't account for 128/256-bit ops being run on non-AVX512VL targets, or vXi8/i16 ops being run on non-AVX512BW targets

This check is cropping up in several places now and I intend to hoist it out into a common helper, but this initial fix needs to be as clean as possible to be back ported to 21.X

Fixes #156256",2025-09-03T13:03:27Z,2025-09-03T14:01:19Z,2025-09-03T14:01:13Z,2025-09-03T14:01:12Z,True,0,0,1,29,0,2
156661,closed,[flang][lowering] fix vector subscripts in character elemental procedures,jeanPerier,"Fixes https://github.com/llvm/llvm-project/issues/145151

Character elemental procedures require evaluating the result specification expression outside of the elemental loops when the function result length is not a constant. This is needed so that the array result storage can be allocated before the evaluation if a storage is needed.

Because the result specification expression may depend on inquires about the dummy argument (but not usages of values thanks to F2023 C15121), some representation of the dummy must be created. Since this is an elemental call, this requires providing an element, and not the whole array actual argument (we only care about the properties of such element it does not matter which element is being used).

The previous code was creating the element with a type cast from the base array, but this did not work with vector subscripted arrays where the lowering representation is more complex. This caused a compiler assert to fire.

Switch the code to only copy the properties that can be inquired from the actual argument to the mock dummy (length parameters, dynamic type and presence). A mock one address is used instead of addressing the actual argument before the loop (one is used instead of NULL so that presence inquiry will work as expected for OPTIONAL arguments).

Also use mapCallInterfaceSymbolsForResult to map symbols so that module and common block variables are handled.",2025-09-03T13:01:43Z,2025-09-08T10:11:53Z,2025-09-08T10:07:37Z,2025-09-08T10:07:37Z,True,3,2,4,470,53,6
156658,closed,[clang][bytecode] Create implicit variables for wider base types,tbaederr,"If we create an implicit local variable for a derived-to-base cast, we still should allocate enough space for the entire derived type.

Fixes #156219",2025-09-03T12:49:27Z,2025-09-04T13:38:14Z,2025-09-04T13:38:14Z,2025-09-04T13:38:14Z,True,1,0,1,38,14,2
156657,closed,[DataLayout] Remove i1 alignment entry,nikic,"I don't think we need to explicitly specify i1 alignment, as this is going to fall back to i8 alignment.

This may change behavior if a data layout explicitly sets i8 alignment without also setting i1 layout, but I'd expect this to be a bug fix in that case.",2025-09-03T12:45:02Z,2025-09-08T07:51:18Z,2025-09-08T07:51:17Z,2025-09-08T07:51:17Z,True,5,0,2,0,2,2
156655,closed,AMDGPU: Fix definitions of DS ret atomics with AGPRs,arsenm,"These are 2-data operations that need to use all-AGPR or all-VGPR
inputs. Stop defining them with AVLdSt data operands, and add _agpr
variants.",2025-09-03T12:36:18Z,2025-09-04T05:45:19Z,2025-09-04T05:45:18Z,2025-09-04T05:45:18Z,True,2,0,1,352,345,2
156654,closed,[libc][math][c++23] Add sqrtbf16 math function,krishna2803,This PR adds sqrtbf16 higher math function for BFloat16 type along with the tests.,2025-09-03T12:27:49Z,2025-09-06T09:16:11Z,2025-09-06T09:06:03Z,2025-09-06T09:06:03Z,True,1,0,6,252,108,22
156653,closed,"[AMDGPU] Use ""v_bfi_b32 x, y, -1"" to implement (y | ~x)",jayfoad,,2025-09-03T12:22:48Z,2025-09-03T19:04:10Z,2025-09-03T19:04:03Z,2025-09-03T19:04:02Z,True,0,0,1,47,60,8
156645,closed,[clang][bytecode] Reject null pointers in CheckStore(),tbaederr,"In the attached test case, the global variable later only points to gargbage, because the MaterializeTemporaryExpr used to initialize it is a local variable, which is gone by the time we try to evaluate the store.

Fixes #156223",2025-09-03T10:57:21Z,2025-09-04T13:19:26Z,2025-09-04T13:19:26Z,2025-09-04T13:19:26Z,True,0,0,1,6,1,2
156647,closed,[SelectionDAG][ARM] Propagate fast math flags in visitBRCOND,paperchalice,Factor out from #151275.,2025-09-03T11:30:15Z,2025-09-06T12:44:26Z,2025-09-06T12:44:26Z,2025-09-06T12:44:25Z,True,2,1,4,14,11,3
156644,closed,AMDGPU: Remove dead code for printing DFP immediates,arsenm,"Nothing in the backend uses these, so there's no reason
to support printing them.",2025-09-03T10:50:29Z,2025-09-03T16:03:24Z,2025-09-03T12:19:35Z,2025-09-03T12:19:35Z,True,2,2,2,1,17,1
156642,closed,[lldb][ExpressionParser][NFC] Clean up expression language picking logic,Michael137,This patch moves the `frame_lang` logic to just the logging (because that's what it was always used for anyway). The callsites decide whether to fall back on to the frame language or not when running the expression.,2025-09-03T10:32:43Z,2025-09-03T14:52:04Z,2025-09-03T14:52:01Z,2025-09-03T14:52:01Z,True,1,0,1,9,13,1
156641,closed,AMDGPU: Avoid directly using MCOperandInfo RegClass field,arsenm,"This value should not be directly interpreted. Also avoids
a function only used for an assert.",2025-09-03T10:24:34Z,2025-09-03T10:50:09Z,2025-09-03T10:50:08Z,2025-09-03T10:50:08Z,True,1,0,1,2,12,1
156639,closed,[RISCV] Handle non uimm5 VL constants in isVLKnownLE,lukel97,"If a VL operand is > 31 then it will be materialized into an ADDI $x0, imm. We can reason about it by peeking at the virtual register definition which allows RISCVVectorPeephole and RISCVVLOptimizer to catch more cases.

There's a separate issue with RISCVVLOptimizer where the materialized immediate may not always dominate the instruction we want to reduce the VL of, but this is left to another patch.",2025-09-03T10:22:54Z,2025-09-05T00:59:23Z,2025-09-05T00:25:49Z,2025-09-05T00:25:49Z,True,2,9,6,87,66,15
156637,closed,[SPIRV] Move instead of copy.,maarquitos14,,2025-09-03T10:14:26Z,2025-09-08T12:29:30Z,2025-09-08T12:29:30Z,2025-09-08T12:29:30Z,True,0,0,1,2,2,2
156638,closed,[AArch64][SME] Resume streaming-mode on entry to exception handlers,MacDue,"This patch adds a new `TargetLowering` hook `lowerEHPadEntry()` that is called at the start of lowering EH pads in SelectionDAG. This allows the insertion of target-specific actions on entry to exception handlers.

This is used on AArch64 to insert SME streaming-mode switches at landing pads. This is needed as exception handlers are always entered with PSTATE.SM off, and the function needs to resume the streaming mode of the function body.",2025-09-03T10:21:39Z,2025-09-04T11:55:16Z,2025-09-04T11:55:12Z,2025-09-04T11:55:12Z,True,2,3,4,250,1,5
156631,closed,[AArch64] Add computeKnownBits unit test coverage for AArch64ISD::VASHR/VLSHR/VSHL,RKSimon,Base tests so we can add additional FREEZE tests on top in #156445,2025-09-03T09:37:36Z,2025-09-03T16:03:10Z,2025-09-03T13:02:53Z,2025-09-03T13:02:53Z,True,1,0,2,60,0,1
156636,closed,"[AMDGPU] Use ""v_bfi_b32 x, 0, z"" to implement (z & ~x)",jayfoad,,2025-09-03T10:14:17Z,2025-09-03T16:03:35Z,2025-09-03T11:00:04Z,2025-09-03T11:00:03Z,True,1,3,2,1274,1456,10
156630,closed,[AMDGPU] Remove most uses of /dev/null in tests,jayfoad,"Using options like -filetype=null instead should allow tools to save
some work by not generating any output.
",2025-09-03T09:16:11Z,2025-09-03T15:39:35Z,2025-09-03T15:39:30Z,2025-09-03T15:39:30Z,True,0,0,1,158,158,106
156627,closed,[Offload] Run tests 16-way parallel on AMDGPU,jplehr,Reduce the number of paralell tests run to align with the typical number of VMIDs provided by the kernel driver.,2025-09-03T09:04:23Z,2025-09-05T20:23:23Z,2025-09-05T20:23:20Z,2025-09-05T20:23:20Z,True,0,0,1,1,1,1
156626,closed,[Offload][OpenMP] Enable more tests on AMDGPU,jplehr,(Re)enables a couple of tests that were disabled on AMDGPU for some reason. Pass for me locally.,2025-09-03T08:57:23Z,2025-09-03T12:04:44Z,2025-09-03T12:04:39Z,2025-09-03T12:04:39Z,True,1,2,3,41,4,2
156624,closed,[MLIR][LLVM][Flang] Move the element param of DICompositeType to the end,Dinistro,"This commit moves the ""element"" param of `DICompositeType` to the end of the parameter list. This is required as there seems to be a bug in the attribute parser that breaks a print + parse roundtrip.

Related ticket: https://github.com/llvm/llvm-project/issues/156623",2025-09-03T08:50:36Z,2025-09-03T15:25:29Z,2025-09-03T15:25:27Z,2025-09-03T15:25:27Z,True,0,0,1,46,40,11
156621,closed,[AMDGPU] Fix source location for assembler warnings,jayfoad,"Call MCInst::setLoc earlier so it is available for warnings generated
during MatchInstructionImpl.
",2025-09-03T08:48:49Z,2025-09-04T09:43:53Z,2025-09-04T09:43:47Z,2025-09-04T09:43:47Z,True,0,0,1,6,1,2
156620,closed,[clang][www] Documentation revision and proof read for features.html,lknknm,"This is mostly just a small proof read for the https://clang.llvm.org/features.html documentation page. 
The changes include some typo fixes and suggestions I've found would be useful.
If needed, I can also proof read other sections of the documentation and pack everything into a ""bigger"" PR to do everything in one go.",2025-09-03T08:43:23Z,2025-09-03T16:03:30Z,2025-09-03T13:26:29Z,2025-09-03T13:26:29Z,True,8,4,12,8,8,1
156618,closed,[RISCV] Use vleff's AVL when output VL doesn't dominate in RISCVVLOptimizer,lukel97,"If an instruction's demanded VL is a virtual register defined by a vleff instruction, it might not dominate and fail to have its VL reduced.

In leiu of the output VL, we can try and use the AVL passed to the vleff itself since it will be at least greater than or equal the original VL.

I tried to create an LLVM IR test for this in but didn't have any luck because the scheduler kept on moving the instruction past the vleff, so it always dominated. So I've just included some mir tests instead.",2025-09-03T08:39:06Z,2025-09-04T04:09:08Z,2025-09-04T03:56:29Z,2025-09-04T03:56:29Z,True,5,5,3,67,1,2
156617,closed,[CodeGen] Remove ExpandInlineAsm hook,nikic,"This hook replaces inline asm with LLVM intrinsics. It was intended to match inline assembly implementations of bswap in libc headers and replace them more optimizable implementations.

At this point, it has outlived its usefulness (see https://github.com/llvm/llvm-project/issues/156571#issuecomment-3247638412), as libc implementations no longer use inline assembly for this purpose.

Additionally, it breaks the ""black box"" property of inline assembly, which some languages like Rust would like to guarantee.

Fixes https://github.com/llvm/llvm-project/issues/156571.",2025-09-03T08:27:11Z,2025-09-04T09:00:18Z,2025-09-04T07:28:11Z,2025-09-04T07:28:11Z,True,3,1,1,49,180,10
156613,closed,[NVPTX] Add support for tcgen05 instructions for sm103 target,masahi,"Currently, NVPTX fails to lower some (but not all?) tcgen05 ops for the sm103 target. It was observed in a downstream project, Triton, in https://github.com/triton-lang/triton/pull/8045.

I verified that my change is functional by testing against `tcgen05-fence.ll`. Without the changes in `NVPTXSubtarget.h`:
```
$ bin/llc < tcgen05-fence.ll -march=nvptx64 -mcpu=sm_103a -mattr=+ptx88
//
// Generated by LLVM NVPTX Back-End
//

.version 8.8
.target sm_103a
.address_size 64

LLVM ERROR: Cannot select: intrinsic %llvm.nvvm.tcgen05.fence.after.thread.sync
```

However, for `tcgen05-ld.ll`, the test passes for sm103 without my change. This is why I said ""NVPTX fails to lower **some** tcgen05 ops for the sm103 target"" above.

cc @AlexMaclean @rajatbajpai @durga4github 
",2025-09-03T07:46:14Z,2025-09-04T05:13:46Z,2025-09-04T05:13:29Z,2025-09-04T05:13:29Z,True,5,5,3,21,1,8
156615,closed,"[AArch64] Transform add(x, abs(y)) -> saba(x, y, 0)",hazzlim,"Add a DAGCombine to perform the following transformations: 
- add(x, abs(y)) -> saba(x, y, 0)
- add(x, zext(abs(y))) -> sabal(x, y, 0)

As well as being a useful generic transformation, this also fixes an issue where LLVM de-optimises [US]ABA neon ACLE intrinsics into separate ABD+ADD instructions when one of the operands is a zero vector.
",2025-09-03T08:07:46Z,2025-09-08T13:14:24Z,2025-09-08T13:14:24Z,2025-09-08T13:14:24Z,True,4,6,4,309,85,3
156609,closed,[libc++][C++03] remove unused macro in __config,Un1q32,"The only place this macro was used was in `__memory/aligned_alloc.h`, but the code that used this macro also checked for C++17 so it was removed, now this macro is never used.",2025-09-03T07:24:48Z,2025-09-03T16:34:23Z,2025-09-03T16:31:21Z,2025-09-03T16:31:21Z,True,2,0,1,0,12,1
156608,closed,[lld][MachO] Silence warnings about --read-workers parsing,frederik-h,"The parsing of the --read-workers argument v is implemented like this:

  unsigned threads = 0
  if (!llvm::to_integer(v, threads, 0) || threads < 0) {
  ...

As reported by a compiler warning, the value of the ""threads < 0"" expession is never going to be true. It could only evaluate to true if v represents a negative number, but in this case llvm::to_integer returns false since threads is unsigned and hence the second operand of the || operator will not be evaluated.

This patch removes the useless || operand to silence compiler warnings. Since I had to first find out if --read-workers=0 is valid or not (it seems to be), I also added a test to document the valid values for the option and I adjusted the error message on invalid values to clearly state that 0 is valid.",2025-09-03T07:20:29Z,2025-09-03T16:02:17Z,2025-09-03T16:02:13Z,2025-09-03T16:02:12Z,True,5,0,2,22,5,2
156607,closed,[clang] Polymorphic Cleanup type is moved despite not being POD types,ojhunt,"Clang as a number of Cleanup types used in exception handling, these are presumed to be POD types that can be memmoved as needed, however this is not correct by default on platforms with pointer authentication that make vtable pointers address discriminated.

This PR mitigates this problem by introducing a LLVM_MOVABLE_POLYMORPHIC_TYPE macro that can be used to annotate polymorphic types that are required to be movable, to override the use of address discrimination of the vtable pointer.",2025-09-03T07:19:07Z,2025-09-06T08:26:30Z,2025-09-06T08:26:29Z,2025-09-06T08:26:28Z,True,2,0,1,11,2,3
156606,closed,[MLIR][IRDL][CMake] Switch to using `setup_host_tool` to fix cross compilation,Zentrik,"Using `build_native_tool` directly doesn't seem to be standard, instead other tools seem to call `setup_host_tool` (e.g. milr-linalg-ods-gen and `add_tablegen` seems to have a copy of `setup_host_tool` internally).

When cross compiling llvm in two stages, the first building all native tools and then the second using those built tools to cross compile, this prevents the second stage from trying to rebuild mlir-irdl-to-cpp, which fails.
",2025-09-03T07:11:30Z,2025-09-03T17:17:53Z,2025-09-03T17:17:52Z,2025-09-03T17:17:52Z,True,2,1,2,1,20,1
156605,closed,llvm-tli-checker: Avoid a temporary string while printing,arsenm,"Directly write to the output instead of building a string to
print.

Closes #142538",2025-09-03T07:11:28Z,2025-09-03T10:21:10Z,2025-09-03T10:21:08Z,2025-09-03T10:21:08Z,True,1,0,1,11,12,1
156603,closed,[MLIR][IRDL][CMake] Switch to using `setup_host_tool` to fix cross compilation,Zentrik,"Using `build_native_tool` directly doesn't seem to be standard, instead other tools seem to call `setup_host_tool` (e.g. milr-linalg-ods-gen and `add_tablegen` seems to have a copy of `setup_host_tool` internally).

When cross compiling llvm in two stages, the first building all native tools and then the second using those built tools to cross compile, this prevents the second stage from trying to rebuild mlir-irdl-to-cpp, which fails.
",2025-09-03T07:10:33Z,2025-09-03T07:11:12Z,2025-09-03T07:11:01Z,,False,0,0,1,1,20,1
156601,closed,[llvm] Proofread AddingConstrainedIntrinsics.rst,kazutakahirata,,2025-09-03T06:55:28Z,2025-09-03T14:49:13Z,2025-09-03T14:48:53Z,2025-09-03T14:48:53Z,True,0,0,1,19,19,1
156602,closed,[AMDGPU] Do not use 64-bit literals with VOP3* encodings,jayfoad,"Encoding sometimes uses a 64-bit instead of 32-bit literal because it
does not know the signedness of the operand: if the value does not fit
in both a 32-bit signed and a 32-bit unsigned then it will use a 64-bit
literal for safety. However it should never do this for VOP3 and VOP3P
encoded instructions, because these encodings do not allow 64-bit
literal operands.
",2025-09-03T07:07:40Z,2025-09-04T09:36:27Z,2025-09-04T09:00:21Z,2025-09-04T09:00:21Z,True,8,6,3,90,86,6
156600,closed,[RISCV] Remove an unnecessary cast (NFC),kazutakahirata,"*MF is already non const.
",2025-09-03T06:54:54Z,2025-09-03T14:49:09Z,2025-09-03T14:48:45Z,2025-09-03T14:48:45Z,True,0,0,1,2,2,1
156598,closed,[Support] Modernize YAML traits with is_detected (NFC),kazutakahirata,"This patch modernizes has_* YAML traits with is_detected.

The resulting code should be a lot more readable because all the
SFINAE logic is hidden behind is_detected.

One note about has_FlowTraits.  The original code uses a complex trick
to detect a member variable named ""flow"", intentionally triggering
ambiguity with ""flow"" in the two base classes.  I've simplified the
check down to:

  template <class U> using check = decltype(&U::flow);

without using SameType.  The use of SameType here would make the trait
unnecessarily complicated.

While I am at it, this patch switches to ""static constexpr bool"".
",2025-09-03T06:54:11Z,2025-09-03T14:49:02Z,2025-09-03T14:48:29Z,2025-09-03T14:48:29Z,True,0,0,1,50,100,1
156599,closed,[PowerPC] Remove an unnecessary cast (NFC),kazutakahirata,"getSExtValue already returns int64_t.
",2025-09-03T06:54:33Z,2025-09-03T14:49:06Z,2025-09-03T14:48:37Z,2025-09-03T14:48:37Z,True,0,0,1,1,1,1
156597,closed,[InstCombine][VectorCombine][NFC] Unify uses of lossless inverse cast,XChy,"This patch addresses https://github.com/llvm/llvm-project/pull/155216#discussion_r2297724663.
This patch adds a helper function to put the inverse cast on constants, with cast flags preserved(optional).
Follow-up patches will add trunc/ext handling on VectorCombine and flags preservation on InstCombine.
",2025-09-03T06:53:52Z,2025-09-08T13:56:12Z,2025-09-08T13:30:07Z,2025-09-08T13:30:07Z,True,4,5,7,86,74,11
156595,closed,[AMDGPU] Support cluster_load_async_to_lds instructions on gfx1250,changpeng,,2025-09-03T06:52:49Z,2025-09-03T18:50:29Z,2025-09-03T18:22:10Z,2025-09-03T18:22:10Z,True,6,0,3,689,2,16
156594,closed,[libc++] Refactor remaining __find_equal calls,philnik777,"#147345 refactored `__find_equal`. Unfortunately there was a merge conflict with another patch. This fixes up the problematic places.
",2025-09-03T06:40:43Z,2025-09-03T07:16:49Z,2025-09-03T07:16:46Z,2025-09-03T07:16:46Z,True,1,0,1,2,4,1
156589,closed,[flang][OpenMP] `do concurrent`: support `local` on device,ergawy,"Extends support for mapping `do concurrent` on the device by adding support for `local` specifiers. The changes in this PR map the local variable to the `omp.target` op and uses the mapped value as the `private` clause operand in the nested `omp.parallel` op.

- https://github.com/llvm/llvm-project/pull/155754
- https://github.com/llvm/llvm-project/pull/155987
- https://github.com/llvm/llvm-project/pull/155992
- https://github.com/llvm/llvm-project/pull/155993
- https://github.com/llvm/llvm-project/pull/156589 ◀️
- https://github.com/llvm/llvm-project/pull/156610
- https://github.com/llvm/llvm-project/pull/156837",2025-09-03T06:18:29Z,2025-09-09T10:13:46Z,2025-09-09T10:13:46Z,,False,1,0,0,0,0,0
156590,closed,"[NFC][libclc] Remove unused -DCLC_INTERNAL build flag, remove unused M_LOG210",wenju-he,,2025-09-03T06:24:08Z,2025-09-04T22:44:42Z,2025-09-04T22:44:37Z,2025-09-04T22:44:37Z,True,0,0,1,1,7,2
156596,closed,"[ADT] ""Inline"" TestAndEraseFromMap into PriorityWorklist.h (NFC)",kazutakahirata,"TestAndEraseFromMap is used only from PriorityWorklist::erase_if.
This patch ""inlines"" the struct into its sole user in the form of a
lambda function, eliminating a lot of boilerplate code.
",2025-09-03T06:53:09Z,2025-09-03T14:49:04Z,2025-09-03T14:48:21Z,2025-09-03T14:48:21Z,True,0,0,1,11,30,1
156584,closed,[clang-tidy] Fix `readability-uppercase-literal-suffix` warning with hex literals,localspook,"This is a regression I introduced in #148275 and was [noticed by](https://github.com/llvm/llvm-project/pull/148275#issuecomment-3246670841) nettle. The check incorrectly fires on hex literals containing the letter `b` ([godbolt](https://godbolt.org/z/rcb77h6ef)).

(I felt a revert was unnecessary in this case. Maybe others disagree?)",2025-09-03T04:37:16Z,2025-09-03T15:01:56Z,2025-09-03T15:00:48Z,2025-09-03T15:00:48Z,True,1,0,1,10,1,2
156586,closed,[RISCV] Add exhausted_gprs_fprs test to calling-conv-half.ll. NFC,topperc,Follow up from what I wrote in the description of 8f50921cef04a11b97be0fb333c1df6921df649f,2025-09-03T05:14:39Z,2025-09-03T23:17:37Z,2025-09-03T23:17:35Z,2025-09-03T23:17:35Z,True,0,0,1,593,12,1
156582,closed,fix(LLDB): Repair OC_Bridge variable display issue when load-on-demand is true,zzjconcent,"fix(LLDB): Repair OC_Bridge variable display issue when load-on-demand is true
When symbols.load-on-demand is enabled in LLDB, variables from OC-bridged Swift objects were not being displayed. This was due to SymbolFileOndemand not correctly overriding the GetAstData method, causing it to return an empty implementation from the base SymbolFile class.
This commit fixes the issue by providing the correct implementation of GetAstData in SymbolFileOndemand, ensuring that the necessary AST data is loaded and OC-bridged variables can be correctly resolved and displayed during debugging.

Problem
When the symbols.load-on-demand setting in LLDB is set to True, member variables of Objective-C bridged Swift objects (OC Bridge variables) fail to display during debugging sessions.
Root Cause
The underlying issue is related to how LLDB handles symbol loading with the on-demand setting enabled.
Class Inheritance and Method Overriding: The SymbolFileOndemand class, which is active when on-demand symbol loading is enabled, inherits from the SymbolFile base class.
Missing Implementation: The SymbolFile base class provides a virtual method called GetAstData, but its default implementation returns an empty object. While other, direct subclasses of SymbolFile provide a proper override for this method, SymbolFileOndemand does not.
Incorrect Method Resolution: Consequently, when LLDB attempts to resolve symbols for OC Bridge variables in on-demand mode, it calls the empty base class implementation of GetAstData through the SymbolFileOndemand object. This fails to retrieve the necessary Abstract Syntax Tree (AST) data required to parse and display these variables.
In contrast, when symbols.load-on-demand is False, LLDB uses a different SymbolFile subclass that correctly implements GetAstData, and the variables are displayed as expected.
Solution
The solution is to provide the missing override for the GetAstData method in the SymbolFileOndemand class.
The implementation now delegates the call to the original SymbolFile object that SymbolFileOndemand wraps. This ensures that even when operating in on-demand mode, LLDB can correctly fetch the AST data, allowing it to resolve and display the OC Bridge variables correctly.",2025-09-03T03:45:07Z,2025-09-03T04:46:55Z,2025-09-03T04:46:55Z,,False,1,0,1,11,0,2
156581,closed,AMDGPU: Change FLAT classes to use RegisterOperand parameters,arsenm,"This will make it easier to precisely express operand constraints
without having the implicit getLdStRegisterOperand at the bottom.
Also prunes out using AV classes in some instructions where AGPRs
are not relevant.",2025-09-03T03:39:33Z,2025-09-04T08:03:46Z,2025-09-04T08:03:45Z,2025-09-04T08:03:45Z,True,2,0,1,208,215,2
156580,closed,AMDGPU: Change DS classes to use RegisterOperand parameters,arsenm,"Start stripping out the uses of getLdStRegisterOperand. This
added a confusing level of indirection where the class at the
definition point was not the actual class used. This was also
pulling in the AV class usage for targets where it isn't
relevant. This was also inflexible for special cases.

Also fixes using default arguments which only served to wrap the
class argument in a RegisterOperand.

This should be done for all the memory instructions.",2025-09-03T03:39:32Z,2025-09-08T19:47:30Z,2025-09-04T05:14:05Z,2025-09-04T05:14:04Z,True,2,7,2,191,153,3
156570,closed,[SPIRV] Add OpInf support for isinf hlsl intrinsic,farzonl,"fixes #148051

- update EmitHLSLBuiltinExpr in CGHLSLBuiltins.cpp to toggle intrinsics by target
- Add a GENERATE_HLSL_INTRINSIC_FUNCTION for isinf in CGHLSLRuntime.h
- Update the SPIRVInstructionSelector.cpp to emit the OpSinf instruction
- Updates the isinf.hlsl test to check spirv intrinsic generation
- add OpIsinf.ll  tests",2025-09-03T02:11:40Z,2025-09-03T21:16:30Z,2025-09-03T19:03:43Z,2025-09-03T19:03:43Z,True,5,0,2,124,42,7
156567,closed,[Headers][X86] Add constexpr support for some AVX[512] intrinsics.,moorabbit,"The following AVX[512] intrinsics are now constexpr:
- `_mm_mask_cvtepi32_pd`
- `_mm_maskz_cvtepi32_pd`
- `_mm_mask_cvtepi32_ps`
- `_mm_maskz_cvtepi32_ps`
- `_mm_cvtepu32_pd`
- `_mm_mask_cvtepu32_pd`
- `_mm_maskz_cvtepu32_pd`
- `_mm_cvtepu32_ps`
- `_mm_mask_cvtepu32_ps`
- `_mm_maskz_cvtepu32_ps`
- `_mm256_mask_cvtepi32_pd`
- `_mm256_maskz_cvtepi32_pd`
- `_mm256_mask_cvtepi32_ps`
- `_mm256_maskz_cvtepi32_ps`
- `_mm256_cvtepu32_pd`
- `_mm256_mask_cvtepu32_pd`
- `_mm256_maskz_cvtepu32_pd`
- `_mm256_cvtepu32_ps`
- `_mm256_mask_cvtepu32_ps`
- `_mm256_maskz_cvtepu32_ps`
- `_mm512_cvtepi64_pd`
- `_mm512_mask_cvtepi64_pd`
- `_mm512_maskz_cvtepi64_pd`
- `_mm512_cvtepu64_pd`
- `_mm512_mask_cvtepu64_pd`
- `_mm512_maskz_cvtepu64_pd`

This PR is part 2 [[part 1](https://github.com/llvm/llvm-project/pull/156187)] of a series of PRs fixing #155798",2025-09-03T01:44:30Z,2025-09-04T12:56:07Z,2025-09-04T12:50:07Z,2025-09-04T12:50:07Z,True,3,0,27,124,53,4
156566,closed,[RISCV] Remove remaining vmerge_vl mask patterns. NFC,lukel97,"Now that RISCVVectorPeephole can commute operands to fold vmerge into a pseudo to make it masked in #156499, we can remove the remaining VPatMultiplyAccVL_VV_VX/VPatFPMulAccVL_VV_VF_RM patterns.

It also looks like we can remove the vmerge_vl patterns for _TIED psuedos too. I suspect they're handled by convertAllOnesVMergeToVMv and foldVMV_V_V

Tested on SPEC CPU 2017 and llvm-test-suite to confirm there's no codegen change.

Fixes #141885
",2025-09-03T01:42:34Z,2025-09-03T07:05:53Z,2025-09-03T07:05:53Z,2025-09-03T07:05:53Z,True,0,0,1,0,155,1
156565,closed,ELF: Add support for relocating R_AARCH64_FUNCINIT64.,pcc,"R_AARCH64_FUNCINIT64 is a dynamic relocation type for relocating
word-sized data in the output file using the return value of
a function. An R_AARCH64_FUNCINIT64 shall be relocated as an
R_AARCH64_IRELATIVE with the target symbol address if the target
symbol is non-preemptible, and it shall be a usage error to relocate an
R_AARCH64_FUNCINIT64 with a preemptible or STT_GNU_IFUNC target symbol.

The initial use case for this relocation type shall be for emitting
global variable field initializers for structure protection. With
structure protection, the relocation value computation is tied to the
compiler implementation in such a way that it would not be reasonable to
define a relocation type for it (for example, it may involve computing
a hash using a compiler-determined algorithm), hence the need for the
computation to be implemented as code in the binary.

Part of the AArch64 psABI extension:
https://github.com/ARM-software/abi-aa/issues/340
",2025-09-03T01:42:29Z,2025-09-03T01:42:59Z,2025-09-03T01:42:58Z,,False,1,0,1,61,3,5
156563,closed,[flang] Check for BIND(C) name conflicts with alternate entries,eugeneepshteyn,"Added IsAlternateEntry() and modified IsExternalProcedureDefinition() to also check for alternate entries.

(IsExternalProcedureDefinition() is called from CheckHelper::CheckGlobalName(), which checks for duplicate global symbols.)

Fixes #62778",2025-09-03T01:17:09Z,2025-09-03T23:22:38Z,2025-09-03T23:22:34Z,2025-09-03T23:22:34Z,True,1,4,7,15,1,3
156562,closed,[RISCV] Add Zfh RUN lines to calling-conv-half.ll. NFC,topperc,"We had these RUN lines in our downstream and I couldn't tell for sure that we had another Zfh calling convention test upstream.

Note we should fix the stack test to also exhaust the GPRs to make it test the stack for ilp32f/lp64f. This was an existing issue in the testing when F was enabled.",2025-09-03T01:11:57Z,2025-09-03T05:31:46Z,2025-09-03T04:53:35Z,2025-09-03T04:53:35Z,True,1,0,1,253,3,1
156558,closed,[flang] Create TBAA subtree for COMMON block variables.,vzakhari,"In order to help LLVM disambiguate accesses to the COMMON
block variables, this patch creates a TBAA sub-tree for each
COMMON block, and the places all variables belonging to this
COMMON block into this sub-tree. The structure looks like this:
```
  common /blk/ a, b, c

  ""global data""
  |
  |- ""blk_""
     |
     |- ""blk_/bytes_0_to_3""
     |- ""blk_/bytes_4_to_7""
     |- ""blk_/bytes_8_to_11""
```

The TBAA tag for ""a"" is created in ""blk_/bytes_0_to_3"" root, etc.
The byte spans are created based on the `storage` information
provided by `fir.declare` (#155742).

See also: https://discourse.llvm.org/t/rfc-flang-representation-for-objects-inside-physical-storage/88026
",2025-09-03T00:16:52Z,2025-09-04T22:49:38Z,2025-09-04T22:49:38Z,2025-09-04T22:49:38Z,True,3,9,2,1081,41,17
156561,closed,Hexagon: Add runtime libcall entries for volatile memcpy call,arsenm,"This pass currently doesn't have TargetLoweringInfo, but technically
it should verify the call is available from a future RuntimeLibcallsInfo
analysis.",2025-09-03T01:10:00Z,2025-09-06T01:03:44Z,2025-09-06T00:53:14Z,2025-09-06T00:53:14Z,True,4,1,3,9,3,2
156557,closed,[mlir][ToLLVM] Fix the index bitwidth handling for the dynamic case of `convert-to-llvm`,fabianmcg,"This patch changes the behavior of `convert-to-llvm{dynamic=true}` so that the nearest `DataLayout` is used to configure LowerToLLVMOptions and LLVMTypeConverter.

Example:

```mlir
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<index, 16>>} {
  func.func private @test_16bit_index(%arg0: index) -> index
}
// mlir-opt --convert-to-llvm=""dynamic=true""
module attributes {dlti.dl_spec = #dlti.dl_spec<index = 16 : i64>} {
  llvm.func @test_16bit_index(i16) -> i16 attributes {sym_visibility = ""private""}
}
```",2025-09-02T23:46:01Z,2025-09-03T14:41:17Z,2025-09-03T12:07:18Z,2025-09-03T12:07:18Z,True,4,0,1,42,1,2
156555,closed,[docs] Refine some of the wording in the quality developer policy,rnk,I'm splitting these edits out of PR #154441,2025-09-02T23:35:19Z,2025-09-03T23:13:47Z,2025-09-03T22:57:52Z,2025-09-03T22:57:52Z,True,2,0,1,25,26,1
156548,closed,[AMDGPU] Support cluster load instructions for gfx1250,changpeng,,2025-09-02T22:29:57Z,2025-09-02T23:35:39Z,2025-09-02T23:34:20Z,2025-09-02T23:34:20Z,True,0,0,1,503,0,16
156553,closed,Volunteer myself and Heejin Ahn as WebAssembly backend maintainers,dschuff,,2025-09-02T23:12:41Z,2025-09-03T18:07:29Z,2025-09-03T18:07:29Z,2025-09-03T18:07:29Z,True,0,1,2,5,0,1
156551,closed,[AMDGPU] Update builtins-amdgcn-error-gfx1250-param.cl,changpeng,  Should check both load_async_to_lds and store_async_from_lds instead just check store_async_from_lds twice.,2025-09-02T22:39:42Z,2025-09-02T23:35:36Z,2025-09-02T23:34:55Z,2025-09-02T23:34:55Z,True,0,0,1,8,8,1
156547,closed,[libc++] Conditionally declare `lgamma_r` as noexcept,yuxuanchen1997,"An older PR https://github.com/llvm/llvm-project/pull/102036 suggested that LLVM libc declares `lgamma_r` as noexcept and is incompatible with this redeclaration. However, I recently discovered that glibc also declares the math functions to be noexcept under C++ mode. 

This line usually don't cause issues because both the glibc and this file are included as ""system headers"". According to [this godbolt](https://godbolt.org/z/o7Wd9PP58), both GCC and clang ignore the different exception specification between multiple declarations if they are in system headers. 

However, this seems not the case for NVCC/EDG, so a fix for this redeclaration is still desirable. This patch proposes that we should declare the function as noexcept under known libc integrations to keep the declared function consistent. ",2025-09-02T22:19:22Z,2025-09-09T16:50:51Z,2025-09-08T21:18:00Z,2025-09-08T21:17:59Z,True,10,5,1,14,4,1
156546,closed,[AMDGPU] Adjust VGPR allocation encoding on gfx1250,rampitec,,2025-09-02T22:13:18Z,2025-09-03T00:23:34Z,2025-09-02T22:53:17Z,2025-09-02T22:53:17Z,True,2,0,1,31,3,2
156545,closed,[mlir][acc] Introduce acc data bounds accessors,razvanlupusoru,"Add acc.get_lowerbound, acc.get_upperbound, acc.get_stride, and acc.get_extent  operations to extract information from acc bounds.

This simplifies the arguments needed for recipes when handling slices and makes  bound information consistent with data clauses. Update recipe documentation to clarify argument ordering and add examples demonstrating slice handling with bounds arguments.",2025-09-02T22:12:52Z,2025-09-03T17:52:29Z,2025-09-03T17:50:58Z,2025-09-03T17:50:58Z,True,0,11,1,263,46,2
156543,closed,[Frontend] Define __SANITIZE__ macros for kernel address variants,nathanchance,"GCC defines these macros for both userspace and kernel address sanitizers:

    $ gcc -E -dM -fsanitize=address -x c /dev/null &| string match -er SANITIZE
    #define __SANITIZE_ADDRESS__ 1
    $ gcc -E -dM -fsanitize=kernel-address -x c /dev/null &| string match -er SANITIZE
    #define __SANITIZE_ADDRESS__ 1
    $ gcc -E -dM -fsanitize=hwaddress -x c /dev/null &| string match -er SANITIZE
    #define __SANITIZE_HWADDRESS__ 1
    $ gcc -E -dM -fsanitize=kernel-hwaddress -x c /dev/null &| string match -er SANITIZE
    #define __SANITIZE_HWADDRESS__ 1

PR #153888 added these same defines for clang but only for the userspace address sanitizers:

    $ clang -E -dM -fsanitize=address -x c /dev/null &| string match -er SANITIZE
    #define __SANITIZE_ADDRESS__ 1
    $ clang -E -dM -fsanitize=kernel-address -x c /dev/null &| string match -er SANITIZE
    $ clang -E -dM -fsanitize=hwaddress -x c /dev/null &| string match -er SANITIZE
    #define __SANITIZE_HWADDRESS__ 1
    $ clang -E -dM -fsanitize=kernel-hwaddress -x c /dev/null &| string match -er SANITIZE

Match GCC's behavior so that the Linux kernel can eventually drop its own internal defines.
",2025-09-02T22:01:13Z,2025-09-08T18:33:58Z,2025-09-08T18:33:58Z,2025-09-08T18:33:58Z,True,0,2,2,6,2,2
156542,closed,[flang][rt] Remove findloc.cpp from supported_sources fro CUDA build,clementval,findloc.cpp is causing memory exhaustion with higher compute capabilities. Also it is a very expensive file to build. Remove it from the supported_sources for CUDA build until we can lower its memory footprint. ,2025-09-02T22:00:22Z,2025-09-02T22:22:44Z,2025-09-02T22:22:42Z,2025-09-02T22:22:42Z,True,0,0,1,3,0,1
156538,closed,[lld] Make lld tests use lit internal shell by default,boomanaiden154,"This patch updates the lld lit test config to use the internal shell by
default. This has some performance advantages (~10-15%) and also
produces nicer failure output. This should have no impact on test
coverage now that all tests previously requiring a shell have been
ported over to work with the internal shell.

Fixes #102700.
",2025-09-02T21:20:24Z,2025-09-03T17:18:45Z,2025-09-03T17:18:44Z,2025-09-03T17:18:44Z,True,1,0,9,13,2,2
156537,closed,[lld] Make cache-warning* tests work with internal shell,boomanaiden154,"These tests were using subexpressions to change the cache size. Change
them up to write out the necessary commands to a response file and then
load that on the lld command line.

Towards #102700.
",2025-09-02T21:20:21Z,2025-09-03T16:41:21Z,2025-09-03T16:41:19Z,2025-09-03T16:41:19Z,True,2,0,6,31,17,4
156541,closed,[utils] Process attribute references in lines defining attrs.,vzakhari,"Here is an example of TBAA attributes generated by Flang:
```
#tbaa_root = #llvm.tbaa_root<id = ""Flang function root _QPtest6"">
#tbaa_type_desc = #llvm.tbaa_type_desc<id = ""any access"", members = {<#tbaa_root, 0>}>
```

We have to process the text after `=` to replace the attribute
references with proper check variables.
",2025-09-02T21:52:27Z,2025-09-08T16:07:58Z,2025-09-08T16:07:58Z,2025-09-08T16:07:58Z,True,2,0,1,3,1,1
156535,closed,[OpenACC] Reduction 'init' lowering for all-ones/least/largest,erichkeane,"As a follow on to the last patches of this form, this patch does the init section for all of the reduction operators that weren't previously covered, which is '&' as all-ones, 'max' as 'least', and 'min' as 'largest'.",2025-09-02T20:49:37Z,2025-09-03T13:19:55Z,2025-09-03T13:19:55Z,2025-09-03T13:19:55Z,True,0,11,3,6101,661,20
156533,closed,[lld] Update cgdata-* tests to not use subshells,boomanaiden154,"Subshells are not supported in the lit internal shell. We can remove
them by constructing sed commands directly inside of a separate file.

Towards #102700.
",2025-09-02T20:47:38Z,2025-09-03T16:30:33Z,2025-09-03T16:30:31Z,2025-09-03T16:30:31Z,True,3,0,6,16,8,2
156532,closed,Reverts recent debuginfod patches,zeroomega,"This patch reverts 44e791c6ff1a982de9651aad7d1c83d1ad96da8a, 3cc1031a827d319c6cb48df1c3aafc9ba7e96d72 and
adbd43250ade1d5357542d8bd7c3dfed212ddec0. Which breaks debuginfod build and tests when httplib is used.",2025-09-02T20:47:33Z,2025-09-02T21:22:43Z,2025-09-02T21:22:43Z,2025-09-02T21:22:43Z,True,0,0,1,12,34,5
156531,closed,[NVPTX] Fix `fence-nocluster.ll` `ptxas` invocation (NFC),justinfargnoli,,2025-09-02T20:46:32Z,2025-09-02T22:36:54Z,2025-09-02T22:36:54Z,2025-09-02T22:36:54Z,True,0,0,1,1,1,1
156530,closed,[lldb][NativePDB] Sort function name and type basename maps deterministically.,ZequanWu,"https://github.com/llvm/llvm-project/pull/153160 created those function maps and uses default sort comparator which is not deterministic when there are multiple entries with same name because llvm::sort is unstable sort. 

This fixes it by comparing the id value when tie happens and sort  `m_type_base_names` deterministically as well.",2025-09-02T20:45:49Z,2025-09-02T21:26:08Z,2025-09-02T21:26:07Z,2025-09-02T21:26:07Z,True,1,0,3,4,4,1
156529,closed,[LAA] Support assumptions with non-constant deref sizes.,fhahn,"Update evaluatePtrAddrecAtMaxBTCWillNotWrap to support non-constant sizes in dereferenceable assumptions.

Note that with that we will need to add a constant to a backedge-taken-count, so expressions like (-1 + %n) + 1. While adding something to -1 technically wraps in the unsigned sense, in practice the result should not consider overflowing in addSCEVNoOverflow. I am not sure if there's a more general place for this kind of reasoning?",2025-09-02T20:45:49Z,2025-09-03T05:49:09Z,2025-09-03T05:49:09Z,,False,2,0,1,44,11,2
156528,closed,[clang-tidy] Fix file extension inconsistency,googlewalt,"This fixes an issue with #150791. In CheckRunner, we treat files with unrecognized extensions as "".cpp"", by forcefully assigning `extension = "".cpp""` if it's not already one of `"".c"", "".hpp"", "".m"", or "".mm""`. Make the new code which chooses the default `-std` argument be consistent with that, so that using other file extensions doesn't trigger an error message like `error: invalid argument '-std=c99' not allowed with 'C++'`",2025-09-02T20:42:49Z,2025-09-04T12:00:43Z,2025-09-04T12:00:42Z,2025-09-04T12:00:42Z,True,3,0,2,1,3,1
156527,closed,[AMDGPU] Definitions of new gfx1250 HW_REG_MODE fields. NFC.,rampitec,,2025-09-02T20:32:43Z,2025-09-02T21:14:54Z,2025-09-02T21:14:53Z,2025-09-02T21:14:52Z,True,2,0,1,11,1,1
156526,closed,[lld] Update tests redirecting multiple commands to FileCheck,boomanaiden154,"This patch updates two LLD tests that were redirecting multiple commands
to the same FileCheck invocation to not use this strategy. This
construction is not supported by lit's internal shell and given its
rarirty, it does not make sense to add support. The workaround is to
dump the contents of multiple commands into a file and then run
FileCheck on that.

Towards #102700.
",2025-09-02T20:28:53Z,2025-09-03T16:28:08Z,2025-09-03T16:21:55Z,2025-09-03T16:21:55Z,True,4,0,7,60,43,2
156525,closed,[OpenMP][clang] Fix CaptureRegion for message clause,ro-i,Fixes https://github.com/llvm/llvm-project/issues/156232,2025-09-02T20:21:24Z,2025-09-03T12:57:36Z,2025-09-02T21:09:56Z,2025-09-02T21:09:56Z,True,0,2,2,9,2,2
156524,closed,[AMDGPU] Add s_set_vgpr_msb gfx1250 instruction,rampitec,,2025-09-02T20:20:13Z,2025-09-02T21:22:59Z,2025-09-02T21:22:57Z,2025-09-02T21:22:57Z,True,1,0,2,65,0,7
156523,closed,[CG] Add VTs for v[567]i1 and v[567]f16,anemet,"[recommit https://github.com/llvm/llvm-project/pull/151763 after fixing https://github.com/llvm/llvm-project/issues/152150]

We already had corresponding f32 and i32 vector types for these sizes.

Also add VTs v[567]i8 and v[567]i16:  these are needed by the Hexagon backend which for each i1 vector types want to query information about the corresponding i8 and i16 types in
HexagonTargetLowering::getPreferredHvxVectorAction.",2025-09-02T19:58:42Z,2025-09-03T00:40:55Z,2025-09-03T00:40:43Z,2025-09-03T00:40:43Z,True,0,0,1,266,242,2
156520,closed,[OMPIRBuilder] Use target global AS for SrcLocStr,sarnex,"We should set the correct target-specific AS for the SrcLocStr global created in OMPIRBuilder.

We also may have to insert a constexpr addrspacecast because the struct field type may be different than the value used to initialize it.

I actually want the cast to be from AS 1 to AS 4, but getting the type to be AS4 relies on a PR currently in-review, so leave the cast target to AS 0 for now.",2025-09-02T19:47:58Z,2025-09-03T14:35:34Z,2025-09-03T14:35:34Z,2025-09-03T14:35:33Z,True,2,1,3,25,2,2
156521,closed,[CIR] Add support for constructors with VTT parameters,andykaylor,This adds the support for implicit VTT arguments in constructors.,2025-09-02T19:51:33Z,2025-09-03T19:07:01Z,2025-09-03T19:06:56Z,2025-09-03T19:06:56Z,True,2,8,3,852,40,17
156518,closed,[CIR] Upstream Atomic init for ComplexType,AmrDeveloper,"This change adds support for Atomic init for ComplexType

Issue: https://github.com/llvm/llvm-project/issues/141365",2025-09-02T19:42:23Z,2025-09-03T16:13:49Z,2025-09-03T16:13:49Z,2025-09-03T16:13:49Z,True,0,0,1,25,5,2
156519,closed,[CodeGen][test][NFC] Refactor ObjC attribute tests,ellishg,"Some downstream work broke these tests because the attribute number changed. Refactor these tests to be more resilient in the face of changes like this

* `instrument-objc-method.m`
  * `#1` was never checked, I think it was trying to check that `__cyg_profile_func_enter` was not used, so I added `--implicit-check-not=""__cyg_profile_func_enter""`
  * Use `[[#ATTR:]]` so the test doesn't fail if the number changes
* `address-safety-attr.mm`
  * Check attributes in `Function Attrs:` so it's independent of the attribute number",2025-09-02T19:44:14Z,2025-09-04T16:29:31Z,2025-09-04T16:29:31Z,2025-09-04T16:29:31Z,True,0,0,1,16,22,2
156517,closed,[lldb] Format source/Commands/Options.td,JDevlieghere,"Format the command options tablegen file, which was created before clang-format added support for tablegen. Small changes lead to lots of reformatting changes which makes the diffs hard to review.",2025-09-02T18:58:35Z,2025-09-02T22:35:43Z,2025-09-02T22:35:30Z,2025-09-02T22:35:30Z,True,0,0,1,2005,1147,1
156515,closed,[libc] Add more elementwise wrapper functions,jhuber6,"Summary:
Fills out some of the missing fundamental floating point operations.
These just wrap the elementwise builtin of the same name.
",2025-09-02T18:42:10Z,2025-09-03T16:04:12Z,2025-09-03T02:53:03Z,2025-09-03T02:53:03Z,True,1,1,1,52,2,2
156513,closed,[GVN] Turn off ScalarPRE for TokenLike Types,farzonl,"fixes #154407

In HLSL the GVNPass was adding a phi node on
a target extention type.
https://hlsl.godbolt.org/z/sc14YenEe

This is something we cleaned up in a past PR (https://github.com/llvm/llvm-project/pull/154620) by introducing `isTokenLikeTy`. In the case of the GVN pass the target extention type was still making its way through. This change makes it so if we see this type we don't do PRE.",2025-09-02T18:41:03Z,2025-09-03T16:05:19Z,2025-09-02T21:16:43Z,2025-09-02T21:16:43Z,True,1,8,2,53,1,2
156514,closed,[MLIR][Python] fix operation hashing,makslevental,https://github.com/llvm/llvm-project/pull/155114 broke op hashing (because the python objects ceased to be reference equivalent). This PR fixes by binding `OperationEquivalence::computeHash`.,2025-09-02T18:41:40Z,2025-09-02T20:12:47Z,2025-09-02T20:12:26Z,2025-09-02T20:12:26Z,True,3,0,1,24,2,4
156512,closed,[libc] Add missing and correct some existing C23 functions to math.h,vonosmas,"This change fixes and closes some gaps in the YAML template for producing the math.h header.

It adds some missing declarations (dadd/dsub function variants), correct arguments and/or return type for other functions from this family (dsqrt and ddiv), and add a missing fminimum_numl variant.",2025-09-02T18:17:36Z,2025-09-02T20:42:56Z,2025-09-02T20:42:48Z,2025-09-02T20:42:48Z,True,0,0,1,46,2,1
156510,closed,[lld] Remove shell requirements from tests,boomanaiden154,"These tests all pass inside the lit internal shell. A couple were marked
as requiring a shell to exclude them on Windows. Update those tests to
explicitly carve out Windows rather than any configuration that does not
provide the shell feature.

Towards #102700.
",2025-09-02T18:04:27Z,2025-09-04T01:58:48Z,2025-09-03T16:12:13Z,2025-09-03T16:12:13Z,True,3,6,4,38,17,17
156509,closed,[flang] Fix false errors in function result derived type checking,klausler,"When checking function result types that are implicitly declared at their pointer of use against the actual definitions of those functions (when available), be sure to use the type equivalence checker that allows for USE association and sequence type equivalence.",2025-09-02T18:04:27Z,2025-09-03T18:08:08Z,2025-09-03T18:08:04Z,2025-09-03T18:08:04Z,True,0,0,1,81,1,2
156507,closed,[clang][analyzer] Model `strxfrm`,alejandro-alvarez-sonarsource,"Signature:

```c
size_t strxfrm(char *dest, const char *src, size_t n);
```

The modeling covers:

* `src` can never be null
* `dest` can be null only if n is 0, and then the return value is some unspecified positive integer
* `src` and `dest` must not overlap
* `dest` must have at least `n` bytes of capacity
* The return value can either be:
    - `< n`, and the contents of the buffer pointed by `dest` is invalidated
    - `>= n`, and the contents of the buffer pointed by `dest` is marked as undefined

CPP-6854",2025-09-02T17:51:08Z,2025-09-05T13:38:02Z,2025-09-05T13:38:02Z,2025-09-05T13:38:02Z,True,3,8,9,207,0,2
156506,closed,[lldb][RISCV][test] make atomic region stepping test more robust,dlav-sc,"Currently, the tests that check stepping through atomic sequences use a hardcoded step distance, which is unreliable because this distance depends on LLVM's codegeneration. The relocations that clang emits can change the distance of the step.

Additionally, it was a poor idea to compute and check the step distance because that is not what we should actually be verifying. In the tests we already know where execution should stop after the step - for example, at a branch instruction - therefore, it is better to check the opcode of the instruction rather than the step distance. The step distance itself is not important and can sometimes be misleading.

This patch rewrites the tests, so now they checks the opcode of the instruction after the step instead of the step distance.",2025-09-02T17:47:59Z,2025-09-03T16:25:57Z,2025-09-03T16:22:55Z,2025-09-03T16:22:55Z,True,11,4,3,27,18,5
156504,closed,release/21.x: [CMake][AIX] Enable CMP0182: Create shared library archives by default (#155686),llvmbot,"Backport 94738ddaf42a0fa1981dc083f9ed94ba11943458

Requested by: @amy-kwan",2025-09-02T17:31:06Z,2025-09-09T08:34:04Z,2025-09-09T08:33:32Z,2025-09-09T08:33:32Z,True,2,0,1,6,0,1
156501,closed,[llvm-profgen] Add an option to mark all the profile context as preinlined,wlei-llvm,"Add a new option (under `--mark-all-context-preinlined`) that marks all function samples with the `ContextShouldBeInlined ` attribute during post-processing to make the profile as preinlined. This can be useful for experiments outside of the CS preinliner, e.g. to fully replay the inlining for a given profile.",2025-09-02T17:21:23Z,2025-09-09T19:01:33Z,2025-09-09T19:01:33Z,2025-09-09T19:01:33Z,True,6,2,3,112,15,6
156502,closed,release/21.x: [libc++][AIX] Fixup problems with ABI list checking (#155643),llvmbot,"Backport b8456e2a9698aa927d7b3f9c38213f3219aa0498

Requested by: @amy-kwan",2025-09-02T17:21:25Z,2025-09-08T07:38:21Z,2025-09-08T07:37:46Z,2025-09-08T07:37:46Z,True,3,0,1,4,1,2
156503,closed,"[SLP][NFC]Extract SCEVExpander from `calculateRtStride`, NFC",mgudim,Make `calculateRtStride` return the SCEV of rt stride value and let the caller expand it where needed.,2025-09-02T17:31:04Z,2025-09-03T13:27:16Z,2025-09-03T13:27:16Z,2025-09-03T13:27:16Z,True,0,0,4,25,31,1
156500,closed,[libc] Install dladdr on X86,boomanaiden154,"This patch adds dladdr to the X86 entrypoints and also does the necessary plumbing so that dladdr.cpp will actually compile.

This depends on #156195.",2025-09-02T17:20:44Z,2025-09-02T23:22:51Z,2025-09-02T23:22:47Z,2025-09-02T23:22:47Z,True,0,0,1,36,1,6
156499,closed,[RISCV] Commute True in foldVMergeToMask,lukel97,"In order to fold a vmerge into a pseudo, the pseudo's passthru needs to be the same as vmerge's false operand.

If they don't match we can try and commute the instruction if possible, e.g. here we can commute v9 and v8 to fold the vmerge:

    vsetvli zero, a0, e32, m1, ta, ma
    vfmadd.vv v9, v10, v8
    vsetvli zero, zero, e32, m1, tu, ma
    vmerge.vvm v8, v8, v9, v0

    vsetvli zero, a0, e32, m1, tu, mu
    vfmacc.vv v8, v9, v10, v0.t

Previously this wasn't possible because we did the peephole in SelectionDAG, but now that it's been migrated to MachineInstr in #144076 we can reuse the commuting infrastructure in TargetInstrInfo.

This fixes the extra vmv.v.v in the ""mul"" example here: https://github.com/llvm/llvm-project/issues/123069#issuecomment-3137997141

It should also allow us to remove the isel patterns described in #141885 later.",2025-09-02T17:20:33Z,2025-09-03T01:02:03Z,2025-09-03T01:02:03Z,2025-09-03T01:02:03Z,True,0,1,3,208,276,4
156498,closed,[Clang] Fix AST dump test on Mac OS,Sirraide,The name mangling on Mac OS is causing one of the AST dump tests added by #152870 to fail; fix this by setting the triple to linux.,2025-09-02T17:20:31Z,2025-09-02T17:44:22Z,2025-09-02T17:44:06Z,2025-09-02T17:44:06Z,True,1,0,2,0,306,1
156493,closed,[CIR][NFC] Fix build issue after AST modification,AmrDeveloper,Fix the build issue after AST modification,2025-09-02T17:02:47Z,2025-09-02T17:34:59Z,2025-09-02T17:34:59Z,2025-09-02T17:34:59Z,True,0,0,2,2,2,1
156491,closed,[msan] Change zero_alloc.cpp testcase to use stdlib.h,thurstond,Avoid build breakage on Mac,2025-09-02T16:52:22Z,2025-09-02T19:48:38Z,2025-09-02T19:48:38Z,2025-09-02T19:48:38Z,True,0,0,1,1,1,1
156490,closed,"[asan] Change zero_alloc.cpp testcase to use stdlib.h, re-enable on Mac",thurstond,Avoid build breakage on Mac (reported at https://github.com/llvm/llvm-project/pull/155943#issuecomment-3244593484),2025-09-02T16:52:12Z,2025-09-02T19:48:32Z,2025-09-02T19:48:31Z,2025-09-02T19:48:31Z,True,0,0,1,1,4,1
156492,closed,[flang][OpenMP] Fix offsets for EQUIVALENCE in firstprivate(/block/),klausler,"When a common block appears in firstprivate, its contents become host associations, which the symbol offset computation code for equivalences wasn't expecting.  Add a GetUltimate() call, and extend symbol dumping for HostAssocDetails.",2025-09-02T17:00:51Z,2025-09-03T18:07:14Z,2025-09-03T18:07:11Z,2025-09-03T18:07:11Z,True,0,0,1,26,4,4
156489,closed,[BOLT] close map_files FD,boomanaiden154,The BOLT runtime currently does not close the FD pointing to /proc/self/map_files. This does not actually hurt anything but was at least a bit of a red herring for me when looking through strace on a BOLT instrumented binary.,2025-09-02T16:42:48Z,2025-09-03T13:00:13Z,2025-09-03T13:00:10Z,2025-09-03T13:00:10Z,True,0,0,1,2,0,1
156497,closed,[SimplifyCFG] Support not in chain of comparisons.,andjo403,Proof: https://alive2.llvm.org/ce/z/cpXuCb,2025-09-02T17:19:35Z,2025-09-08T17:42:11Z,2025-09-08T17:16:41Z,2025-09-08T17:16:41Z,True,2,0,2,51,0,2
156496,closed,[AMDGPU] Add VOP3 literal testing for GFX1250. NFC.,jayfoad,"Tweak some tests to avoid uninteresting errors about VGPR alignment and
some unsupported instructions.
",2025-09-02T17:14:28Z,2025-09-03T06:43:51Z,2025-09-02T19:58:30Z,2025-09-02T19:58:30Z,True,1,0,1,227,125,1
156487,closed,[BOLT] Port additional test to internal shell,boomanaiden154,"This test was broken by #156083 because it was never ported to the internal shell. It requires fuser which is not installed by default on premerge and none of the BOLT buildbots have been online in a while.

This was actually causing a timeout because of #156484, worked around using a manual bash invocation with a wait call to ensure all of the subprocesses have exited.",2025-09-02T16:34:08Z,2025-09-03T13:42:19Z,2025-09-02T18:57:14Z,2025-09-02T18:57:14Z,True,2,0,1,26,13,2
156485,closed,[libc][NFC] Remove unused add_redirector_object and add_redirector_library in cmake.,lntue,,2025-09-02T16:28:54Z,2025-09-02T17:08:21Z,2025-09-02T17:08:17Z,2025-09-02T17:08:17Z,True,0,0,1,0,54,2
156481,closed,[Dexter] Use continue when resuming lldb execution to reach breakpoint,SLTozer,"Currently, Dexter's interface for lldb and lldb-dap has a post-step hook that checks to see whether lldb reports that we stopped because we completed a step, and if so checks to see whether the current $pc address also matches a known breakpoint whose conditions (if any) are met, and if so it requests to ""step in"", so that we ""resume"" execution, stopping again at the current address, such that lldb now reports that we have hit a breakpoint and provides the list of breakpoints that were hit.

This logic has a flaw however: the call to ""step in"" sets an implicit breakpoint on the next line. In Dexter's default stepping mode this is not an issue, as we intend to step there eventually. When we use DexContinue, however, we set a breakpoint from which we wish to continue to the next user-specified breakpoint, rather than stepping. Currently, there is a bug where Dexter sets a DexContinue breakpoint, arrives at that bp from a step, requests ""step in"" so that LLDB gives us the hit breakpoint ID, requests ""continue"" to hit the next user breakpoint, and then arrives at the next line after the continue due to the earlier ""step in"" request. This effectively negates the DexContinue command.

This patch fixes this behaviour by using ""continue"" instead of ""step in"" in the post-step hook, ensuring that no implicit breakpoint is set so that we do not incorrectly stop at the next line.

Likely fixes the issue reported at: https://github.com/llvm/llvm-project/pull/152721#issuecomment-3242907059",2025-09-02T16:05:18Z,2025-09-04T08:58:34Z,2025-09-03T12:19:06Z,2025-09-03T12:19:06Z,True,2,0,2,2,2,1
156482,closed,[RISCV] Simplify interface of RISCVAsmPrinter::lowerToMCInst [nfc],preames,"The only case which returns true is just pypassing this routine for custom logic.  Given the caller *already* has to special case this to even fall into this routine, let's just put the logic in one place.

Note that the code had a guard for a malformed attribute which is unreachable, and was converted into an assert.  The verifier enforces that the function attribute is well formed if present.",2025-09-02T16:07:19Z,2025-09-02T23:17:59Z,2025-09-02T21:56:27Z,2025-09-02T21:56:27Z,True,1,4,2,15,27,1
156480,closed,[X86] Allow AVX512 512-bit variants of AVX2 per-element i32 shift intrinsics to be used in constexpr,RKSimon,Followup to #154780,2025-09-02T15:52:59Z,2025-09-03T08:02:23Z,2025-09-03T07:58:22Z,2025-09-03T07:58:22Z,True,2,0,3,40,30,5
156479,closed,[Clang] Permit half precision in `__builtin_complex`,jhuber6,"Summary:
This was forbidden previously, which made us divergent with the GCC
implementation. Permit this by simply removing this Sema check.

Fixes: https://github.com/llvm/llvm-project/issues/156463
",2025-09-02T15:47:17Z,2025-09-02T16:16:23Z,2025-09-02T16:16:23Z,2025-09-02T16:16:23Z,True,0,0,1,24,25,5
156476,closed,[MemProf] Allow hint update on existing calls to nobuiltin hot/cold new,teresajohnson,"Explicit calls to ::operator new are marked nobuiltin and cannot be
elided or updated as they may call user defined versions. However,
existing calls to the hot/cold versions of new only need their hint
parameter value updated, which does not mutate the call.
",2025-09-02T15:24:14Z,2025-09-02T16:20:00Z,2025-09-02T16:14:15Z,2025-09-02T16:14:14Z,True,0,2,1,123,2,3
156477,closed,SimplifyCFG: Enable switch replacements in more cases,OutOfCache,"In some cases, we can replace a switch with simpler instructions or a lookup table.
For instance, if every case results in the same value, we can simply replace the switch
with that single value.

However, lookup tables are not always supported. 
Targets, function attributes and compiler options can deactivate lookup table creation.
Currently, even simpler switch replacements like the single value optimization do not
get applied, because we only enable these transformations if lookup tables are enabled.

This PR enables the other kinds of replacements, even if lookup tables are not supported.
First, it checks if the potential replacements are lookup tables.
If they are, then check if lookup tables are supported and whether to continue.
If they are not, then we can apply the other transformations.

Originally, lookup table creation was delayed until late stages of the compilation pipeline, because
it can result in difficult-to-analyze code and prevent other optimizations.
As a side effect of this change, we can also enable the simpler optimizations much earlier in the
compilation process.",2025-09-02T15:30:30Z,2025-09-09T14:24:52Z,2025-09-09T14:24:52Z,2025-09-09T14:24:52Z,True,2,5,10,537,8,2
156474,closed,[lldb][windows] use OutputDebugStringA instead of c to log events,charles-zablit,"In https://github.com/llvm/llvm-project/pull/150213 we made use of the Event Viewer on Windows (equivalent of system logging on Darwin) rather than piping to the standard output. This turned out to be too verbose in practice, as the Event Viewer is developer oriented and not user oriented.

This patch swaps the use of `ReportEventW` for `OutputDebugStringA`, allowing to use tools such as `DebugView` to record logs when we are interested in receiving them, rather than continuously writing to the buffer. Please see an example below:
<img width=""1253"" height=""215"" alt=""Screenshot 2025-09-02 at 16 07 03"" src=""https://github.com/user-attachments/assets/4a326e46-d8a4-4c99-8c96-1bee62da8d55"" />


",2025-09-02T15:22:00Z,2025-09-03T16:05:30Z,2025-09-02T17:06:16Z,2025-09-02T17:06:16Z,True,2,3,2,10,36,1
156472,closed,[X86] Clear EVEX512 feature for 128-bit and 256-bit FMA intrinsics,ckoparkar,This matches the corresponding features defined in avx512vlintrin.h.,2025-09-02T15:12:32Z,2025-09-03T10:34:51Z,2025-09-03T03:15:12Z,2025-09-03T03:15:12Z,True,3,0,1,6,2,1
156469,closed,[lldb][windows] use Windows APIs to print to the console,charles-zablit,"This is a relanding of https://github.com/llvm/llvm-project/pull/149493. The tests were failing because we were interpreting a proper file descriptor as a console file descriptor. 

This patch uses the Windows APIs to print to the Windows Console, through `llvm::raw_fd_ostream`.

This fixes a rendering issue where the characters defined in `DiagnosticsRendering.cpp` (""╰"" for instance) are not rendered properly on Windows out of the box, because the default codepage is not `utf-8`.

This solution is based on [this patch downstream](https://github.com/swiftlang/swift/pull/40632/files#diff-e948e4bd7a601e3ca82d596058ccb39326459a4751470eec4d393adeaf516977R37-R38).

rdar://156064500",2025-09-02T14:55:06Z,2025-09-03T16:05:40Z,2025-09-02T23:05:23Z,2025-09-02T23:05:23Z,True,2,0,2,41,9,2
156471,closed,[LLD][COFF] Add more `--time-trace` tags for ThinLTO linking,aganea,"In order to better see what's going on during ThinLTO linking, this PR adds more profile tags when using `--time-trace` on a `lld-link.exe` invocation. I was trying to understand what was the long delay (not multithreaded) before the actual ThinLTO multithreaded opt/codegen -- it actually was the ""Thin Link"" (the analysis phase on the summary).

After PR, linking `clang.exe`:
<img width=""3839"" height=""2026"" alt=""Capture d’écran 2025-09-02 082021"" src=""https://github.com/user-attachments/assets/bf0c85ba-2f85-4bbf-a5c1-800039b56910"" />

Linking our custom (Unreal Engine game) binary gives a completly different picture, probably because of using Unity files, and the sheer amount of input files (we're providing over 60GB of .OBJs/.LIBs). Exploring a bit all this, it turns out ""Import functions"" is dominant because of the debug info verifier (called from `llvm::UpgradeDebugInfo`):
<img width=""1940"" height=""1008"" alt=""Capture d’écran 2025-09-02 102048"" src=""https://github.com/user-attachments/assets/60b28630-7995-45ce-9e8c-13f3cb5312e0"" />

<img width=""1919"" height=""811"" alt=""Capture d’écran 2025-09-02 102227"" src=""https://github.com/user-attachments/assets/6db88dfe-a708-4f3a-b708-c3a16e26c2ef"" />

Disabling the debug info verifier by adding `/mllvm:-disable-auto-upgrade-debug-info` on the command-line brings down ThinLTO link times from **10 min 7 sec** to **7 min 13 sec**, which is quite significant:
<img width=""1930"" height=""1007"" alt=""Capture d’écran 2025-09-02 103758"" src=""https://github.com/user-attachments/assets/c0091f24-460d-49ae-944b-78c478f7d284"" />

However now what becomes dominant is parsing the metadata from the .OBJ files (that is `MetadataLoader::MetadataLoaderImpl::parseMetadata`). The total cumulated time on all threads for this (metadata parsing) is ~**2 h 6 sec**, in contrast to the cumulated ""opt"" for all units is **56 min**, and ""codegen"" is **1 h 41 min**.

---

As a separate discussion, when running ThinLTO in-process, I wonder if we couldn't parse the metadata only once for each module, instead of separately parsing all imported modules on each ThinLTO thread. Which parses each of them more than once, if my understanding is correct. This would probably require some thread synchronization gymnastics, but the impact could be quite significant. Another avenue would be to parse & retain the metadata in advance, while the ""regular LTO"" index phase is being executed (where not much happens on the other threads). @teresajohnson any opinion on all this?",2025-09-02T15:03:35Z,2025-09-05T19:28:19Z,2025-09-05T19:28:19Z,2025-09-05T19:28:19Z,True,10,14,4,166,107,12
156468,closed,[OMPIRBuilder][Debug] Remove unnecessary code.,abidh,"In the code that fix ups the debug information, we handles both the debug intrinsics and debug records. The debug intrinsics are being phased out and I recently changed mlir translation to not generate them.  This means that we should not get debug intrinsics anymore and code can be simplified by removing their handling.",2025-09-02T14:50:52Z,2025-09-03T13:10:35Z,2025-09-02T20:09:37Z,2025-09-02T20:09:37Z,True,0,2,2,2,3,1
156465,closed,[OpenACC] Add NYI for pointer/VLA arguments to recipes,erichkeane,"As mentioned in a previous review, we aren't properly generating init/destroy/copy (combiner will need to be done correctly too!) regions for recipe generation. In the case where these have 'bounds', we can do a much better job of figuring out the type and how much needs to be done, but that is going to be its own engineering effort.

For now, add an NYI as a note to come back to this.",2025-09-02T14:37:35Z,2025-09-02T16:56:56Z,2025-09-02T16:56:56Z,2025-09-02T16:56:56Z,True,0,0,1,14,0,1
156462,closed,release/21.x: [release] Correct download links for Windows on Arm packages (#156459),llvmbot,"Backport e591df63e583a39b2b8356dae7024df82d2f2204

Requested by: @DavidSpickett",2025-09-02T14:20:38Z,2025-09-03T10:08:35Z,2025-09-03T10:07:59Z,2025-09-03T10:07:59Z,True,1,0,1,1,1,1
156460,closed,[Utils] Fix AArch64 ASM regex after #148287,MacDue,"PR #148287 removed the ""\s*"" before "".Lfunc_end"" for AArch64, which broke `update_llc_test_checks.py` for a number of tests including:

- `llvm/test/CodeGen/AArch64/sme-za-exceptions.ll`
- `llvm/test/CodeGen/AArch64/win-sve.ll`

This patch adds the ""\s*"" back.",2025-09-02T14:14:12Z,2025-09-02T14:48:05Z,2025-09-02T14:48:05Z,2025-09-02T14:48:05Z,True,0,0,1,1,1,1
156459,closed,[release] Correct download links for Windows on Arm packages,DavidSpickett,"Mistakenly repeated the https://github.com... part twice.

Found while editing the links for 21.1.0.",2025-09-02T14:12:31Z,2025-09-02T14:20:46Z,2025-09-02T14:13:03Z,2025-09-02T14:13:03Z,True,2,0,1,1,1,1
156457,closed,[CodeGen] Fix failing assert in interleaved access pass,david-arm,"In the InterleavedAccessPass the function getMask assumes that shufflevector operations are always fixed width, which isn't true because we use them for splats of scalable vectors. This patch fixes the code by bailing out for scalable vectors.",2025-09-02T14:01:22Z,2025-09-03T09:55:40Z,2025-09-03T09:55:40Z,2025-09-03T09:55:40Z,True,3,2,1,20,1,2
156456,closed,[SVE ACLE] Remove explicit sve2 requirement from crypto and b16b16 builtins.,paulwalker-arm,"The instructions have no direct dependency on SVE2, nor does the code generator require it.",2025-09-02T13:49:41Z,2025-09-04T11:56:38Z,2025-09-04T11:46:56Z,2025-09-04T11:46:56Z,True,1,1,1,163,164,23
156455,closed,"[AMDGPU] si-peephole-sdwa: reuse getOne{NonDBGUse,Def} (NFC)",frederik-h,This patch changes the findSingleRegDef function from si-peephole-sdwa to reuse MachineRegisterInfo::getOneDef and findSingleRefUse to use a new MachineRegisterInfo::getOneNonDBGUse function.,2025-09-02T13:18:54Z,2025-09-03T16:03:40Z,2025-09-03T08:35:32Z,2025-09-03T08:35:32Z,True,1,0,3,11,26,3
156448,closed,[MLIR][NVVM] [NFC] Rename Tcgen05GroupKind to CTAGroupKind,durga4github,...as the cta_group::1/2 are used in non-tcgen05 Ops like TMA Loads also.,2025-09-02T11:39:52Z,2025-09-03T04:14:57Z,2025-09-03T04:14:53Z,2025-09-03T04:14:53Z,True,0,0,1,53,53,6
156450,closed,[mlir][emitc] Turn constant into CExpression,aniragil,"The `emitc.constant` op was so far left out of `emit.expression`'s as its ConstantLike trait could cause CSE to invalidate `emitc.expression` ops in two ways:

- Remove the root of a constant-only expression, leaving the expression empty.
- Simplify within the expression, violating the single-use requirement.

The first issue was recently resolved by making `emitc.expression` isolated-from-above. The second is resolved here by limiting the single-use requirement to CExpressions with side effects, as ops with no side effects can safely be cloned as needed.",2025-09-02T12:39:55Z,2025-09-08T09:34:51Z,2025-09-06T10:10:44Z,2025-09-06T10:10:44Z,True,7,0,2,126,29,7
156446,closed,[lldb] Use weak pointers instead of shared pointers in DynamicLoader,asavonic,"DynamicLoaderWindowsDYLD uses pointers to mModules to maintain a map from modules to their addresses, but it does not need to keep ""strong"" references to them. Weak pointers should be enough, and would allow modules to be released elsewhere.

Other DynamicLoader classes do not use shared pointers as well. For example, DynamicLoaderPOSIXDYLD has a similar map with weak pointers.

Actually testing for modules being completely released can be tricky. The test here is just to illustrate the case where shared pointers kept modules in DynamicLoaderWindowsDYLD and prevented them from being released. The test executes the following sequence:

  1. Create a target, load an executable and run it.

  2. Remove one module from the target. The target should be the last actual use of the module, but we have another reference to it in the shared module cache.

  3. Call MemoryPressureDetected to remove this last reference from the cache.

  4. Replace the corresponding DLL file.

LLDB memory maps DLLs, and this makes files read-only on Windows. Unless the modules are completely released (and therefore unmapped), (4) is going to fail with ""access denied"".

However, the test does not trigger the bug completely - it passes with and without the change.",2025-09-02T11:32:06Z,2025-09-04T11:36:15Z,2025-09-04T11:36:15Z,2025-09-04T11:36:14Z,True,1,0,1,70,1,6
156445,closed,[AArch64] canCreateUndefOrPoisonForTargetNode - AArch64ISD::VASHR\VLSHR\VSHL can't create undef/poison,RKSimon,"We can always fold freeze(vashr(x,c)) -> vashr(freeze(x),c) as VASHR\VLSHR\VSHL shold always have an in-range constant shift amount.

Test coverage can be tricky, so I've hijacked some computeKnownBits/ComputeNumSignBits tests to show that value tracking can still analyse the shift node as the FREEZE will have been discarded by the canCreateUndefOrPoison/isGuaranteedNotToBeUndefOrPoison logic in getFreeze().",2025-09-02T11:32:00Z,2025-09-05T08:29:00Z,2025-09-05T08:26:47Z,2025-09-05T08:26:47Z,True,7,1,5,33,13,3
156443,closed,MSP430: Do not add target specific STI member to MSP430AsmParser,arsenm,"The base class already has an STI pointer member, so use that.",2025-09-02T11:11:40Z,2025-09-03T16:04:37Z,2025-09-02T12:08:51Z,2025-09-02T12:08:51Z,True,2,0,1,2,3,1
156442,closed,AVR: Do not add target specific STI member to AVRAsmParser,arsenm,"The base class has a pointer STI member already; the target subclass
had a reference with the same name. Just use the base class field.",2025-09-02T11:11:00Z,2025-09-02T12:08:29Z,2025-09-02T12:08:27Z,2025-09-02T12:08:27Z,True,1,0,1,4,5,1
156441,closed,Allow vector zero padding intrinsics to be used in constexpr,eayus,"Fix #156346 by marking intrinsics as constexpr. A test has been added for each intrinsic.

The following instrinsics have been modified:
```
_mm256_zextpd128_pd256
_mm512_zextpd128_pd512
_mm512_zextpd256_pd512
_mm256_zextph128_ph256
_mm512_zextph128_ph512
_mm512_zextph256_ph512
_mm256_zextps128_ps256
_mm512_zextps128_ps512
_mm512_zextps256_ps512
_mm256_zextsi128_si256
_mm512_zextsi128_si512
_mm512_zextsi256_si512
```",2025-09-02T11:06:42Z,2025-09-02T13:33:28Z,2025-09-02T13:33:10Z,2025-09-02T13:33:10Z,True,7,0,2,33,30,6
156438,closed,[VPlan] Remove single-operand dead VPPhi,artagnon,"VPPhi with one operand is handled by simplifyRecipe, while removeDeadRecipes handles VPPhis with two operands. Consolidate this handling.",2025-09-02T10:31:57Z,2025-09-08T08:32:45Z,2025-09-08T08:28:01Z,,False,2,7,1,154,238,24
156437,closed,[AMDGPU][LIT][NFC] Adding -mtriple for AMDGPUAnnotateUniformValues Pass tests,vg0204,"It specifies the target machine as AMDGPU for AMDGPUAnnotateUniformValues pass-related test (that uses UA). Before in its absense, the UA would consider everything Uniform resulting in setting metadata incorrectly for AMDGPU. Now, after specifying the AMDGPU, the UA would be rightful sets the right metadata as the test gets commpiled for AMDGPU.",2025-09-02T10:28:42Z,2025-09-08T08:48:53Z,2025-09-03T10:02:28Z,2025-09-03T10:02:28Z,True,1,17,4,2,2,1
156430,closed,release/21.x: [X86] getScalarMaskingNode - if the mask is zero just return the blended passthrough and preserved source value (#153575),llvmbot,"Backport ba707db840516b2246c6a31ef8a96e41939deeb5

Requested by: @nikic",2025-09-02T08:56:11Z,2025-09-03T10:09:15Z,2025-09-03T10:08:41Z,2025-09-03T10:08:41Z,True,3,0,1,33,7,3
156429,closed,[AArch64] Combine SEXT_INREG(CSET) to CSETM.,rj-jesus,"Add the following patterns to performSignExtendInRegCombine:
* SIGN_EXTEND_INREG (CSEL 0, 1, cc), i1 --> CSEL 0, -1, cc
* SIGN_EXTEND_INREG (CSEL 1, 0, cc), i1 --> CSEL -1, 0, cc

The combined forms can be matched to a CSETM.

I'd like to eventually propose enabling `convertSelectOfConstantsToMath`, assuming others think that would be a good idea, primarily to improve a few cases such as [this](https://godbolt.org/z/hz744KzW1). However, doing so currently introduces a few code gen regressions. This patch fixes some of them, and hopefully is a worthwhile addition on its own (please let me know otherwise).",2025-09-02T08:55:17Z,2025-09-03T11:07:06Z,2025-09-03T11:07:02Z,2025-09-03T11:07:02Z,True,0,6,2,24,6,3
156426,closed,[LoopInterchange] Improve some tests (NFC),kasuga-fj,"This patch addresses issues in existing test cases that I discovered while working on DependenceAnalysis.

Details:

- Add `inbounds` to certain `getelementptr` instructions
- Add `nuw`/`nsw` to the instructions that update induction variables
- Fix incorrect type argument in `getelementptr`.",2025-09-02T08:44:16Z,2025-09-02T11:11:25Z,2025-09-02T10:20:32Z,2025-09-02T10:20:32Z,True,0,2,2,17,17,2
156422,closed,[MLIR][Affine] Check dependences during MDG init,bondhugula,"Check affine dependences precisely during MDG init before adding edges.
We were conservatively only checking for memref-level conflicts.

Leads to more/better fusion as a result.

Fixes: https://github.com/llvm/llvm-project/issues/156421
",2025-09-02T08:24:49Z,2025-09-09T09:21:24Z,2025-09-09T09:21:24Z,2025-09-09T09:21:24Z,True,1,27,1,135,8,3
156420,closed,AMDGPU: Add agpr variants of multi-data DS instructions,arsenm,"The instruction definitions for loads and stores do not
accurately model the operand constraints of loads and stores
with AGPRs. They use AV register classes, plus a hack
a hack in getRegClass/getOpRegClass to avoid using AGPRs or
AV classes with the multiple operand cases, but it did not
consider the 3 operand case.

Model this correctly by using separate all-VGPR and all-AGPR
variants for the cases with multiple data operands.

This does regress the assembler errors on gfx908 for the
multi-operand cases. It now reports a generic operand
invalid error for GPU instead of the specific message
that agpr loads and stores aren't supported.

In the future AMDGPURewriteAGPRCopyMFMA should be taught
to replace the VGPR forms with the AGPR ones.

Most of the diff is fighting the DS pseudo structure. The
mnemonic was being used as the key to SIMCInstr, which is a
collision in the AGPR case. We also need to go out of our way
to make sure we are using the gfx9+ variants of the pseudos
without the m0 use. The DS multiclasses could use a lot of
cleanup.

Fixes #155777",2025-09-02T07:56:43Z,2025-09-04T00:13:39Z,2025-09-04T00:13:36Z,2025-09-04T00:13:36Z,True,2,1,1,697,509,6
156418,closed,[AMDGPU][gfx1250] Add 128B cooperative atomics,Pierre-vh,"- Add clang built-ins + sema/codegen
- Add IR Intrinsic + verifier
- Add DAG/GlobalISel codegen for the intrinsics
- Add lowering in SIMemoryLegalizer using a MMO flag.",2025-09-02T07:36:32Z,2025-09-10T08:27:11Z,2025-09-04T09:19:26Z,2025-09-04T09:19:26Z,True,3,5,3,3077,4,24
156416,closed,[libc++] Add ABI tests for introducing _LIBCPP_COMPRESSED_ELEMENT,philnik777,"#134253 refactors a few classes to use `[[no_unique_address]]` instead of the EBO. This adds tests to ensure there are no ABI breaks.
",2025-09-02T07:25:48Z,2025-09-05T02:20:09Z,2025-09-04T06:44:14Z,2025-09-04T06:44:14Z,True,4,4,1,197,9,3
156407,closed,[AArch64] Guard fptosi+sitofp patterns with one use checks.,davemgreen,"Otherwise we can end up with more instructions, needing to emit both `fcvtzu w0, s0` and `fcvtzu s0, s0`.",2025-09-02T06:08:50Z,2025-09-03T07:21:31Z,2025-09-03T07:21:28Z,2025-09-03T07:21:28Z,True,1,0,1,16,18,2
156406,closed,AMDGPU: Handle true16 disassembly of ds_write_b8/b16,arsenm,"This avoids an inconsistency in pseudo definitions I
ran into for a later patch.",2025-09-02T06:07:53Z,2025-09-02T15:40:32Z,2025-09-02T15:40:32Z,,False,3,2,1,118,81,5
156405,closed,AMDGPU: Reorder arguments of DS_Real_gfx12 (NFC),arsenm,This helps shrink the diff in a future change.,2025-09-02T06:07:17Z,2025-09-02T23:58:41Z,2025-09-02T23:58:39Z,2025-09-02T23:58:39Z,True,2,0,3,87,70,1
156403,closed,[flang] Avoid unnecessary looping for constants,Saldivarcher,"Going through and doing `convertToAttribute` for all elements, if they are the same can be costly. If the elements are the same, we can just call `convertToAttribute` once.

This does give us a significant speed-up:
```console
$ hyperfine --warmup 1 --runs 5 ./slow.sh ./fast.sh
Benchmark 1: ./slow.sh
  Time (mean ± σ):      1.606 s ±  0.014 s    [User: 1.393 s, System: 0.087 s]
  Range (min … max):    1.591 s …  1.628 s    5 runs

Benchmark 2: ./fast.sh
  Time (mean ± σ):     452.9 ms ±   7.6 ms    [User: 249.9 ms, System: 83.3 ms]
  Range (min … max):   443.9 ms … 461.7 ms    5 runs

Summary
  ./fast.sh ran
    3.55 ± 0.07 times faster than ./slow.sh
```

Fixes #125444",2025-09-02T04:55:11Z,2025-09-03T09:24:22Z,2025-09-03T09:24:21Z,2025-09-03T09:24:21Z,True,2,4,1,21,1,1
156419,closed,AMDGPU: Fix true16 d16 entry table for DS pseudos,arsenm,"This should be trying to use the _gfx9 variants of DS pseudos,
not the base form with m0 uses.",2025-09-02T07:56:42Z,2025-09-03T16:04:28Z,2025-09-03T00:45:11Z,2025-09-03T00:45:11Z,True,2,2,1,3,2,1
156402,closed,AMDGPU: Fix adding m0 uses to gfx94/gfx12 ds atomics,arsenm,"This was using the legacy multiclass which assumes the base form
has an m0 use. Use the versions which assume no m0 as the base name.
Most of the diff is shuffling around the pattern classes to avoid trying
to match the nonexistent m0-having form.",2025-09-02T04:53:38Z,2025-09-02T23:58:24Z,2025-09-02T23:58:22Z,2025-09-02T23:58:22Z,True,2,0,2,61,55,1
156399,closed,AMDGPU: Fix adding m0 uses to gfx12 ds atomics,arsenm,"The DS multiclasses are poorly named. The base forms
include the legacy pseudo with the m0 implicit use, plus
a _gfx9 suffixed version without. The _gfx9 multiclass
only defines an unsuffixed version without m0, so use tha
one.

Fixes unnecessarily depending on m0 for ds_cond_sub_rtn_u32.",2025-09-02T03:32:18Z,2025-09-02T08:16:54Z,2025-09-02T08:16:51Z,2025-09-02T08:16:51Z,True,2,0,1,4,4,1
156423,closed,"[llvm-exegesis] [AArch64] Reland Resolving ""not all operands are initialized by snippet generator"" ",lakshayk-nv,"### Reland #142529 (Resolving ""not all operands are initialized by snippet generator"")

Introduced changes in implementation of `randomizeTargetMCOperand()` for AArch64 that omitting `OPERAND_SHIFT_MSL`, `OPERAND_PCREL` to an immediate value of 264 and 8 respectively.
PS: Omitting `MCOI::OPERAND_FIRST_TARGET/llvm:AArch64:OPERAND_IMPLICIT_IMM_0` similarly, to value 0. It was low hanging change thus added in this PR only.

For any future operand type of AArch64 if not initialised will exit with error ""`Unimplemented operand type: MCOI::OperandType:<#Number>`"".

#### [Reland Updates]

Updated `tools/llvm-exegesis/AArch64/error-resolution.s` which caused problem.
Test case was failing when there is uninitialised operands error coming from secondary/consumer instruction used by exegesis in latency mode required to chain up the assembly to ensure serial execution.

i.e.  We get error message like `UMOVvi16_idx0: Not all operands were initialized by the snippet generator for <<<any opcode other than UMOVvi16_idx0>>> opcode.` but test case want to check like 
`# UMOVvi16_idx0_latency: ---`. Thus the testcase fails.


```+ /llvm-project/build/bin/FileCheck /llvm-project/llvm/test/tools/llvm-exegesis/AArch64/error-resolution.s --check-prefix=UMOVvi16_idx0_latency
/llvm-project/llvm/test/tools/llvm-exegesis/AArch64/error-resolution.s:65:26: error: UMOVvi16_idx0_latency: expected string not found in input
# UMOVvi16_idx0_latency: ---
                         ^
<stdin>:1:1: note: scanning from here
UMOVvi16_idx0: Not all operands were initialized by the snippet generator for LD1W_D_IMM opcode.
^

Input file: <stdin>
Check file: /llvm-project/llvm/test/tools/llvm-exegesis/AArch64/error-resolution.s

-dump-input=help explains the following input dump.

Input was:
<<<<<<
          1: UMOVvi16_idx0: Not all operands were initialized by the snippet generator for LD1W_D_IMM opcode. 
check:65     X~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ error: no match found
>>>>>>

--

********************
********************
Failed Tests (1):
  LLVM :: tools/llvm-exegesis/AArch64/error-resolution.s
```

#### [Why it fails (only sometimes)]
Exegesis in latency mode require the generated assembly to be chained to ensure serial execution,
For this exegesis add an additional consumer instruction for some instruction, which is chosen via a random seed.
Thus, it randomly fails whenever there is secondary consumer instruction (which is unsupported/throws error) added in generated assembly.

Please review: @sjoerdmeijer @davemgreen @boomanaiden154 @abhilash1910 
Thanks!",2025-09-02T08:36:27Z,2025-09-03T13:02:31Z,2025-09-03T13:02:31Z,2025-09-03T13:02:31Z,True,0,4,31,135,2,5
156400,closed,AMDGPU: Try to constrain av registers to VGPR to enable ds_write2 formation,arsenm,"In future changes we will have more AV_ virtual registers, which currently
block the formation of write2. Most of the time these registers can simply
be constrained to VGPR, so do that.

Also relaxes the constraint in flat merging case. We already have the necessary
code to insert copies to the original result registers, so there's no point
in avoiding it.

Addresses the easy half of #155769",2025-09-02T03:33:54Z,2025-09-03T00:48:23Z,2025-09-03T00:48:22Z,2025-09-03T00:48:22Z,True,2,2,2,289,36,5
156397,closed,[RISCV] Simplify code gen for riscv_vector_builtin_cg.inc [NFC],kito-cheng,"For each intrinsic with ManualCodegen block will generate something like below:

```cpp
  SegInstSEW = 0;
  ...
  if (SegInstSEW == (unsigned)-1) {
    auto PointeeType = E->getArg(4294967295)->getType()->getPointeeType();
    SegInstSEW = llvm::Log2_64(getContext().getTypeSize(PointeeType));
  }

```

But actually SegInstSEW is table-gen-time constant, so can remove that if-check and directly use the constant.

This change reduce riscv_vector_builtin_cg.inc around 6600 lines (30913 to 24305) which is around 20% reduction, however seems this isn't impact the build time much since the redundant dead branch is almost will optimized away by compiler in early stage.",2025-09-02T02:58:14Z,2025-09-03T07:07:23Z,2025-09-03T01:28:36Z,2025-09-03T01:28:36Z,True,2,0,1,15,11,1
156394,closed,[InstCombine] Remove unnecessary casts (NFC),kazutakahirata,"These variables are already non const.
",2025-09-02T02:36:52Z,2025-09-02T06:13:33Z,2025-09-02T06:12:07Z,2025-09-02T06:12:07Z,True,1,0,1,1,3,1
156395,closed,[llvm] Proofread LangRef.rst,kazutakahirata,"This patch replaces ""i.e. "" with ""i.e., "" to get mechanical changes
out of the way.
",2025-09-02T02:37:14Z,2025-09-02T06:13:46Z,2025-09-02T06:12:15Z,2025-09-02T06:12:15Z,True,1,0,1,39,39,1
156392,closed,[ADT] Simplify StringMapIterBase (NFC),kazutakahirata,"In open-adressing hash tables, begin() needs to advance to the first
valid element.  We don't need to do the same for any other operations
like end(), find(), and try_emplace().

The problem is that the constructor of StringMapIterBase says:

  bool NoAdvance = false

This increases the burden on the callers because most places need to
pass true for NoAdvance, defeating the benefit of the default
parameter.

This patch fixes the problem by changing the name and default to:

  bool Advance = false

and adjusting callers.  Again, begin() is the only caller that
specifies this parameter.

This patch fixes a ""latent bug"" where try_emplace() was requesting
advancing even on a successful insertion.  I say ""latent"" because the
request is a no-op on success.
",2025-09-02T02:36:16Z,2025-09-02T16:21:30Z,2025-09-02T16:21:19Z,2025-09-02T16:21:19Z,True,1,0,1,11,15,1
156391,closed,[ADT] Remove an obsolete forward declaration (NFC),kazutakahirata,"We just removed CastInfoPointerUnionImpl in:

  commit 2d216a94f3c84037cdfb3fa5def9efb020a88537
  Author: Kazu Hirata <kazu@google.com>
  Date:   Mon Sep 1 08:04:49 2025 -0700

This patch removes the obsolete forward declaration.
",2025-09-02T02:35:46Z,2025-09-02T06:13:18Z,2025-09-02T06:12:00Z,2025-09-02T06:12:00Z,True,1,0,1,0,3,1
156388,closed,AMDGPU: Mark DS instructions as fixed size,arsenm,,2025-09-02T02:31:21Z,2025-09-02T09:29:36Z,2025-09-02T09:29:35Z,2025-09-02T09:29:34Z,True,3,0,1,1,0,1
156390,closed,[ADT] Improve a comment in APInt.h,kazutakahirata,"We don't have to remove this constructor if we are worried about
accidental binding.  We can use ""= delete"" instead.  Also, this patch
replaces ""captured by"" with ""bound to"" as that is more precise.
",2025-09-02T02:35:21Z,2025-09-02T16:21:23Z,2025-09-02T16:21:10Z,2025-09-02T16:21:10Z,True,1,0,1,3,3,1
156387,closed,AMDGPU: Switch merge-load-store-agpr test to generated checks,arsenm,Also had to fix missing --- separators between functions,2025-09-02T02:29:23Z,2025-09-02T03:09:46Z,2025-09-02T03:09:45Z,2025-09-02T03:09:45Z,True,2,0,1,42,22,1
156389,closed,AMDGPU: Avoid unnecessary copy of DebugLoc,arsenm,,2025-09-02T02:32:35Z,2025-09-02T02:48:39Z,2025-09-02T02:48:33Z,,False,3,1,1,1,1,1
156386,closed,"[Reland] ""[RISCV][TTI] Implement getAddressComputationCost() in RISCV TTI. #149955""",ElvisWang123,"This patch implements the `getAddressComputationCost()` in RISCV TTI which
make the gather/scatter with address calculation more expansive that
stride cost.

Note that the only user of `getAddressComputationCost()` with vector
type is in `VPWidenMemoryRecipe::computeCost()`. So this patch make some
LV tests changes.

I've checked the tests changes in LV and seems those changes can be
divided into two groups.
 * gather/scatter with uniform vector ptr, seems can be optimized to
 masked.load.
 * can optimize to stride load/store.

----
After #155739 landed, the assertion (cost mis-aligned) is fixed.
I've tested llvm-test-suite w/ rva23u64 and rva23u64_zvl1024b locally and no assertion occurred.",2025-09-02T02:25:33Z,2025-09-02T03:43:36Z,2025-09-02T03:43:27Z,2025-09-02T03:43:27Z,True,1,0,2,48,206,6
156385,closed,[Headers][X86] Allow FMA intrinsics to be used in constexpr,ckoparkar,"Fixes #155265

Add constexpr support for the following:

_mm512_fmadd_pd _mm512_mask_fmadd_pd _mm512_mask3_fmadd_pd _mm512_maskz_fmadd_pd _mm512_fmadd_ps _mm512_mask_fmadd_ps _mm512_mask3_fmadd_ps _mm512_maskz_fmadd_ps _mm_mask_fmadd_pd _mm_mask3_fmadd_pd _mm_maskz_fmadd_pd _mm_mask_fmadd_ps _mm_mask3_fmadd_ps _mm_maskz_fmadd_ps _mm256_mask_fmadd_pd _mm256_mask3_fmadd_pd _mm256_maskz_fmadd_pd _mm256_mask_fmadd_ps _mm256_mask3_fmadd_ps _mm256_maskz_fmadd_ps

_mm512_fmsub_pd _mm512_mask_fmsub_pd _mm512_mask3_fmsub_pd _mm512_maskz_fmsub_pd _mm512_fmsub_ps _mm512_mask_fmsub_ps _mm512_mask3_fmsub_ps _mm512_maskz_fmsub_ps _mm_mask_fmsub_pd _mm_mask3_fmsub_pd _mm_maskz_fmsub_pd _mm_mask_fmsub_ps _mm_mask3_fmsub_ps _mm_maskz_fmsub_ps _mm256_mask_fmsub_pd _mm256_mask3_fmsub_pd _mm256_maskz_fmsub_pd _mm256_mask_fmsub_ps _mm256_mask3_fmsub_ps _mm256_maskz_fmsub_ps

_mm512_fnmadd_pd _mm512_mask_fnmadd_pd _mm512_mask3_fnmadd_pd _mm512_maskz_fnmadd_pd _mm512_fnmsub_pd _mm512_mask_fnmsub_pd _mm512_mask3_fnmsub_pd _mm512_maskz_fnmsub_pd _mm_mask_fnmadd_pd _mm_mask3_fnmadd_pd _mm_maskz_fnmadd_pd _mm_mask_fnmadd_ps _mm_mask3_fnmadd_ps _mm_maskz_fnmadd_ps _mm256_mask_fnmadd_pd _mm256_mask3_fnmadd_pd _mm256_maskz_fnmadd_pd _mm256_mask_fnmadd_ps _mm256_mask3_fnmadd_ps _mm256_maskz_fnmadd_ps

_mm512_fnmadd_ps _mm512_mask_fnmadd_ps _mm512_mask3_fnmadd_ps _mm512_maskz_fnmadd_ps _mm512_fnmsub_ps _mm512_mask_fnmsub_ps _mm512_mask3_fnmsub_ps _mm512_maskz_fnmsub_ps _mm_mask_fnmsub_pd _mm_mask3_fnmsub_pd _mm_maskz_fnmsub_pd _mm_mask_fnmsub_ps _mm_mask3_fnmsub_ps _mm_maskz_fnmsub_ps _mm256_mask_fnmsub_pd _mm256_mask3_fnmsub_pd _mm256_maskz_fnmsub_pd _mm256_mask_fnmsub_ps _mm256_mask3_fnmsub_ps _mm256_maskz_fnmsub_ps",2025-09-02T02:25:33Z,2025-09-03T16:32:28Z,2025-09-03T16:29:08Z,2025-09-03T16:29:08Z,True,4,10,5,571,677,4
156384,closed,release/21.x: [LoongArch] Fix broadcast load with extension. (#155960),llvmbot,"Backport 2320529ff77338cd0cb9786b8f195d611edcae77

Requested by: @tangaac",2025-09-02T01:57:15Z,2025-09-03T10:10:44Z,2025-09-03T10:10:05Z,2025-09-03T10:10:05Z,True,3,0,1,58,5,3
156383,closed,[libunwind][test] set fed test to require x86 as others arch may have cross toolchain build,yingcong-wu,"In https://github.com/llvm/llvm-project/pull/154902, the test failed with llvm-clang-win-x-aarch64(it is a cross-build, which builds on Windows and run on Linux, ""Win to Aarch64 Linux Ubuntu Cross Toolchain""), and objdump is not available on Windows(the build env). 
Set to require x86 Linux instead.",2025-09-02T01:45:29Z,2025-09-10T01:06:48Z,2025-09-02T11:30:44Z,2025-09-02T11:30:44Z,True,3,2,4,3,1,1
156382,closed,[flang] Fixed a crash in CheckReduce(),eugeneepshteyn,"Added extra checks to fix the crash.

Fixes #156167",2025-09-02T01:34:53Z,2025-09-02T17:54:05Z,2025-09-02T17:54:02Z,2025-09-02T17:54:02Z,True,1,0,3,7,2,2
156380,closed,[clang] Make vector cast intrinsics constexpr,vedantjk,"Enable constexpr usage of vector bitcast intrinsics by changing from `__DEFAULT_FN_ATTRS*` to
  `__DEFAULT_FN_ATTRS*_CONSTEXPR` attributes.

  **Updated intrinsics:**
  - AVX-512 bitcast intrinsics: `_mm512_castpd_ps`, `_mm512_castps_pd`, `_mm512_cast*_si512`,
  `_mm512_castsi512_*`
  - AVX-512 truncation casts: `_mm512_cast*512_*128/256`
  - AVX-512 FP16 bitcast intrinsics: all `_mm*_castph_*` and `_mm*_cast*_ph` functions
  - AVX-512 FP16 truncation casts: `_mm*_castph*_ph*`

 github.com/llvm/llvm-project/issues/156348",2025-09-02T00:53:19Z,2025-09-02T00:55:35Z,2025-09-02T00:55:35Z,,False,2,0,0,0,0,0
156378,closed,[NFC][libclc] Define _CLC_DEF_WEAK and replace _CLC_DEF_ldexp with it,wenju-he,_CLC_DEF_WEAK can be used in our downstream libclc to allow overriding generic __clc_tgamma implementation.,2025-09-02T00:29:06Z,2025-09-04T00:13:56Z,2025-09-04T00:13:49Z,,False,4,0,1,6,6,2
156377,closed,[clang][Modules] Permit Link Declarations in Submodule Declarations in Module Maps,qiongsiwu,"https://github.com/llvm/llvm-project/pull/148959 added two checks that restricts the uses of link declarations. It is later discovered that the Swift project uses link declarations in submodules extensively on Windows. This PR removes the check against link declarations in submodules.

This PR also fixes a logic bug where the incorrect link decl is returned if we turn off the warnings with the `-Wno` arguments. 

rdar://159467837",2025-09-01T23:15:19Z,2025-09-08T15:57:29Z,2025-09-08T15:57:29Z,,False,3,4,4,13,22,3
156375,closed,[MC][DecoderEmitter] Fix build warning: explicit specialization cannot have a storage class,jurahul,"Move `InsnBitWidth` template into anonymous namespace in the generated code and move template specialization of `InsnBitWidth` to anonymous namespace as well, and drop `static` for them. This makes `InsnBitWidth` completely private to each target and fixes the ""explicit specialization cannot have a storage class"" warning as well as any potential linker errors if `InsnBitWidth` is kept in the `llvm::MCD` namespace.",2025-09-01T21:35:44Z,2025-09-02T14:28:41Z,2025-09-02T14:28:37Z,2025-09-02T14:28:37Z,True,14,0,2,19,16,4
156376,closed,Exclude some run options on AIX.,DanielCChen,Those excluded run options failed on AIX.,2025-09-01T23:06:28Z,2025-09-02T18:41:00Z,2025-09-02T18:40:54Z,2025-09-02T18:40:54Z,True,1,0,1,4,4,1
156374,closed,[mlir][ptr] Extend `ptr_add` operation to support shaped operands,fabianmcg,"This patch extends `ptr_add` to work with shaped types with value semantics, both for the offsets and base.

Concretely this patch makes the following changes:
- Supports scalar-to-scalar, scalar-to-shaped, shaped-to-scalar, and shaped-to-shaped combinations
- Adds InferTypeOpInterface for automatic result type deduction
- Adds tests for LLVM IR translation with vector operands

Example:
```mlir
func.func @ptr_add_tensor_2d(%ptrs: tensor<4x8x!ptr.ptr<#ptr.generic_space>>, %offsets: tensor<4x8xindex>) -> tensor<4x8x!ptr.ptr<#ptr.generic_space>> {
  %res = ptr.ptr_add %ptrs, %offsets : tensor<4x8x!ptr.ptr<#ptr.generic_space>>, tensor<4x8xindex>
  %res1 = ptr.ptr_add nuw %ptrs, %offsets : tensor<4x8x!ptr.ptr<#ptr.generic_space>>, tensor<4x8xindex>
  return %res : tensor<4x8x!ptr.ptr<#ptr.generic_space>>
}
```

The motivation behind this patch is to lay the groundwork for enabling `triton` styled loads and stores, and their variants. ",2025-09-01T21:13:48Z,2025-09-03T15:50:22Z,2025-09-03T15:50:21Z,2025-09-03T15:50:21Z,True,4,6,4,222,43,8
156373,closed,[HLSL][DirectX] Add support for `rootsig` as a target environment,inbelic,"This pr implements support for a root signature as a target, as specified [here](https://github.com/llvm/wg-hlsl/blob/main/proposals/0029-root-signature-driver-options.md#target-root-signature-version).

This is implemented in the following steps:
1. Add `rootsignature` as a shader model environment type and define `rootsig` as a `target_profile`. Only valid as versions 1.0 and 1.1
2. Updates `HLSLFrontendAction` to invoke a special handling of constructing the `ASTContext` if we are considering an `hlsl` file and with a `rootsignature` target
3. Defines the special handling to minimally instantiate the `Parser` and `Sema` to insert the `RootSignatureDecl`
4. Updates `CGHLSLRuntime` to emit the constructed root signature decl as part of `dx.rootsignatures` with a `null` entry function
5. Updates `DXILRootSignature` to handle emitting a root signature without an entry function
6. Updates `ToolChains/HLSL` to invoke `only-section=RTS0` to strip any other generated information

Resolves: https://github.com/llvm/llvm-project/issues/150286.

##### Implementation Considerations
Ideally we could invoke this as part of `clang-dxc` without the need of a source file. However, the initialization of the `Parser` and `Lexer` becomes quite complicated to handle this.

Technically, we could avoid generating any of the extra information that is removed in step 6. However, it seems better to re-use the logic in `llvm-objcopy` without any need for additional custom logic in `DXILRootSignature`.",2025-09-01T21:12:34Z,2025-09-09T15:14:58Z,2025-09-09T15:14:58Z,2025-09-09T15:14:58Z,True,1,10,17,276,54,24
156371,closed,"Revert ""[libc] Migrate from baremetal stdio.h to generic stdio.h""",saturn691,Reverts llvm/llvm-project#152748,2025-09-01T20:40:00Z,2025-09-01T20:47:29Z,2025-09-01T20:47:28Z,2025-09-01T20:47:28Z,True,1,0,1,357,280,18
156372,closed,[DirectX] Add `only-section` to `llvm-objcopy` for `DXContainer`,inbelic,"This pr implements the `only-section` option for a `DXContainer` object in `llvm-objcopy`.

It extends the base `removeParts` of the minimal object representation of a  `DXContainerObject`.

This a pre-requisite step to implement https://github.com/llvm/llvm-project/issues/150286 as a way to strip all other information away.",2025-09-01T20:41:48Z,2025-09-08T15:45:41Z,2025-09-08T15:45:41Z,2025-09-08T15:45:41Z,True,2,7,3,167,8,4
156370,closed,[LLDB][NativePDB] Complete array member types in AST builder,Nerixyz,"In native PDB, types of array members were not completed when completing a struct. This lead to an assertion failure later when trying to print a variable of the struct (`Shell/SymbolFile/PDB/udt-layout.test`, see #114906).
The following shows the issue:
```cpp
struct G {
  int foo = 1;
};
struct H {
  G g[2];
};
H h;
```
Running `target variable h` would result in a request to complete `H`. This will run the `UdtRecordCompleter` over the struct fields. When it encounters a data member, [it tries to complete its type](https://github.com/llvm/llvm-project/blob/bf4486eb29c3009ddf68968b021c6fd98e3c2d52/lldb/source/Plugins/SymbolFile/NativePDB/UdtRecordCompleter.cpp#L260). This would previously only complete records. However, types of constant array members (in our case `G`) need to be completed as well, as they are required to compute the layout of the record.

With this PR, `PdbASTBuilder::CreateArrayType` will also complete the types of constant array members.

To hit the assertion, the layout needs to be requested (e.g. by getting a child member). That's why I used both `target variable` and `expression`.

Unfortunately, this doesn't allow `Shell/SymbolFile/PDB/udt-layout.test` to run with the native plugin yet, because it checks for the order in which base classes are printed. The DIA plugin puts virtual bases first, while the native plugin puts them last (where they are in memory).",2025-09-01T19:44:39Z,2025-09-02T20:53:45Z,2025-09-02T20:53:45Z,2025-09-02T20:53:45Z,True,4,2,5,115,45,4
156369,closed,[Headers][X86] Allow SSE2/AVX2/AVX512F/AVX512BW/AVX512DQ integer multiply intrinsics to be used in constexpr,eulerkochy,Fixes #155411 ,2025-09-01T19:43:43Z,2025-09-02T09:38:53Z,2025-09-02T09:38:34Z,2025-09-02T09:38:34Z,True,3,0,3,54,38,16
156367,closed,[DependenceAnalysis] Improve debug messages,sebpop,,2025-09-01T18:31:52Z,2025-09-03T08:35:21Z,2025-09-02T20:25:02Z,2025-09-02T20:25:02Z,True,3,5,1,34,12,1
156368,closed,"[mlir][ptr] Add `gather`, `masked_load`, `masked_store`, and `scatter` ops",fabianmcg,"This patch adds the `gather`, `masked_load`, `masked_store`, and `scatter` operations to the `ptr` dialect. It also implements translation from these operations to LLVM intrinsics:
- ptr.gather -> llvm.masked.gather
- ptr.masked_load -> llvm.masked.load  
- ptr.masked_store -> llvm.masked.store
- ptr.scatter -> llvm.masked.scatter

Example:
```mlir
llvm.func @mixed_masked_ops_address_spaces(%ptr: !ptr.ptr<#llvm.address_space<3>>, %ptrs: vector<4x!ptr.ptr<#llvm.address_space<3>>>, 
                                          %mask: vector<4xi1>, %value: vector<4xf64>, %passthrough: vector<4xf64>) {
  %0 = ptr.gather %ptrs, %mask, %passthrough alignment = 8 : vector<4x!ptr.ptr<#llvm.address_space<3>>> -> vector<4xf64>
  ptr.scatter %value, %ptrs, %mask alignment = 8 : vector<4xf64>, vector<4x!ptr.ptr<#llvm.address_space<3>>>
  %1 = ptr.masked_load %ptr, %mask, %passthrough alignment = 8 : !ptr.ptr<#llvm.address_space<3>> -> vector<4xf64>
  ptr.masked_store %value, %ptr, %mask alignment = 8 : vector<4xf64>, !ptr.ptr<#llvm.address_space<3>>
  llvm.return
}
```
Translates to:
```llvm
define void @mixed_masked_ops_address_spaces(ptr addrspace(3) %0, <4 x ptr addrspace(3)> %1, <4 x i1> %2, <4 x double> %3, <4 x double> %4) {
  %6 = call <4 x double> @llvm.masked.gather.v4f64.v4p3(<4 x ptr addrspace(3)> %1, i32 8, <4 x i1> %2, <4 x double> %4)
  call void @llvm.masked.scatter.v4f64.v4p3(<4 x double> %3, <4 x ptr addrspace(3)> %1, i32 8, <4 x i1> %2)
  %7 = call <4 x double> @llvm.masked.load.v4f64.p3(ptr addrspace(3) %0, i32 8, <4 x i1> %2, <4 x double> %4)
  call void @llvm.masked.store.v4f64.p3(<4 x double> %3, ptr addrspace(3) %0, i32 8, <4 x i1> %2)
  ret void
}
```",2025-09-01T19:29:18Z,2025-09-03T14:45:33Z,2025-09-03T14:45:31Z,2025-09-03T14:45:31Z,True,2,9,3,668,15,6
156366,closed,[llvm-reduce] Treat CallBrInst as Branch,XChy,Fixes the bug of the missing terminator for CallBrInst. Crash when I reduce https://github.com/llvm/llvm-project/issues/155807.,2025-09-01T18:16:05Z,2025-09-02T06:01:36Z,2025-09-02T06:01:36Z,2025-09-02T06:01:36Z,True,0,2,2,45,1,2
156362,closed,[AArch64] Correctly disassemble TSB instruction,s-barannikov,"TSB instruction has one operand, but the generated disassembler is unable to decode it since the operand is not encoded into the instruction. AArch64InstPrinter has a special case for this -- if the instruction being printed is TSB, it prints the only possible operand value, regardless of whether the operand is present or not.

With the changes proposed by #156358, the operand can now be decoded automatically and the workaround is no longer required.",2025-09-01T18:05:44Z,2025-09-05T11:41:23Z,2025-09-05T11:35:56Z,2025-09-05T11:35:56Z,True,3,0,1,2,10,3
156361,closed,[AVR] Remove workarounds for instructions using Z register (NFCI),s-barannikov,The generated disassembler can now correctly decode these instructions. All we need to do is to add `bits<0> z` to their encodings and provide a decoder method that adds Z register to the instruction.,2025-09-01T18:05:42Z,2025-09-04T16:04:57Z,2025-09-04T16:04:50Z,2025-09-04T16:04:50Z,True,2,2,1,11,20,5
156363,closed,[AArch64] Provide a custom decoder for LDR_ZA/STR_ZA,s-barannikov,"These instructions encode two operands in the same field. Instead of fixing them after they have been incorrectly decoded, provide a custom decoder.

This will allow to remove `-ignore-non-decodable-operands` option from AArch64/CMakeLists.txt, see #156358 for the context.
",2025-09-01T18:05:46Z,2025-09-05T13:01:41Z,2025-09-05T12:43:00Z,2025-09-05T12:43:00Z,True,3,0,2,27,10,3
156360,closed,[RISCV] Remove post-decoding instruction adjustments,s-barannikov,"Some instructions implicitly define/use X2 (SP) register, but instead of being present in the Defs/Uses lists, it is sometimes modeled as an explicit operand with SP register class.
Since the operand is not encoded into the instruction, it cannot be disassembled, and we have `RISCVDisassembler::addSPOperands()` that addresses the issue by mutating the (incompletely) decoded instruction.

This change makes the operand decodable by adding `bits<0>` field for that operand to relevant instruction encodings and removes `RISCVDisassembler::addSPOperands()`.
",2025-09-01T18:05:41Z,2025-09-05T11:39:08Z,2025-09-04T16:02:34Z,2025-09-04T16:02:34Z,True,2,0,1,19,22,5
156359,closed,[Hexagon] Remove post-decoding instruction adjustments,s-barannikov,These instructions can now be fully decoded automatically.,2025-09-01T18:05:39Z,2025-09-04T21:06:33Z,2025-09-04T21:06:31Z,2025-09-04T21:06:31Z,True,3,2,1,49,158,4
156357,closed,[Remarks] Remove redundant size from StringRefs (NFC),tobias-stadler,,2025-09-01T17:54:54Z,2025-09-10T17:11:20Z,2025-09-10T17:07:56Z,2025-09-10T17:07:56Z,True,2,0,5,12,12,1
156358,closed,[TableGen][Decoder] Decode operands with zero width or all bits known,s-barannikov,"There are two classes of operands that DecoderEmitter cannot currently handle:
1. Operands that do not participate in instruction encoding.
2. Operands whose encoding contains no '?' bits (that is, only 0s and 1s).

Because of this, targets developed various workarounds. Some targets insert missing operands after an instruction has been (incompletely) decoded, other take into account the missing operands when printing the instruction. Some targets do neither of that and fail to correctly disassemble some instructions.

This patch makes it possible to decode both classes of operands and allows to remove post-decoding instruction adjustments.

For the case of operand with no contribution to instruction encoding, one should now add `bits<0> OpName` field to instruction encoding record. This will make DecoderEmitter generate a call to the decoder function specified by the operand's DecoderMethod. The function has a signature different from the usual one and looks like this:

```
static DecodeStatus DecodeImm42Operand(MCInst &Inst, const MCDisassembler *Decoder) {
  Inst.addOperand(MCOperand::createImm(42));
  return DecodeStatus::Success;
}
```

Notably, encoding bits are not passed to it (since there are none).

There is nothing special about the second case, the operand bits are passed as usual. The difference is that before this change, the function was not called if all the bits of the operand were known (no '?' in the operand encoding).

There are two options controlling the behavior. Passing an option enables the old behavior. They exist to allow smooth transition to the new behavior. They are temporary (yeah, I know) and will be removed once all targets migrate, possibly giving some more time to downstream targets.

Subsequent patches in the stack enable the new behavior on some in-tree targets.
",2025-09-01T18:05:37Z,2025-09-04T18:51:31Z,2025-09-04T14:48:36Z,2025-09-04T14:48:36Z,True,22,14,3,115,34,13
156356,closed,[CIR] Upstream FPToFPBuiltin ACosOp,AmrDeveloper,Upstream support for FPToFPBuiltin ACosOp,2025-09-01T17:30:43Z,2025-09-03T16:13:36Z,2025-09-03T16:13:36Z,2025-09-03T16:13:36Z,True,1,1,2,81,2,5
156355,closed,[mlir][ptr] Add translations to LLVMIR for ptr ops.,fabianmcg,"Implements translation from ptr dialect to LLVM IR for core pointer operations:
- `ptr.ptr_add` -> `getelementptr`
- `ptr.load` -> `load` with atomic ordering, volatility, and metadata support
- `ptr.store` -> `store` with atomic ordering, volatility, and metadata support  
- `ptr.type_offset` -> GEP-based size computation

Example:

```mlir
llvm.func @test(%arg0: !ptr.ptr<#llvm.address_space<0>>) {
  %0 = ptr.type_offset f64 : i32
  %1 = ptr.ptr_add inbounds %arg0, %0 : !ptr.ptr<#llvm.address_space<0>>, i32
  %2 = ptr.load volatile %1 : !ptr.ptr<#llvm.address_space<0>> -> f64
  ptr.store %2, %arg0 : f64, !ptr.ptr<#llvm.address_space<0>>
  llvm.return
}
```
Translates to:
```llvm
define void @test(ptr %0) {
  %2 = getelementptr inbounds i8, ptr %0, i32 8
  %3 = load volatile double, ptr %2, align 8
  store double %3, ptr %0, align 8
  ret void
}
```",2025-09-01T16:41:03Z,2025-09-03T14:11:40Z,2025-09-03T14:11:38Z,2025-09-03T14:11:38Z,True,2,10,3,279,10,3
156353,closed,[lld][ELF] Enable link script to support absolute path matching,mykouHW,"fixes #156414 : There is a compatibility issue with filename matching. When input files use absolute paths, the matching results from lld do not meet expectations.",2025-09-01T16:25:53Z,2025-09-08T01:33:11Z,2025-09-08T01:33:11Z,,False,5,4,1,74,8,3
156351,closed,[libc++] Simplify <tuple> further,philnik777,"This essentially inlines `__make_tuple_types` and simplifies the support code. This significantly simplifies the implementation, since `__make_tuple_types` has multiple features, but the different places that use it only make use of a subset of the features. Inlining it separates concerns better and leads to less code in total.",2025-09-01T16:03:59Z,2025-09-02T06:43:05Z,2025-09-02T06:42:39Z,2025-09-02T06:42:39Z,True,1,0,1,38,147,8
156350,closed,[clang][analyzer] Remove checker 'alpha.core.CastSize',balazske,"According to https://discourse.llvm.org/t/remove-alpha-core-castsize/87974 this checker looks to be rarely used. In the current form it can have more false positives (I tested it on some C projects) than useful results. Additionally, the same problem could be found with other more reasonable checkers.",2025-09-01T15:57:25Z,2025-09-03T07:51:00Z,2025-09-03T06:53:12Z,2025-09-03T06:53:12Z,True,3,0,1,1,453,11
156345,closed,"[VPlan] Simplify x && false -> false, x | 0 -> x",artagnon,"The OR x, 0 -> x simplification has been introduced to avoid regressions.",2025-09-01T15:29:12Z,2025-09-04T09:30:03Z,2025-09-04T09:29:59Z,2025-09-04T09:29:59Z,True,2,19,2,68,131,4
156341,closed,[ARM] Improve fp16-promote.ll test (NFC),beetrees,"Update the test to use `utils/update_llc_test_checks.py`, and add a check for `fneg`. Prerequisite to #156343.",2025-09-01T15:21:29Z,2025-09-01T16:26:33Z,2025-09-01T16:10:11Z,2025-09-01T16:10:11Z,True,1,0,1,1941,450,1
156344,closed,[libc] Implement CMPLX related macros,c8ef,,2025-09-01T15:25:54Z,2025-09-05T04:29:05Z,2025-09-05T02:08:04Z,2025-09-05T02:08:04Z,True,14,10,7,134,38,9
156340,closed,[lld][ELF] Enable link script to support absolute path matching,mykouHW,"Fixing the vulnerability in LLVM lld regarding file matching in linker scripts:There is a compatibility issue with filename matching. When input files use absolute paths, the matching results from mc lld do not meet expectations.",2025-09-01T15:20:43Z,2025-09-01T15:39:17Z,2025-09-01T15:39:17Z,,False,2,0,6,81,8,3
156339,closed,[Delinearization] Improve debug messages,sebpop,improve debug messages in delinearization,2025-09-01T15:20:42Z,2025-09-04T20:35:07Z,2025-09-04T20:35:07Z,2025-09-04T20:35:07Z,True,1,16,1,29,92,21
156337,closed,[X86] Add -fexperimental-new-constant-interpreter test coverage to the x86 scalar rotate constexpr test files,RKSimon,"Update tests to use builtin_test_helpers.h and the TEST_CONSTEXPR helper macro

Partial fix for #155814",2025-09-01T15:08:06Z,2025-09-01T16:06:11Z,2025-09-01T15:59:53Z,2025-09-01T15:59:53Z,True,2,0,1,33,33,1
156336,closed,[IR] Remove options to make scalable TypeSize access a warning,nikic,"This removes the `LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS` cmake option and the `-treat-scalable-fixed-error-as-warning` opt flag.

We stopped treating these as warnings by default a long time ago (62f09d788f9fc540db12f3cfa2f98760071fca96), so I don't think it makes sense to retain these options at this point. Accessing a scalable TypeSize as fixed should always result in an error.",2025-09-01T15:04:12Z,2025-09-03T08:15:11Z,2025-09-02T07:10:46Z,2025-09-02T07:10:46Z,True,10,0,2,8,66,12
156333,closed,"[mlir][LLVM|ptr] Add the `#llvm.address_space` attribute, and allow `ptr` translation",fabianmcg,"This commit introduces the `#llvm.address_space` attribute. This  attribute  implements the `ptr::MemorySpaceAttrInterface`,  establishing the semantics of the LLVM address space.
This allows making `!ptr.ptr` translatable to LLVM IR as long it uses the `#llvm.address_space` attribute.
Concretely, `!ptr.ptr<#llvm.address_space<N>>` now translates to `ptr addrspace(N)`.

Additionally, this patch makes `PtrLikeTypes` with no metadata, no element type, and with `#llvm.address_space` memory space, compatible with the LLVM dialect.

**Infrastructure Updates:**
- Refactor `ptr::MemorySpaceAttrInterface` to include DataLayout parameter for better validation
- Add new utility functions `LLVM::isLoadableType()` and `LLVM::isTypeCompatibleWithAtomicOp()` 
- Update type compatibility checks to support ptr-like types with LLVM address spaces
- Splice the `MemorySpaceAttrInterface` to its own library, so the LLVMDialect won't depend on the PtrDialect yet

**Translation Support:**
- New `PtrToLLVMIRTranslation` module for converting ptr dialect to LLVM IR
- Type translation support for ptr types with LLVM address spaces
- Proper address space preservation during IR lowering

Example:
```mlir
llvm.func @llvm_ops_with_ptr_values(%arg0: !llvm.ptr) {
  %1 = llvm.load %arg0 : !llvm.ptr -> !ptr.ptr<#llvm.address_space<1>>
  llvm.store %1, %arg0 : !ptr.ptr<#llvm.address_space<1>>, !llvm.ptr
  llvm.return
}
```
Translates to:
```llvmir
; ModuleID = 'LLVMDialectModule'
source_filename = ""LLVMDialectModule""

define void @llvm_ops_with_ptr_values(ptr %0) {
  %2 = load ptr addrspace(1), ptr %0, align 8
  store ptr addrspace(1) %2, ptr %0, align 8
  ret void
}

!llvm.module.flags = !{!0}

!0 = !{i32 2, !""Debug Info Version"", i32 3}
```
",2025-09-01T14:33:38Z,2025-09-02T12:02:16Z,2025-09-02T12:02:14Z,2025-09-02T12:02:14Z,True,2,13,3,420,22,29
156327,closed,[X86] Add -fexperimental-new-constant-interpreter test coverage to the u32/f32 u64/f64 cast constexpr test files,RKSimon,"Update tests to use builtin_test_helpers.h and the TEST_CONSTEXPR helper macro

Partial fix for #155814",2025-09-01T13:27:59Z,2025-09-01T14:55:17Z,2025-09-01T14:53:19Z,2025-09-01T14:53:18Z,True,1,0,1,12,11,1
156326,closed,[InstCombine] Merge constant offset geps across variable geps,nikic,"Fold:

    %gep1 = ptradd %p, C1
    %gep2 = ptradd %gep1, %x
    %res = ptradd %gep2, C2

To:

    %gep = ptradd %gep, %x
    %res = ptradd %gep, C1+C2

An alternative to this would be to generally canonicalize constant offset GEPs to the right. I found the results of doing that somewhat mixed, so I'm going for this more obviously beneficial change for now.

Proof for flag preservation on reassociation: https://alive2.llvm.org/ce/z/gmpAMg
",2025-09-01T12:50:49Z,2025-09-03T08:47:34Z,2025-09-03T08:47:33Z,2025-09-03T08:47:32Z,True,4,3,4,213,14,4
156329,closed,[clang] Remove written template args from implicit var tpl spec,bolshakov-a,"`VarTemplateSpecializationDecl::getTemplateArgsAsWritten()` function should return `nullptr` in the case of implicit instantiation, as its `ClassTemplateSpecializationDecl` counterpart does, and not the arguments written in `DeclRefExpr` referencing the specialization in the first place. Otherwise, for such code:
```cpp
template <typename>
int VarTpl;

template <typename T>
void tplFn() {
  (void)VarTpl<T>;  // (1)
}

void fn() {
  tplFn<char>();
}
```
Clang treats the `char` argument of the `VarTpl` specialization as if it were written in the line marked as (1), which is misleading and hardly makes sense.

Moreover, ""template args as written"" are stored inside `ExplicitInfo` field of `VarTemplateSpecializationDecl`, but it is [documented](https://github.com/llvm/llvm-project/blob/13357e8a12c1a45364a0c4d3137b6d21ee6ac40c/clang/include/clang/AST/DeclTemplate.h#L2653) that it is not for implicit instantiations.

Moreover, it is assumed in `TraverseVarTemplateSpecializationDecl` method of `RecursiveASTVisitor` that `getTemplateArgsAsWritten()` returns `nullptr` for implicit instantiations, as it is stated in the comment [there](https://github.com/llvm/llvm-project/blob/13357e8a12c1a45364a0c4d3137b6d21ee6ac40c/clang/include/clang/AST/RecursiveASTVisitor.h#L2196).

That said, `setTemplateArgsAsWritten` should be called only for variable template explicit specializations (it is [already done inside `Sema::ActOnVarTemplateSpecialization`](https://github.com/llvm/llvm-project/blob/4c916273041ff5ed7b2af20bec787ffc42871c9f/clang/lib/Sema/SemaTemplate.cpp#L4459)) and explicit instantiations (hence `true` is passed to the new `SetWrittenArgs` parameter of `CheckVarTemplateId` function inside `Sema::ActOnExplicitInstantiation`, but not when handling expressions referencing a variable template specialization). `InstantiateVariableDefinition` function just passes the arguments from the corresponding declaration. I'm not sure about instantiating a class template containing a variable template explicit specialization and thus have tried to leave the logic of the first overload of `TemplateDeclInstantiator::VisitVarTemplateSpecializationDecl` as it was.",2025-09-01T13:33:54Z,2025-09-04T16:20:00Z,2025-09-04T15:32:12Z,2025-09-04T15:32:12Z,True,5,11,1,56,25,7
156324,closed,[mlir] Default `mlir-query` input to stdin,chios202,"Currently ,when piping a pass pipeline into `mlir-query` , you must explicitly pass `-` to read from the standard input:

```shell
./mlir-opt input.mlir -canonicalize | ./mlir-query - -c ""<your_query_1>"" -c ""<your_query_2>"" ... -c ""<your_query_N>""
```

With this PR, the explicit `-` is no longer required:

```shell
./mlir-opt input.mlir -canonicalize | ./mlir-query -c ""<your_query_1>"" -c ""<your_query_2>"" ... -c ""<your_query_N>""
```",2025-09-01T12:37:04Z,2025-09-01T14:04:24Z,2025-09-01T14:04:24Z,2025-09-01T14:04:24Z,True,1,1,2,10,1,1
156320,closed,[lldb][test] Use lld on Windows in frame format test,DavidSpickett,"link.exe discards DWARF information. Other linkers on non-Windows do not.

Uses the same solution as TestFrameFunctionInlined.test.

This test was failing with the native PDB plugin but shouldn't have been using PDB anyway (see #114906). Passes with DWARF and lld.",2025-09-01T12:16:38Z,2025-09-01T13:31:12Z,2025-09-01T13:31:09Z,2025-09-01T13:31:09Z,True,2,0,1,4,1,1
156321,closed,[mlir][tosa] handle unranked tensors in tosa::table::verify,mariocamillo-IMG,"Seen when running TOSA PRO-INT conformance tests in our SUT. This leads to verify being called with unranked tensors causing exception/error when trying to call getShape on them.
Made some variables const for consistency with other verify functions in same file.",2025-09-01T12:19:23Z,2025-09-03T11:54:45Z,2025-09-03T11:54:22Z,2025-09-03T11:54:22Z,True,5,0,2,15,4,2
156315,closed,[Driver][LoongArch] Enable linker relaxation by default for loongarch64,zhaoqi5,,2025-09-01T11:16:31Z,2025-09-05T06:36:28Z,2025-09-05T06:14:22Z,2025-09-05T06:14:22Z,True,5,0,3,27,29,6
156318,closed,[lldb][test] Don't specify DWARF debug info in frame format test,DavidSpickett,"This test fails on Windows when using the native PDB plugin, but I'm surprised that it did not fail using the DIA plugin too. As it requests DWARF debug information that is likely discarded by link.exe.

By making it generate the default debug info, DWARF most places and PDB on Windows, this test passes with both PDB plugins on Windows.

(native PDB tracking issue is #114906)",2025-09-01T12:06:27Z,2025-09-01T12:16:59Z,2025-09-01T12:08:37Z,,False,3,0,1,1,1,1
156317,closed,[X86][GlobalIsel] Support G_INTRINSIC_TRUNC/G_FCEIL/G_FFLOOR,mahesh-attarde,"This PR adds support for C/CPP Lib Intrinsic from LangRef in GlobalIsel.
Test is added https://github.com/llvm/llvm-project/pull/156281
",2025-09-01T12:04:35Z,2025-09-09T06:24:14Z,2025-09-09T06:24:14Z,,False,4,0,1,2,1,1
156314,closed,[AArch64] Fix vectorToScalarBitmask BE (#156312),GiuseppeCesarano,Closes #156312 ,2025-09-01T11:15:08Z,2025-09-07T14:07:13Z,2025-09-07T12:33:13Z,2025-09-07T12:33:13Z,True,10,0,3,83,3,2
156311,closed,[flang] Do not create omp_lib.f18.mod files,nikic,"The build system used to create `.f18.mod` variants for all `.mod` files, but this was removed in #85249. However, there is a leftover that still creates these when building `openmp` in the project configuration. It does not happen in the runtimes configuration.",2025-09-01T11:01:20Z,2025-09-03T07:53:12Z,2025-09-03T07:53:10Z,2025-09-03T07:53:10Z,True,0,0,1,2,8,1
156310,closed,[LangRef] Add MMRA documentation,Pierre-vh,MMRAs were missing from LangRef.,2025-09-01T10:47:11Z,2025-09-01T13:01:01Z,2025-09-01T13:00:59Z,2025-09-01T13:00:59Z,True,2,0,1,32,1,1
156309,closed,[LangRef] Clarify semantics of objectsize min parameter,nikic,"LangRef currently only says that this determines the return value if the object size if unknown. What it actually does is determine whether the minimum or maximum size is reported, which degenerates to 0 or -1 if unknown.

Fixes https://github.com/llvm/llvm-project/issues/156192.",2025-09-01T10:42:15Z,2025-09-03T07:52:44Z,2025-09-03T07:52:43Z,2025-09-03T07:52:43Z,True,1,0,1,9,3,1
156308,closed,[VPlan] Simplify (x && y) || (x && z) -> x && (y || z),lukel97,"Split off from #155383, since it turns out this has a diff on its own.


",2025-09-01T10:41:31Z,2025-09-01T13:12:23Z,2025-09-01T13:12:23Z,2025-09-01T13:12:23Z,True,1,4,1,14,10,2
156307,closed,coverage-capabilities,RenjiSann,,2025-09-01T10:38:45Z,2025-09-01T10:52:40Z,2025-09-01T10:52:40Z,,False,3,0,4,135,18,8
156306,closed,[llldb][test] Mark a DWO test unsupported on Darwin and Windows,DavidSpickett,"This uses split DWARF and from looking at other tests, it should not be running on Darwin or Windows.

It does pass using the DIA PDB plugin but I think this is misleading because it's not actually testing the intended feature.

When the native PDB plugin is used it fails because it cannot set a breakpoint. I don't see a point to running this test on Windows at all.

Native PDB plugin test failures are being tracked in #114906.",2025-09-01T10:35:45Z,2025-09-01T12:20:34Z,2025-09-01T12:20:30Z,2025-09-01T12:20:30Z,True,1,0,1,3,0,1
156304,closed,[VPlan] Move findCommonEdgeMask optimization to simplifyBlends,lukel97,"Following up from #150368, this moves folding common edge masks into simplifyBlends.

One test in uniform-blend.ll ended up regressing but after looking at it closely, it came from a weird (x && !x) edge mask. So I've just included a simplifcation in this PR to fold that to false.

This is an alternative to #150369.
",2025-09-01T10:24:58Z,2025-09-05T01:29:22Z,2025-09-05T01:29:22Z,2025-09-05T01:29:22Z,True,2,0,5,33,37,5
156303,closed,release/21.x: [sanitizer_common] Older Haiku needs _GNU_SOURCE (#156291),llvmbot,"Backport 27c80fba53cd44ff3d575c6049bf88ecf6c15bc2

Requested by: @brad0",2025-09-01T10:17:25Z,2025-09-03T10:11:38Z,2025-09-03T10:10:45Z,2025-09-03T10:10:45Z,True,3,0,1,1,0,1
156302,closed,[Remarks] Move BitstreamRemarkParser helpers to private header (NFC),tobias-stadler,"These helpers are only used in the implementation, and we also don't
expose similar details for the YAMLRemarkParser.
",2025-09-01T10:16:59Z,2025-09-10T11:51:28Z,2025-09-10T11:51:26Z,2025-09-10T11:51:26Z,True,0,0,1,90,118,3
156300,closed,[llvm-exegesis] Exclude loads/stores from aliasing instruction set,sjoerdmeijer,"In the serial snippet generator and function that computes the aliasing instructions, I don't think we want to include load/store instructions to create a chain as that could make the results more unreliable.

There is a hasMemoryOperands() check, but I think that's an X86 way for checking for loads/stores. For AArch64, we should check mayLoad() and mayStore(), and probably for other architectures too.",2025-09-01T09:40:40Z,2025-09-03T19:58:10Z,2025-09-03T18:30:55Z,2025-09-03T18:30:54Z,True,8,0,2,10,0,2
156299,closed,[Driver] Enable outline atomics for Haiku and Managarm aarch64,brad0,,2025-09-01T09:20:54Z,2025-09-05T20:58:48Z,2025-09-05T20:55:56Z,2025-09-05T20:55:56Z,True,4,0,1,17,0,3
156297,closed,release/21.x: [SLP]Do not to try to revectorize previously vectorized phis in loops,llvmbot,"Backport 7730ebce8e8fa84db4da04a7d8fe1977ccbf28ff

Requested by: @nikic",2025-09-01T09:00:38Z,2025-09-03T10:11:40Z,2025-09-03T10:11:09Z,2025-09-03T10:11:08Z,True,2,0,1,197,1,2
156325,closed,fix(deps): ran npm install to cleanup package-lock.json and remove unused tar-fs dependency,jasonMcCullough,,2025-09-01T12:44:44Z,2025-09-01T12:45:15Z,2025-09-01T12:45:09Z,,False,1,0,18,0,0,0
156294,closed,[Support] Also check the value for HAVE_PTHREAD_(SETNAME/SET_NAME)_NP,brad0,As was already done for HAVE_PTHREAD_(GETNAME/GET_NAME)_NP,2025-09-01T08:19:03Z,2025-09-01T10:07:17Z,2025-09-01T10:07:14Z,2025-09-01T10:07:14Z,True,1,0,1,2,2,1
156323,closed,fix(deps): ran npm install to cleanup package-lock.json and remove unused tar-fs dependency,jasonMcCullough,,2025-09-01T12:32:32Z,2025-09-01T12:39:25Z,2025-09-01T12:39:19Z,,False,2,0,18,0,0,0
156293,closed,[X86] Fold X * Y + Z --> C + Z for vpmadd52l/vpmadd52h,XChy,Address TODO and implement constant fold for intermediate multiplication result of  vpmadd52l/vpmadd52h.,2025-09-01T08:12:47Z,2025-09-01T17:18:50Z,2025-09-01T17:18:50Z,2025-09-01T17:18:50Z,True,1,6,6,120,5,2
156292,closed,[SLP][NFC] Simplify population of `ReducedVals`,pfusik,,2025-09-01T08:08:54Z,2025-09-01T14:38:13Z,2025-09-01T14:38:13Z,2025-09-01T14:38:13Z,True,1,0,1,12,13,1
156291,closed,[sanitizer_common] Older Haiku needs _GNU_SOURCE,brad0,,2025-09-01T08:02:29Z,2025-09-01T10:06:59Z,2025-09-01T10:06:51Z,2025-09-01T10:06:51Z,True,1,0,1,1,0,1
156290,closed,[libc++] Remove a few GCC workarounds that aren't needed anymore,philnik777,,2025-09-01T07:44:45Z,2025-09-01T14:37:22Z,2025-09-01T14:36:56Z,2025-09-01T14:36:55Z,True,1,0,1,1,10,3
156281,closed,[X86][GlobalIsel] Add ceil/trunc/floor cpp intrinsic test,mahesh-attarde,"I am working towards supporting G_INTRINSIC_TRUNC, G_FCEIL and  G_FFLOOR. This patch adds  isel test for usecase.
Ref https://llvm.org/docs/GlobalISel/GenericOpcode.html#g-fceil-g-fsqrt-g-ffloor-g-frint-g-fnearbyint
",2025-09-01T05:56:33Z,2025-09-02T08:36:05Z,2025-09-02T08:15:06Z,2025-09-02T08:15:06Z,True,3,3,7,285,0,3
156288,closed,[libc++][NFC] Use llvm.org/PR to link to bug reports,philnik777,"We've built up quite a few links directly to github within the code base. We should instead use `llvm.org/PR<issue-number>` to link to bugs, since that is resilient to the bug tracker changing in the future. This is especially relevant for tests linking to bugs, since they will probably be there for decades to come. A nice side effect is that these links are significantly shorter than the GH links, making them much less of an eyesore.

This patch also replaces a few links that linked to the old bugzilla instance on llvm.org.
",2025-09-01T07:31:19Z,2025-09-05T07:53:16Z,2025-09-04T07:20:02Z,2025-09-04T07:20:02Z,True,3,0,1,229,238,207
156280,closed,[NFC][libclc] Move _CLC_V_V_VP_VECTORIZE macro into clc_lgamma_r.cl and delete clcmacro.h,wenju-he,clcmacro.h only defines _CLC_V_V_VP_VECTORIZE which is only used in clc/lib/generic/math/clc_lgamma_r.cl.,2025-09-01T05:52:26Z,2025-09-03T00:23:05Z,2025-09-03T00:23:02Z,2025-09-03T00:23:01Z,True,1,0,1,55,116,48
156278,closed,[SLP][NFC] Refactor `if`s into `&&`,pfusik,,2025-09-01T05:10:10Z,2025-09-01T07:45:26Z,2025-09-01T07:45:26Z,2025-09-01T07:45:26Z,True,2,0,1,2,6,1
156276,closed,[llvm] Proofread CMake.rst,kazutakahirata,,2025-09-01T03:58:17Z,2025-09-01T06:44:10Z,2025-09-01T06:43:43Z,2025-09-01T06:43:43Z,True,0,0,1,44,44,1
156277,closed,[SLP][NFC] Refactor duplicate code into `getVectorizedValue`,pfusik,,2025-09-01T05:08:05Z,2025-09-01T16:00:03Z,2025-09-01T16:00:03Z,2025-09-01T16:00:03Z,True,1,6,3,15,32,1
156275,closed,[NVPTX] Remove unnecessary casts (NFC),kazutakahirata,"getSubtargetImpl() already returns const NVPTXSubtarget *.
",2025-09-01T03:58:02Z,2025-09-04T06:02:15Z,2025-09-04T04:40:21Z,2025-09-04T04:40:21Z,True,3,2,2,5,8,1
156274,closed,"[ADT] Simplify CastInfo<To, PointerUnion<PTs...>> (NFC)",kazutakahirata,"This patch simplifies CastInfo<To, PointerUnion<PTs...>> by ""inlining""
CastInfoPointerUnionImpl into the CastInfo specialization.

Here is a brief background:

  https://reviews.llvm.org/D125609

added support for CastInfo<To, PointerUnion<PTs...>> along with helper
struct CastInfoPointerUnionImpl.  During the review, we did discuss
the idea of implementing the CastInfo specialization without the
helper struct, but the suggested solution did not work.

This patch attempts to simplify the CastInfo specialization again by
making CastInfo a friend of PointerUnion:

  template <typename To, typename From, typename Enable>
  friend struct CastInfo;

This gives CastInfo more access to PointerUnion than strictly
necessary, but the ability to simplify the CastInfo specialization
outweighs the risk.
",2025-09-01T03:57:01Z,2025-09-01T15:05:10Z,2025-09-01T15:04:50Z,2025-09-01T15:04:50Z,True,1,0,1,11,30,1
156273,closed,[ADT] Remove BitVector::next_unset_in_word,kazutakahirata,"This patch removes BitVector::next_unset_in_word as the private method
doesn't seem to be used anywhere.
",2025-09-01T03:56:25Z,2025-09-01T06:44:04Z,2025-09-01T06:43:35Z,2025-09-01T06:43:35Z,True,1,0,1,0,5,1
156272,closed,[ADT] Mark BitVector::find_prev_unset const (NFC),kazutakahirata,"find_prev_unset calls find_last_unset_in, a const method, but
find_prev_unset itself isn't marked const.
",2025-09-01T03:56:06Z,2025-09-01T06:43:58Z,2025-09-01T06:43:27Z,2025-09-01T06:43:27Z,True,1,0,1,1,1,1
156271,closed,release/21.x: [Clang][CMake] Use IRPGO instead of FE PGO for Cmake Caches (#155957),llvmbot,"Backport 7fca1f841b4c226d50ab7bad64de5db225d4193b

Requested by: @boomanaiden154",2025-09-01T03:54:54Z,2025-09-03T10:12:36Z,2025-09-03T10:11:58Z,2025-09-03T10:11:58Z,True,6,0,1,1,1,1
156265,closed,[clang-tidy][NFC] Enable `readability-convert-member-functions-to-static` in the codebase,localspook,"Closes #156158.

Ironically, one warning found in `ConvertMemberFunctionsToStatic.cpp`",2025-09-01T00:23:25Z,2025-09-08T15:18:02Z,2025-09-08T15:18:02Z,,False,6,0,2,104,95,29
156261,closed,[AArch64] Lower zero cycle FPR zeroing,tomershafir,"Lower FPR64, FPR32, FPR16 from `fmov` zeroing into NEON zeroing if the target supports zero cycle zeroing of NEON registers but not for the narrower classes.

It handles 2 cases: one in `AsmPrinter` where a FP zeroing from immediate has been captured by pattern matching on instruction selection, and second post RA in `AArch64InstrInfo::copyPhysReg` for uncaptured/later-generated WZR/XZR fmovs.

Adds a subtarget feature called FeatureZCZeroingFPR128 that enables to query wether the target supports zero cycle zeroing for FPR128 NEON registers, and updates the appropriate processors.",2025-08-31T18:37:34Z,2025-09-10T05:32:54Z,2025-09-10T05:32:51Z,2025-09-10T05:32:51Z,True,2,1,3,249,171,15
156263,closed,[libc][docs] Add GPU math conformance test results to support page,leandrolcampos,"This patch enhances the GPU support documentation page (`support.html`) by adding a new, detailed section for `math.h`. This new section presents the results of the GPU math conformance tests, providing quantitative data on the accuracy of the supported higher math functions.",2025-08-31T20:09:48Z,2025-09-04T21:01:05Z,2025-09-04T21:01:05Z,2025-09-04T21:01:05Z,True,5,2,3,167,0,1
156260,closed,"[X86] Update BMI, BMI2 and TBM constexpr tests",ghost,"This PR updates the constexpr tests for the BMI, BMI2, and TBM intrinsics. The existing `char` array-based tests are replaced with the `TEST_CONSTEXPR` helper macro to improve readability and align with modern testing practices in the project.

Files modified:
- clang/test/CodeGen/X86/bmi-builtins.c
- clang/test/CodeGen/X86/bmi2-builtins.c
- clang/test/CodeGen/X86/tbm-builtins.c",2025-08-31T18:22:29Z,2025-09-01T11:20:26Z,2025-09-01T11:20:13Z,,False,2,9,12,240,221,4
156253,closed,[CIR] Add support for atomic compare-and-swap,Lancern,"This patch adds support for atomic compare-and-swap operations, including the following C/C++ instrinsics:

  - `__atomic_compare_exchange`
  - `__atomic_compare_exchange_n`
  - `__c11_atomic_compare_exchange_strong`
  - `__c11_atomic_compare_exchange_weak`",2025-08-31T16:49:31Z,2025-09-08T15:49:16Z,2025-09-08T15:49:11Z,2025-09-08T15:49:11Z,True,1,7,1,491,27,6
156247,closed,"[memprof] Rename ""v2"" functions and tests (NFC)",kazutakahirata,"I'm planning to remove the V2 support.  Now, some functions and tests
should not be removed just because they have ""v2"" in their names.
This patch renames them.

- makeRecordV2: Renamed to makeRecord.  This has ""V2"" in the name
  because the concept of call stack ID came out as part of V2.  It is
  still useful for use with V3 and V4.

- test_memprof_v4_{partial,full}_schema: Upgraded to use V4.  These
  tests perform serialization/deserialization roundtrip tests of a
  MemProfRecord with {partial,full} schema.
",2025-08-31T15:20:31Z,2025-09-02T16:22:08Z,2025-09-02T16:21:02Z,2025-09-02T16:21:02Z,True,1,0,1,11,11,1
156245,closed,[MLIR] Add --allow-unregistered-dialect to mlir-reduce,joker-eph,Fixes #155544,2025-08-31T13:52:14Z,2025-08-31T19:20:15Z,2025-08-31T19:20:15Z,2025-08-31T19:20:15Z,True,1,0,1,7,0,1
156241,closed,[CIR][NFC] Reorder GenExprComplex and add errors for unhandled visitors,AmrDeveloper,"- Reorder the CIRGenExprComplex functions to be similar to OCG.
- Add errors for unhandled visitors.
- Rename the test file to be similar to `complex-mul-div`.

Issue: https://github.com/llvm/llvm-project/issues/141365",2025-08-31T12:55:01Z,2025-09-02T16:44:03Z,2025-09-02T16:44:03Z,2025-09-02T16:44:03Z,True,2,0,1,519,431,2
156240,closed,[NFC][MC][ARM] Rearrange decoder functions 3/N,jurahul,"Move all `ARMDisassembler` member functions to after all the static decode functions.

Work on https://github.com/llvm/llvm-project/issues/156560 : Reorder ARM disassembler decode functions to eliminate forward declarations",2025-08-31T12:30:47Z,2025-09-03T14:52:17Z,2025-09-03T14:52:17Z,2025-09-03T14:52:17Z,True,5,0,1,256,256,1
156237,closed,[NFC][MC][DecoderEmitter] Simplify loop to find the best filter,jurahul,We can just use `max_element` on the array of filters.,2025-08-31T11:24:50Z,2025-08-31T13:23:30Z,2025-08-31T13:23:27Z,2025-08-31T13:23:27Z,True,2,2,2,6,19,1
156235,closed,[docs] Update logging section of the programmer manual to include LDBG() (NFC),joker-eph,,2025-08-31T11:14:11Z,2025-09-01T12:47:01Z,2025-09-01T12:47:01Z,2025-09-01T12:47:01Z,True,0,4,1,102,51,1
156231,closed,[lldb-dap] Destroy debugger when debug session terminates,royitaqi,"# Patch

Currently, in Server Mode (i.e. `--connection`), all debuggers are destroyed when the **lldb-dap process** terminates. This causes logging and release of resources to be delayed. This can also cause congestion if multiple debuggers have the same destroy callbacks, which will fight for the same resources (e.g. web requests) at the same time.

Instead, the debuggers can be destroyed as early as when the **debug session** terminates. This way, logging and release of release of resources can happen as soon as possible. Congestion can also be naturally reduced, because it's unlikely that all debug sessions will terminate at the same time.

# Tests

```
$ cd build
$ ninja lldb-dap

#################### Run unit tests ####################
$ ninja lldb-unit-test-deps
$ tools/lldb/unittests/DAP/DAPTests
...
[==========] 74 tests from 11 test suites ran. (1414 ms total)
[  PASSED  ] 74 tests.

#################### Run api tests ####################
$ ninja lldb-api-test-deps
$ bin/llvm-lit -a --show-unsupported \
    ../llvm-project/lldb/test/API/tools/lldb-dap/attach/TestDAP_attach.py \
    ../llvm-project/lldb/test/API/tools/lldb-dap/commands/TestDAP_commands.py \
    ../llvm-project/lldb/test/API/tools/lldb-dap/coreFile/TestDAP_coreFile.py \
    ../llvm-project/lldb/test/API/tools/lldb-dap/disconnect/TestDAP_disconnect.py \
    ../llvm-project/lldb/test/API/tools/lldb-dap/launch/TestDAP_launch.py \
    ../llvm-project/lldb/test/API/tools/lldb-dap/evaluate/TestDAP_evaluate.py \
    ../llvm-project/lldb/test/API/tools/lldb-dap/output/TestDAP_output.py \
    ../llvm-project/lldb/test/API/tools/lldb-dap/restart/TestDAP_restart_console.py \
    ../llvm-project/lldb/test/API/tools/lldb-dap/server/TestDAP_server.py
...
UNSUPPORTED: LLDB (/Users/royshi/public_llvm/build/bin/clang-arm64) :: test_basic_functionality (TestDAP_restart_console.TestDAP_restart_console) (skip on debug build type(s))
UNSUPPORTED: LLDB (/Users/royshi/public_llvm/build/bin/clang-arm64) :: test_stopOnEntry (TestDAP_restart_console.TestDAP_restart_console) (skip on debug build type(s))
...
********************
********************
Unsupported Tests (1):
  lldb-api :: tools/lldb-dap/restart/TestDAP_restart_console.py


Testing Time: 71.53s

Total Discovered Tests: 9
  Unsupported: 1 (11.11%)
  Passed     : 8 (88.89%)
```
",2025-08-31T09:02:27Z,2025-09-05T17:28:23Z,2025-09-04T23:35:06Z,2025-09-04T23:35:06Z,True,10,0,5,6,9,2
156227,closed,feat: Add AVX512 support for constant interpreter test,ghost,"Adds test coverage for `fexperimental-new-constant-interpreter` to `avx512cd-builtins.c` and `avx512vlcd-builtins.c` as part of the work to ensure all x86 intrinsics are handled correctly by the new interpreter. This addresses the task in issue #155814.
",2025-08-31T07:06:04Z,2025-08-31T17:45:05Z,2025-08-31T15:57:40Z,2025-08-31T15:57:40Z,True,4,0,3,8,0,2
156224,closed,[SelectionDAG] Return std::optional<unsigned> from getValidShiftAmount and friends. NFC,topperc,Instead of std::optional<uint64_t>. Shift amounts must be less than or equal to our maximum supported bit widths which fit in unsigned. Most of the callers already assumed it fit in unsigned.,2025-08-31T04:29:00Z,2025-08-31T18:29:11Z,2025-08-31T18:29:08Z,2025-08-31T18:29:08Z,True,1,0,1,37,37,4
156226,closed,[memprof] Make the AllocSites and CallSites sections optional in YAML,kazutakahirata,"This patch makes the AllocSites and CallSites sections optional in the
YAML format.  This is useful for situations where a function has only
one section.
",2025-08-31T06:35:04Z,2025-08-31T14:44:15Z,2025-08-31T14:44:03Z,2025-08-31T14:44:03Z,True,1,0,1,66,2,2
156221,closed,[ADT] Overhaul the DenseMapIterator creation logic (NFC),kazutakahirata,"Without this patch, it's overly complicated to create iterators in
DenseMap.

- We must specify whether to advance a newly created iterator, which
  is needed in begin().
- We call shouldReverseIterate outside and inside DenseMapIterator.

This patch cleans up all this by creating factory methods:

- DenseMapIterator::makeBegin
- DenseMapIterator::makeEnd
- DenseMapIterator::makeIterator

With these:

- makeBegin knows that we need to advance the iterator to the first
  valid bucket.
- Callers outside DenseMapIterator do not reference
  shouldReverseIterate at all.

Now, it's a lot simpler to call helper functions
DenseMapBase::{makeIterator,makeConstIterator}.  We just have to pass
the Bucket pointer:

  makeIterator(Bucket);

and they take care of the rest, including passing *this as Epoch.
",2025-08-31T03:34:36Z,2025-09-01T15:05:01Z,2025-09-01T15:04:42Z,2025-09-01T15:04:42Z,True,1,0,1,49,57,1
156218,closed,[CodeGen] Drop disjoint flag when reassociating,preames,"This fixes a latent miscompile.  To understand why the flag can't be preserved, consider the case where a0=0, a1=0, a2=-1, and s3=-1.",2025-08-31T01:50:30Z,2025-08-31T18:32:35Z,2025-08-31T18:23:16Z,2025-08-31T18:23:16Z,True,2,0,1,4,2,2
156216,closed,[libc] add ctime and ctime_r to docs,zimirza,I noticed that I forgot to add `ctime` and `ctime_r` to docs in https://github.com/llvm/llvm-project/pull/107285. This is a simple patch to add it.,2025-08-31T01:21:59Z,2025-09-05T18:01:54Z,2025-09-05T17:21:18Z,2025-09-05T17:21:18Z,True,2,0,1,2,2,1
156214,closed,[LLD][COFF] Prevent to emit relocations for discarded weak wrapped symbols,kikairoya,"When a symbol is imported from a DLL, a base relocation record is normally emitted.
However, if the import is pulled in via a wrapped symbol (using `--wrap`) and later dropped because it is only referenced weakly, a dangling base relocation remains in the output.  
At runtime, this relocation changes the symbol value from null to a garbage pointer.

This patch adds checks to avoid emitting relocation records for non-`Defined` symbols, and to prevent creating an auto-import entry if an import entry for the wrapped symbol already exists.

Fixes https://github.com/llvm/llvm-project/issues/150739",2025-08-30T23:42:09Z,2025-09-09T10:10:29Z,2025-09-09T10:10:29Z,2025-09-09T10:10:29Z,True,8,7,12,88,13,4
156213,closed,[LLVM][MC][CodeEmitterGen] Reduce various `InstBits` table sizes,jurahul,"Change various `InstBits` tables have an entry only for non-pseudo target instructions and adjust the indexing into these tables accordingly.

Some minor refactoring related to this:
- Use early return after handling variable length encodings
- Reduce the scope of anonymous namespace to just the class declaration.

Example reductions in these table sizes for some targets:

```
Target      FirstSupportedOpcode         Reduction in size
AMDGPU                     10813         10813 * 16 = 168KB
RISCV                      12051         12051 * 8 = 94KB
```",2025-08-30T23:07:29Z,2025-09-10T12:36:57Z,2025-09-10T12:36:51Z,2025-09-10T12:36:51Z,True,3,3,2,175,167,3
156212,closed,[NFC][LLVM] Use `INITILIZE_PASS` instead of `INITIALIZE_PASS_BEGIN/END`,jurahul,,2025-08-30T23:07:16Z,2025-09-03T14:54:25Z,2025-09-03T14:54:22Z,2025-09-03T14:54:21Z,True,2,0,1,2,4,2
156211,closed,[asan] Rewrite Windows/heaprealloc_alloc_zero check to avoid dereference,thurstond,"The test currently checks that 1-byte is allocated when malloc(0) is called, by dereferencing the pointer.
https://github.com/llvm/llvm-project/pull/155943 changed ASan to consider the dereference to be a heap buffer overflow. This patch changes the test to check the allocated size is still 1-byte, but not dereference the pointer.

This aims to fix the breakage reported in https://github.com/llvm/llvm-project/pull/155943#issuecomment-3239543505

It also enables the test for 64-bit Windows.",2025-08-30T21:54:01Z,2025-08-30T22:43:52Z,2025-08-30T22:43:52Z,2025-08-30T22:43:52Z,True,3,0,2,7,2,1
156208,closed,[ARM] Use t2LDRLIT_ga_pcrel for loading stack guards with no-movt in PIC mode.,aemerson,"When using no-movt we don't use the pcrel version of the literal load.
This change also unifies logic with the ARM version of this function as well,
which has:

```
  if (!Subtarget.useMovt() || ForceELFGOTPIC) {
    // For ELF non-PIC, use GOT PIC code sequence as well because R_ARM_GOT_ABS
    // does not have assembler support.
    if (TM.isPositionIndependent() || ForceELFGOTPIC)
      expandLoadStackGuardBase(MI, ARM::LDRLIT_ga_pcrel, ARM::LDRi12);
    else
      expandLoadStackGuardBase(MI, ARM::LDRLIT_ga_abs, ARM::LDRi12);
    return;
  }
```

rdar://138334512",2025-08-30T21:32:15Z,2025-09-01T05:31:03Z,2025-09-01T05:31:02Z,2025-09-01T05:31:02Z,True,3,1,1,61,22,2
156204,closed,[llvm] Proofread LangRef.rst,kazutakahirata,,2025-08-30T19:39:59Z,2025-08-31T14:44:11Z,2025-08-31T14:43:55Z,2025-08-31T14:43:55Z,True,0,0,1,27,27,1
156203,closed,[ARM] Remove an unnecessary cast (NFC),kazutakahirata,"getInstrInfo() already returns const ARMBaseInstrInfo *.
",2025-08-30T19:39:46Z,2025-08-30T23:02:16Z,2025-08-30T23:02:02Z,2025-08-30T23:02:02Z,True,1,0,1,1,1,1
156202,closed,[CodeGen] Remove a dead assignment (NFC),kazutakahirata,"TRI is set to the same value a couple of lines below.
",2025-08-30T19:39:31Z,2025-08-30T23:02:09Z,2025-08-30T23:01:55Z,2025-08-30T23:01:55Z,True,0,0,1,0,1,1
156207,closed,[NFC] [clangd] [Modules] remove dot in log,aemerson,"[NFC] [clangd] [Modules] remove dot in log

The dot in the log makes it hard to copy and execute the commands from
the log. Remove it.

[clangd] [C++20 Modules] Add --debug-modules-builder to not remove built module files on exit

In practice I found the option is very helpful for me to understand what
happens when clangd's C++20 modules support fails. With '--log=verbose',
I can rerun the command by clangd to understand what's going wrong
actually.

The documentation or adding the option to '--help' list can be done
separately.

Fix test added in #155148 work with Windows style path separators. (#155354)

Should fix Windows build bot failures such as
https://lab.llvm.org/buildbot/#/builders/46/builds/22281.

The test (and the followup fix in #155303) did not properly account for
Windows style path separators.

[libc++] Add a release note about multi{map,set}::find not returning the first element anymore (#155252)

We've modified the algorithm of `__tree::find` in #152370, which can
change the return value. Since we're always returned the lower bound
before some users started relying on it. This patch adds a release note
so users are aware that this might break their code.

[libc++][C++03] Split libc++-specific tests for the frozen headers (#144093)

The C++03 headers are essentially a separate implementation, so it
doesn't make a ton of sense to try to test two implementations with a
single set of implementation-specific tests.

This patch doesn't copy over any tests that will not be run in C++03
mode. The most notable changes are that `lit.local.cfg` files are
touched to change the path from `libcxx/test/libcxx` to
`libcxx/test/libcxx-03` in a few places.

This also modifies `lit.local.cfg` files to run `libcxx/test/libcxx-03`
only when using the frozen headers and `lbcxx/test/libcxx` tests only
when _not_ using the frozen headers.

This is part of
https://discourse.llvm.org/t/rfc-freezing-c-03-headers-in-libc.

[libc++] Remove a few incorrect _LIBCPP_EXPORTED_FROM_ABI annotations (#132602)

This has two benefits:
- It is less likely that the macro will be copy-pasted around when
unnecessary
- We can drop `_LIBCPP_HIDE_FROM_ABI` from any member functions once we
are able to make `_LIBCPP_HIDE_FROM_ABI` the default within libc++

[lldb] Fix a warning

This patch fixes:

  lldb/unittests/Protocol/ProtocolMCPServerTest.cpp:285:14: error:
  unused variable 'mutex' [-Werror,-Wunused-variable]

[libc++][NFC] Wrap lines in ReleaseNotes/22.rst (#155359)

Some of the lines in `ReleaseNotes/22.rst` are (significantly) longer
than our usual 120 column limit. This wraps all lines in the file so
they are never more than our usual limit.

[flang] Disable loop interchange by default (#155279)

Disable loop interchange by default, while keeping the ability to
explicitly enable using `-floop-interchange`. This matches Clang.

See discussion on https://github.com/llvm/llvm-project/pull/140182.

[X86] Fix spill issue for fr16 (#155225)

When avx512fp16 is not available, we use MOVSS to spill fr16/fr16x
register.
However The MOVSSmr require fr32 register class and MOVSSrm require
vr128
register class which cause bad instruction detected by machine verifier.
To fix the issue this patch is to create a pseudo instruction MOVSHP for
fr16 register spilling. MOVSHP is expanded to MOVSS or VMOVSSZ depending
on the register number.

---------

Co-authored-by: Yuanke Luo <ykluo@birentech.com>

[mlir][emitc] Fix bug in ApplyOp translation (#155171)

The translator emits `emitc.apply` incorrectly when the op is part of an
expression, as it prints the name of the operand instead of calling
emitOperand() which takes into account the expression being emitted,
leaving out the part of the expression feeding this op, e.g.
```mlir
func.func @foo(%a: i32, %p: !emitc.ptr<i32>) -> i32 {
  %c = emitc.expression : i32 {
    %e = emitc.sub %p, %a : (!emitc.ptr<i32>, i32) -> !emitc.ptr<i32>
    %d = emitc.apply ""*""(%e) : (!emitc.ptr<i32>) -> i32
    emitc.yield %d : i32
  }
  return %c : i32
}
```
translates to:
```C
int32_t foo(int32_t v1, int32_t* v2) {
  int32_t v3 = *v4;
  return v3;
}
```
instead of:
```C
int32_t foo(int32_t v1, int32_t* v2) {
  int32_t v3 = *(v2 - v1);
  return v3;
}
```

[clang][test] Add a RUN line for the bytecode interpreter (#155363)

This test works with the bytecode interpreter, so add some additional
testing.

[mlir][scf] Expose isPerfectlyNestedForLoops (#152115)

The function `isPerfectlyNestedForLoops` is useful on its own and so I'm
exposing it for downstream use.

[NFC] Remove out dated comment for clear-ast-before-backend

The comment is outdated since d0a5f61c4f6fccec87fd5207e3fcd9502dd59854

[clang][DebugInfo][test] Move debug-info tests from CodeGenObjCXX to DebugInfo directory (#154912)

This patch works towards consolidating all Clang debug-info into the
`clang/test/DebugInfo` directory

(https://discourse.llvm.org/t/clang-test-location-of-clang-debug-info-tests/87958).

Here we move only the `clang/test/CodeGenObjCXX` tests.

The list of files i came up with is:
1. searched for anything with `*debug-info*` in the filename
2. searched for occurrences of `debug-info-kind` in the tests

[LV] Remove use of llc from vectoriser tests (#154759)

There were 5 X86 loop vectoriser tests that were piping the output from
opt into llc. I think in the directory test/Transforms/LoopVectorize we
should only be testing the output from the loop vectoriser pass. Any
codegen tests should live in test/CodeGen/X86 instead.

avx512.ll: it looks like we were really just testing that we generate
the right vector length.
fp32_to_uint32-cost-model.ll/fp64_to_uint32-cost-model.ll: the tests
only seem to care that we're not scalarising the fptoui, so I've
modified the test to check for vector ops. I've assumed there are
already codegen tests for fptoui vector operations.
vectorization-remarks-loopid-dbg.ll: i've copied this test to
CodeGen/X86/vectorization-remarks-loopid-dbg.ll for the llc RUN line
variant
vectorization-remarks.ll: seems to test the same thing as
vectorization-remarks-loopid-dbg.ll

[MLIR][TOSA] Add missing SameOperandsAndResultShape Trait to tosa.cast (#153826)

According to the TOSA spec, tosa.cast is only changing the elementtype,
and not the shape of the input tensor

Signed-off-by: Rickert, Jonas <jonas.rickert@amd.com>

[ComplexDeinterleaving] Use LLVM ADTs (NFC) (#154754)

This swaps out STL types for their LLVM equivalents. This is recommended
in the LLVM coding standards: https://llvm.org/docs/CodingStandards.html#c-standard-library

[LV] Stop using the legacy cost model for udiv + friends (#152707)

In VPWidenRecipe::computeCost for the instructions udiv, sdiv, urem and
srem we fall back on the legacy cost unnecessarily. At this point we
know that the vplan must be functionally correct, i.e. if the
divide/remainder is not safe to speculatively execute then we must have
either:

1. Scalarised the operation, in which case we wouldn't be using a
VPWidenRecipe, or
2. We've inserted a select for the second operand to ensure we don't
fault through divide-by-zero.

For 2) it's necessary to add the select operation to
VPInstruction::computeCost so that we mirror the cost of the legacy cost
model. The only problem with this is that we also generate selects in
vplan for predicated loops with reductions, which *aren't* accounted for
in the legacy cost model. In order to prevent asserts firing I've also
added the selects to precomputeCosts to ensure the legacy costs match
the vplan costs for reductions.

[libc++][C++03] Remove XFAILs from the non-frozen libc++-specific tests (#144101)

The tests in `libcxx/test/libcxx` aren't run against the frozen headers
anymore, so we can remove any XFAILs in them.

This is part of
https://discourse.llvm.org/t/rfc-freezing-c-03-headers-in-libc.

[clang][bytecode][NFC] Check InitializingBlocks in _within_lifetime (#155378)

This kind of check is exactly why InterpState::InitializingBlocks
exists.

[libc++][C++03] Fix tests which only fail due to incorrect includes (#144110)

Quite a few of the frozen header tests only fail because the include
path is incorrect due to copying the headers. This patch fixes the tests
where that's the only problem.

This is part of
https://discourse.llvm.org/t/rfc-freezing-c-03-headers-in-libc.

[LV] Return Invalid from getLegacyCost when instruction cost forced. (#154543)

LoopVectorizationCostModel::expectedCost will only override the cost
returned by getInstructionCost when valid. This patch ensures we do
the same in VPCostContext::getLegacyCost, avoiding the ""VPlan cost
model and legacy cost model disagreed"" assert in the included test.

[libc++][C++03] Fix a bunch of random tests (#144117)

This fixes/removes a bunch of random tests. They all failed in
relatively simple to fix ways.

Specificially (all inside `libcxx/test/libcxx-03`):
- `utilities/template.bitset/includes.pass.cpp`: the header guards have
different names now (guard names fixed)
- `utilities/meta/is_referenceable.compile.pass.cpp`: The name changed
from `__libcpp_is_referenceable` (reverted name)
- `utilities/function.objects/refwrap/desugars_to.compile.pass.cpp`:
Optimization has been added after the header split (test removed)
- `type_traits/is_replaceable.compile.pass.cpp`: `__is_replacable_v` has
been added after the header split (test removed)
- `type_traits/is_constant_evaluated.pass.cpp`: Ran C++11 code
accidentally (C++11 test parts removed)
- `type_traits/desugars_to.compile.pass.cpp`: Optimization has been
added after the header split (test removed)
- `numerics/bit.ops.pass.cpp`: Tried to include header which doesn't
exist (removed include and related code which wasn't executed in C++03)
- `experimental/fexperimental-library.compile.pass.cpp`: This test is
irrelevant for C++03, since there are no C++03 experimental features
(test removed)
- `containers/container_traits.compile.pass.cpp`: `container_traits`
have been introduced after the header split (test removed)

[OpenMPIRBuilder] Fix tripcount not a multiple of tile size (#154999)

The emitted code tests whether the current tile should executing the
remainder iterations by checking the logical iteration number is the one
after the floor iterations that execute the non-remainder iterations.
There are two counts of how many iterations there are: Those of
non-remainder iterations (simply rounded-down division of tripcount and
tile size), and those including an additional floor iteration for the
remainder iterations. The code was used the wrong one that caused the
condition to never match.

[VPlan][RISC-V] Add test case for #154103

This has now been fixed by #152707

[clang-repl] Delegate CodeGen related operations for PTU to IncrementalParser (#137458)

Read discussion : https://github.com/llvm/llvm-project/pull/136404#discussion_r2059149768
and the following comments for context

Motivation
1) `IncrementalAction` is designed to keep Frontend statealive across
inputs. As per the docstring: “IncrementalAction ensures it keeps its
underlying action's objects alive as long as the IncrementalParser needs
them.”
2) To align responsibilities with that contract, the parser layer (host:
`IncrementalParser`, device: `IncrementalCUDADeviceParser`) should
manage PTU registration and module generation, while the interpreter
orchestrates at a higher level.

What this PR does
1) Moves CodeGen surfaces behind IncrementalAction:
GenModule(), getCodeGen(), and the cached “first CodeGen module” now
live in IncrementalAction.

2) Moves PTU ownership to the parser layer:
Adds IncrementalParser::RegisterPTU(…) (and device counterpart)

3) Add device-side registration in IncrementalCUDADeviceParser.

4) Remove Interpreter::{getCodeGen, GenModule, RegisterPTU}.

[TableGen][DecoderEmitter] Remove no longer needed MaxFilterWidth (NFC) (#155382)

11c61581 made the variable redundant.
Also remove `Target`, which is apparently unused.

[mlir][SCFToOpenMP] Use walk pattern driver (#155242)

The lowering pattern uses various APIs that are not supported in a
dialect conversion such as `Block::eraseArguments` and
`RewriterBase::replaceAllUsesWith`. Switch to the more efficient and
simpler walk pattern driver.

[LV] Add early-exit test where the inner loop IV depends on outer loop.

[MLIR] Apply clang-tidy fixes for misc-use-internal-linkage in DialectTransform.cpp (NFC)

[MLIR] Apply clang-tidy fixes for performance-unnecessary-value-param in DialectTransform.cpp (NFC)

[gn build] Port 2ab4c2880db6

[flang][OpenMP] move omp end directive validation to semantics (#154739)

The old parse tree errors quckly exploded to thousands of unhelpful
lines when there were multiple missing end directives (e.g. #90452).

Instead I've added a flag to the parse tree indicating when a missing
end directive needs to be diagnosed, and moved the error messages to
semantics (where they are a lot easier to control).

This has the disadvantage of not displaying the error if there were
other parse errors, but there is a precedent for this approach (e.g.
parsing atomic constructs).

[mlir][MemRef] Address TODO to use early_inc to simplify elimination of uses (NFC) (#155123)

[MLIR][EmitC] Bugfix in emitc.call_opaque operand emission (#153980)

The operand emission needed the operand to be in scope which lead to
failure when the emitc.call_opaque is in an emitc.expression's body.

[lldb] Fix spacing in ""proccess plugin packet monitor"" help

[SCEVExp] Check if getPtrToIntExpr resulted in CouldNotCompute.

This fixes a crash trying to use SCEVCouldNotCompute, if getPtrToIntExpr
failed.

Fixes https://github.com/llvm/llvm-project/issues/155287

[MLIR] Apply clang-tidy fixes for performance-unnecessary-value-param in ExecutionEngineModule.cpp (NFC)

[flang][OpenMP] move omp end sections validation to semantics (#154740)

See #90452. The old parse tree errors exploded to thousands of unhelpful
lines when there were multiple missing end directives.

Instead, allow a missing end directive in the parse tree then validate
that it is present during semantics (where the error messages are a lot
easier to control).

[clang][bytecode][NFC] Use Pointer::initializeAllElements() in Program (#155391)

We just initialized the entire string, so use this function instead.

[Offload] Full AMD support for olMemFill (#154958)

[mlir][vector] Fix crashes in `from_elements` folder + `broadcast` verifier (#155393)

This PR fixes two crashes / failures.

1. The `vector.broadcast` verifier did not take into account
`VectorElementTypeInterface` and was looking for int/index/float types.
2. The `vector.from_elements` folder attempted to create an invalid
`DenseElementsAttr`. Only int/float/index/complex types are supported.

[clang][bytecode][NFC] Check hasTrivialDtor() in RunDestructors (#155381)

We do this when calling Free() on dynamically allocated memory.

AMDGPU: Stop checking if registers are reserved in adjustAllocatableRegClass (#155125)

This function is used to implement TargetInstrInfo::getRegClass and
conceptually should not depend on the dynamic state of the function.

[RISCV][NFC] Fix typo v32 -> v31 in document (#155389)

[VPlan] Replace EVL branch condition with (branch-on-count AVLNext, 0) (#152167)

This changes the branch condition to use the AVL's backedge value
instead of the EVL-based IV.

This allows us to emit bnez on RISC-V and removes a use of the trip
count, which should reduce register pressure.

To match phis with VPlanPatternMatch I've had to relax the assert that
the number of operands must exactly match the pattern for the Phi
opcode, and I've copied over m_ZExtOrSelf from the LLVM IR
PatternMatch.h.

Fixes #151459

[MLIR] Apply clang-tidy fixes for llvm-include-order in IRAffine.cpp (NFC)

[MLIR] Apply clang-tidy fixes for performance-unnecessary-value-param in IRAffine.cpp (NFC)

[MLIR] Apply clang-tidy fixes for llvm-else-after-return in IRAttributes.cpp (NFC)

[clang][bytecode] Support remaining add_sat like X86 builtins (#155358)

[RelLookupTableConverter] Generate test checks (NFC)

This was using a mix of generated check lines and manual edits,
which makes future changes hard. Regenerate with a newer version
and --check-globals.

[clang][bytecode] Try to avoid dtor functions in Record descriptors (#155396)

We don't need to call the dtor fn of a record where all bases, fields
and virtual bases have no dtor fn either.

[AArch64] Expand MI->getOperand(1).getImm() with 0 literal (#154598)

`MI->getOperand(1).getImm()` has already been verified to be 0 entering
the block.

[VPlan] Compute cost of replicating calls in VPlan. (NFCI) (#154291)

Implement computing the scalarization overhead for replicating calls in
VPlan, matching the legacy cost model.

Depends on https://github.com/llvm/llvm-project/pull/154126. 

PR: https://github.com/llvm/llvm-project/pull/154291

[X86] Show failure to fold freeze(gfni()) -> gfni(freeze(),freeze()) for all gfni instructions

[InstCombine] Generate test checks (NFC)

[llvm-exegesis] Implement the loop repetition mode for AArch64 (#154751)

Subject says it all: implement the loop iterator decrement and jump
function functions, and reserve X19 for the loop counter.

[GWP-ASan] Include <unistd.h> for sysconf(_SC_PAGESIZE) (#155261)

This fixes build failures on Fuchsia that started with #153860

[VPlan] Improve style around container-inserts (NFC) (#155174)

[MLIR] Apply clang-tidy fixes for performance-unnecessary-value-param in IRAttributes.cpp (NFC)

[MLIR] Apply clang-tidy fixes for misc-use-internal-linkage in IRCore.cpp (NFC)

[flang][OpenMP] Delete no longer used Omp[End]CriticalDirective, NFC (#155099)

[Headers][X86] Allow AVX512VLBW integer reduction intrinsics to be used in constexpr (#155199)

Fixes #154284

Add constexpr support for the following:

_mm_reduce_add_epi8 _mm_reduce_add_epi16 _mm256_reduce_add_epi8
_mm256_reduce_add_epi16 _mm_reduce_mul_epi8 _mm_reduce_mul_epi16
_mm256_reduce_mul_epi8 _mm256_reduce_mul_epi16 _mm_reduce_and_epi8
_mm_reduce_and_epi16 _mm256_reduce_and_epi8 _mm256_reduce_and_epi16
_mm_reduce_or_epi8 _mm_reduce_or_epi16 _mm256_reduce_or_epi8
_mm256_reduce_or_epi16

_mm_mask_reduce_add_epi8 _mm_mask_reduce_add_epi16
_mm256_mask_reduce_add_epi8 _mm256_mask_reduce_add_epi16
_mm_mask_reduce_mul_epi8 _mm_mask_reduce_mul_epi16
_mm256_mask_reduce_mul_epi8 _mm256_mask_reduce_mul_epi16
_mm_mask_reduce_and_epi8 _mm_mask_reduce_and_epi16
_mm256_mask_reduce_and_epi8 _mm256_mask_reduce_and_epi16
_mm_mask_reduce_or_epi8 _mm_mask_reduce_or_epi16
_mm256_mask_reduce_or_epi8 _mm256_mask_reduce_or_epi16

_mm_reduce_max_epi8 _mm_reduce_max_epi16 _mm256_reduce_max_epi8
_mm256_reduce_max_epi16 _mm_reduce_min_epi8 _mm_reduce_min_epi16
_mm256_reduce_min_epi8 _mm256_reduce_min_epi16 _mm_reduce_max_epu8
_mm_reduce_max_epu16 _mm256_reduce_max_epu8 _mm256_reduce_max_epu16
_mm_reduce_min_epu8 _mm_reduce_min_epu16 _mm256_reduce_min_epu8
_mm256_reduce_min_epu16

_mm_mask_reduce_max_epi8 _mm_mask_reduce_max_epi16
_mm256_mask_reduce_max_epi8 _mm256_mask_reduce_max_epi16
_mm_mask_reduce_min_epi8 _mm_mask_reduce_min_epi16
_mm256_mask_reduce_min_epi8 _mm256_mask_reduce_min_epi16
_mm_mask_reduce_max_epu8 _mm_mask_reduce_max_epu16
_mm256_mask_reduce_max_epu8 _mm256_mask_reduce_max_epu16
_mm_mask_reduce_min_epu8 _mm_mask_reduce_min_epu16
_mm256_mask_reduce_min_epu8 _mm256_mask_reduce_min_epu16

[Clang] Generate test checks (NFC)

This test was already using generated test checks, but with minor
manual adjustments. Make it fully generated, as check lines for
metadata are supported nowadays.

[Offload][Conformance] Add README file (#155190)

This patch introduces a `README.md` file for the GPU math conformance
test suite located in `offload/unittests/Conformance`.

The goal of this document is to provide clear and thorough instructions
for new users and future contributors. It covers the project's purpose,
system requirements, build and execution steps, testing methodology, and
overall architecture.

[Clang] Support generic bit counting builtins on fixed boolean vectors (#154203)

Summary:
Boolean vectors as implemented in clang can be bit-casted to an integer
that is rounded up to the next primitive sized integer. Users can do
this themselves, but since the counting bits are very likely to be used
with bitmasks like this and the generic forms are expected to be
generic it seems reasonable that we handle this case directly.

[X86] canCreateUndefOrPoisonForTargetNode - add GF2P8AFFINEINVQB / GF2P8AFFINEQB / GF2P8MULB handling (#155409)

All 3 instructions are well defined bit twiddling operations - they do
not introduce undef/poison with well defined inputs.

Fixes regressions in #152107

[NFC][SimplifyCFG] Simplify operators for the combined predicate in `mergeConditionalStoreToAddress` (#155058)

This is about code readability. The operands in the disjunction forming the combined predicate in `mergeConditionalStoreToAddress` could sometimes be negated twice. This patch addresses that.

2 tests needed updating because they exposed the double negation and now they don’t.

[libc++][C++03][NFC] Remove XFAILS from libcxx/test/libcxx (#155384)

We've split the implementation-specific tests into
`libcxx/test/libcxx-03`, so we don't need the annotations in
`libcxx/test/libcxx` anymore.

[lldb][lldb-dap] parse `pathFormat` as an optional (#155238)

pathFormat is an optional field in `initializeAruguments`.

[libc++][C++03] Fix test/libcxx-03/system_reserved_names.gen.py (#155385)

This test only fails because it includes `<__config>`. Switch to using
`<__cxx03/__config>` instead to fix the issue.

[libc++] Refactor key extraction for __hash_table and __tree (#154512)

This patch replaces `__can_extract_key` with an overload set to try to
extract the key. This simplifies the code, since we don't need to have
separate overload sets for the unordered and associative containers. It
also allows extending the set of extraction cases more easily, since we
have a single place to define how the key is extracted.

Revert ""[llvm-exegesis] Implement the loop repetition mode for AArch64"" (#155423)

I see some build bot failures:
- https://lab.llvm.org/buildbot/#/builders/76/builds/12434/
- https://lab.llvm.org/buildbot/#/builders/55/builds/16251/

Revert llvm/llvm-project#154751 while I investigate this.

[gn build] Port af1f06e41b05

[LLDB] Re-land 'Update DIL handling of array subscripting' (#154269)

This attempts to fix the issues with the original PR (#151605), updating
the DIL code for handling array subscripting to more closely match and
handle all the casees from the original 'frame var' implementation. The
first PR did not include special-case code for objc pointers, which
apparently caused a test failure on the green-dragon buildbot. Hopefully
this PR, which includes the objc pointer special code, fixes that issue.

AMDGPU: Replace copy-to-mov-imm folding logic with class compat checks (#154501)

This strengthens the check to ensure the new mov's source class
is compatible with the source register. This avoids using the register
sized based checks in getMovOpcode, which don't quite understand
AV superclasses correctly. As a side effect it also enables more folds
into true16 movs.

getMovOpcode should probably be deleted, or at least replaced
with class check based logic. In this particular case other
legality checks need to be mixed in with attempted IR changes,
so I didn't try to push all of that into the opcode selection.

[VPlan] Add VPlan-based addMinIterCheck, replace ILV for non-epilogue. (#153643)

This patch adds a new VPlan-based addMinimumIterationCheck, which
replaced the ILV version for the non-epilogue case.

The VPlan-based version constructs a SCEV expression to compute the
minimum iterations, use that to check if the check is known true or
false. Otherwise it creates a VPExpandSCEV recipe and emits a
compare-and-branch.

When using epilogue vectorization, we still need to create the minimum
trip-count-check during the legacy skeleton creation. The patch moves
the definitions out of ILV.

PR: https://github.com/llvm/llvm-project/pull/153643

X86: Remove LOW32_ADDR_ACCESS_RBPRegClass (#155127)

[lldb] Underline short option letters as mnemonics (#153695)

Whenever an option would use something other than the first letter of
the long option as the short option, Jim would capitalized the letter we
picked as a mnemonic. This has often been mistaken for a typo and Jim
wondered if we should stop doing this.

During the discussion, David mentioned how this reminds him of the
underline in menu bars when holding down alt. I suggested we do
something similar in LLDB by underlying the letter in the description.

https://discourse.llvm.org/t/should-we-remove-the-capital-letter-in-option-helps/87816

s390x: pattern match saturated truncation (#155377)

Simplify min/max instruction matching by making the related
SelectionDAG operations legal.

Add patterns to match (signed and unsigned) saturated
truncation based on open-coded min/max patterns.

Fixes https://github.com/llvm/llvm-project/issues/153655

[clang][bytecode] Cleanup primitive descriptor ctor/dtor handling (#155401)

Use switches instead of if statements and COMPOSITE_TYPE_SWITCH and
remove some leftover move functions.

Revert ""[AMDGPU] gfx1250 trans instructions bf16 codegen tests update. NFC (#155310)""

This reverts commit 43a9b666b6ce75cb7bfe206f744cc6f9a938f28d.  Was causing
ninja check-llvm failures on x86 host.

Reapply ""[RISCV] Add test coverage for upcoming change to zicond select lowering""""

This was reverted because a previous version had check lines which didn't
match tip of tree.  Looking back through my terminal history, I'm 99% sure
this was a failure to update after a pull, but the diff itself looks
suspicious like other user error.  I've run ninja check-llvm on this one
 multiple times.  :)

[clang-format] Fix a bug in SkipMacroDefinitionBody (#155346)

All comments before the macro definition body should be skipped.

[RISCV] Add tied source operand to Zvqdotq MC instructions. (#155286)

This is consistent with what we do for integer and FP multiply
accumulate instructions.

We need new classes because normal multiply accumulate have the operands
in a different order.

[X86] Use array instead of SmallVector. NFC (#155321)

[TableGen][DecoderEmitter] Optimize single-case OPC_ExtractField (#155414)

OPC_ExtractField followed by a single OPC_FilterValue is equivalent to
OPC_CheckField. Optimize this relatively common case.

Revert ""[libc++] Refactor key extraction for __hash_table and __tree (#154512)""

This reverts commit af1f06e41b05c267480f1629dc0fcdf18f3b59f6.

This is causing some build failures in premerge as some of the LLDB
tests fail.

[gn build] Port 72c04bb882ad

[OpenACC] Add C tests for recipe generation, fix NYI

I realized while messing with other things that I'd written all of the
recipe tests for C++, so this patch adds a bunch of tests for C mode.
The assert wasn't quite accurate (as C default init doesn't really do
anything/have an AST node), so that is corrected.  Also, the lack of
cir.copy causes some of the firstprivate tests to be incomplete, so
added TODOs for that as well.

[clang-format] Use proper flags for git diff-tree (#155247)

From local testing, git diff-tree does not support three dot diffs
correctly, instead expecting the --merge-base flag to be passed along
with two commits. From my reading, the documentation
(https://git-scm.com/docs/git-diff-tree) also confirms this. This patch
updates the git-clang-format script to be correct.

I don't think we ever ran into this issue before because we never ended
up using it. For the PR code format job I believe we would just
explicitly pass the merge base, completely bypassing the problem.

[HLSL][DirectX] Add the Qdx-rootsignature-strip driver option (#154454)

This pr adds the `Qstrip-rootsignature` as a `DXC` driver option.

To do so, this pr introduces the `BinaryModifyJobClass` as an `Action`
to modify a produced object file before its final output.

Further, it registers `llvm-objcopy` as the tool to modify a produced
`DXContainer` on the `HLSL` toolchain.

This allows us to specify the `Qstrip-rootsignature` option to
`clang-dxc` which will invoke `llvm-objcopy` with a
`--remove-section=RTS0` argument to implement its functionality.

Resolves: https://github.com/llvm/llvm-project/issues/150275.

[DirectX] Fix the writing of ConstantExpr GEPs to DXIL bitcode (#154446)

Fixes #153304

Changes:
- When writing `ConstantExpr` GEPs to DXIL bitcode, the bitcode writer
will use the old Constant Code `CST_CODE_CE_GEP_OLD = 12` instead of the
newer `CST_CODE_CE_GEP = 32` which is interpreted as an undef in DXIL.
Additional context: [CST_CODE_CE_GEP = 12 in
DXC](https://github.com/microsoft/DirectXShaderCompiler/blob/0c9e75e7e91bb18fab101abc81d399a0296f499e/include/llvm/Bitcode/LLVMBitCodes.h#L187)
while the same constant code is labeled [CST_CODE_CE_GEP_OLD in
LLVM](https://github.com/llvm/llvm-project/blob/65de318d186c815f43b892aa20b98c50f22ab6fe/llvm/include/llvm/Bitcode/LLVMBitCodes.h#L411)
- Modifies the `PointerTypeAnalysis` to be able to analyze pointer-typed
constants that appear in the operands of instructions so that the
correct type of the `ConstantExpr` GEP is determined and written into
the DXIL bitcode.
- Adds a `PointerTypeAnalysis` test and dxil-dis test to ensure that the
pointer type of `ConstantExpr` GEPs are resolved and `ConstantExpr` GEPs
are written to DXIL bitcode correctly

In addition, this PR also adds a missing call to
`GV.removeDeadConstantUsers()` in the DXILFinalizeLinkage pass, and
removes an unnecessary manual removal of a ConstantExpr in the
DXILFlattenArrays pass.

[clang-tidy][test] Make check_clang_tidy.py work with very long file paths (#155318)

http://github.com/llvm/llvm-project/pull/95220 added a test with a very
long file path, which can fail if run on Windows with a long directory
path.

On Windows, there are file path length limits, which can be worked
around by prefixing the (absolute) path with '\\?\':
https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation

---------

Co-authored-by: Reid Kleckner <rnk@google.com>

[AArch64] AArch64TargetLowering::computeKnownBitsForTargetNode - add support for AArch64ISD::MOV/MVN constants (#154039)

Add support for the following constant nodes in
`AArch64TargetLowering::computeKnownBitsForTargetNode`:
```
  case AArch64ISD::MOVIedit:
  case AArch64ISD::MOVImsl:
  case AArch64ISD::MVNIshift:
  case AArch64ISD::MVNImsl:
```

Also add `AArch64TargetLowering::computeKnownBitsForTargetNode` tests
for all the MOVI constant nodes in
`llvm/unittests/Target/AArch64/AArch64SelectionDAGTest.cpp`

Fixes: #153159

---------

Co-authored-by: Simon Pilgrim <llvm-dev@redking.me.uk>

[Interpreter] Fix a warning

This patch fixes:

  clang/lib/Interpreter/IncrementalAction.h:37:21: error: private
  field 'CI' is not used [-Werror,-Wunused-private-field]

[NFC][DirectX] Fix variable set but not used warning (#155445)

[compiler-rt] Fix a warning

This patch fixes:

  compiler-rt/lib/asan/tests/asan_test.cpp:398:27: error: allocation
  of insufficient size '0' for type 'int' with size '4'
  [-Werror,-Walloc-size]

[NFC][MC][XCore] Rearrange decoder functions for XCore disassembler (#155009)

Rearrange decode functions to be before including the generated
disassembler code and eliminate forward declarations for most of them.
This is possible because `fieldFromInstruction` is now in MCDecoder.h
and not in the generated disassembler code.

[flang] optimize `sind` precision (#155429)

Part of https://github.com/llvm/llvm-project/issues/150452.

[NFC][MC][ARM] Rearrange decode functions in ARM disassembler (#154988)

Move `tryAddingSymbolicOperand` and `tryAddingPcLoadReferenceComment` to
before including the generated disassembler code. This is in preparation
for rearranging the decoder functions to eliminate forward declarations.

[LV] Remove unused ILV::VectorTripCount (NFC).

The field is no longer used, remove it.

[NFC][Asan] Fix warning in test (#155447)

After #150028.

Warning:
```
asan_test.cpp:398:27: error: allocation of insufficient size '0' for type 'int' with size '4'
```

[CI] Save sccache logs (#155444)

This patch saves the sccache logs to the artifacts. If sccache dies and
the server prints logs, we currently do not collect them anywhere and
they do not get dumped to STDOUT/STDERR. If the process is directly
getting killed (SIGTERM), it seems like it doesn't dump anything, but in
most other cases we should be able to see something.

Related to #155442.

[NFC][DirectX] Fix build failure (#155441)

Add `BinaryFormat` to `LINK_COMPONENTS` to fix the following linker
error:

```
ld.lld: error: undefined symbol: llvm::dxbc::getRootParameterTypes()
>>> referenced by DXILRootSignature.cpp
>>>               lib/Target/DirectX/CMakeFiles/LLVMDirectXCodeGen.dir/DXILRootSignature.cpp.o:(llvm::dxil::RootSignatureAnalysisPrinter::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&))

ld.lld: error: undefined symbol: llvm::dxbc::getShaderVisibility()
>>> referenced by DXILRootSignature.cpp
>>>               lib/Target/DirectX/CMakeFiles/LLVMDirectXCodeGen.dir/DXILRootSignature.cpp.o:(llvm::dxil::RootSignatureAnalysisPrinter::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&))
>>> referenced by DXILRootSignature.cpp
>>>               lib/Target/DirectX/CMakeFiles/LLVMDirectXCodeGen.dir/DXILRootSignature.cpp.o:(llvm::dxil::RootSignatureAnalysisPrinter::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&))
```

Root cause: https://github.com/llvm/llvm-project/pull/154249 changed a
header-only dependency to a real dependency without noticing that the
dependency was missing in CMakeLists.txt

Bitcode: Stop combining function alignments into MaxAlignment.

MaxAlignment is used to produce the abbreviation for MODULE_CODE_GLOBALVAR
and is not used for anything related to function alignments, so stop
combining function alignments and rename it to make its purpose clearer.

Reviewers: teresajohnson

Reviewed By: teresajohnson

Pull Request: https://github.com/llvm/llvm-project/pull/155341

[SCEV] Try to push op into ZExt: C * zext (A + B) -> zext (A*C + B*C) (#155300)

Try to push constant multiply operand into a ZExt containing an add, if
possible. In general we are trying to push down ops through ZExt if
possible. This is similar to
https://github.com/llvm/llvm-project/pull/151227 which did the same for
additions.

For now this is restricted to adds with a constant operand, which is
similar to some of the logic above.

This enables some additional simplifications.

Alive2 Proof: https://alive2.llvm.org/ce/z/97pbSL

PR: https://github.com/llvm/llvm-project/pull/155300

[CIR] Add VTTAddrPointOp (#155048)

This adds the definition, verification, and lowering for CIR's
VTTAddrPointOp. This is a bit ahead of the current codegen
implementation, which doesn't yet have support for emitting VTT
definitions, but since this doesn't depend on any of the other work in
progress, it is being upstreamed in advance.

[RISCV][VLOPT] Update vl-opt-op-info.mir test with extra COPYs. NFC

[Transforms] Allow non-regex Source in SymbolRewriter in case of using ExplicitRewriteDescriptor (#154319)

Do not check that Source is a valid regex in case of Target (explicit)
transformation. Source may contain special symbols that may cause an
incorrect `invalid regex` error.

Note that source and exactly one of [Target, Transform] must be
provided.

`Target (explicit transformation)`: In this kind of rule `Source` is
treated as a symbol name and is matched in its entirety. `Target` field
will denote the symbol name to transform to.

`Transform (pattern transformation)`: This rule treats `Source` as a
regex that should match the complete symbol name. `Transform` is a regex
specifying the name to transform to.

[MLIR] Apply clang-tidy fixes for modernize-use-using in IRCore.cpp (NFC)

[MLIR] Apply clang-tidy fixes for performance-move-const-arg in IRCore.cpp (NFC)

[MLIR] Apply clang-tidy fixes for readability-identifier-naming in IRCore.cpp (NFC)

[clang] NFC: introduce Type::getAsEnumDecl, and cast variants for all TagDecls (#155463)

And make use of those.

These changes are split from prior PR #155028, in order to decrease the
size of that PR and facilitate review.

[Flang] Fix BUILD_SHARED_LIBS build (#155422)

In contrast to linking a static library, when linking a shared library
all referenced symbols must be available in either the objects files,
static libraries, or shared libraries passed to the linker command line
and cannot be deferred to when building the executable.

Fixes #150027

Same fix as included in #152223, but with only the changes necessary to
fix #150027 (which is unrelated to GCC 15)

[NFC][WPD] code style fixes (#155454)

Revert ""[CI] Save sccache logs (#155444)""

This reverts commit c81cc9f55b8d21d9421cdb00755b241f9852eca0.

This is causing premerge failures and needs more testing.

[ARM] Update a number of MVE tests to use -cost-kind=all. NFC

[gn build] Disable objc rewriter (#155479)

This is off by default in the CMake build:
https://github.com/llvm/llvm-project/blob/b90f4ff3020c6fe018ec22b22a7faa5541ed5372/clang/CMakeLists.txt#L441

[AMDGCN] Add missing gfx1250 clang tests. NFC. (#155478)

Remove trailing whitespace in DiagnosticSemaKinds.td. NFC (#155482)

[clang][PAC] Fix builtins that claim address discriminated types are bitwise compatible (#154490)

A number of builtins report some variation of ""this type is compatibile
with some bitwise equivalent operation"", but this is not true for
address discriminated values. We had address a number of cases, but not
all of them. This PR corrects the remaining builtins.

Fixes #154394

[mlir][acc] Add destroy region to reduction recipes (#155480)

Reduction recipes capture how a private copy is created. In some
languages, like C++ class variables with destructors - that private copy
also must be properly destroyed. Thus update the reduction recipe to
contain a `destroy` region similarly to the private recipes.

[hwasan] Add hwasan-static-linking option (#154529)

Discarding the `.note.hwasan.globals` section in ldscript causes a
linker error, since `hwasan_globals` refers to the discarded section.
The issue comes from `hwasan.dummy.global` being associated via metadata
with `.note.hwasan.globals`.

Add a new `-hwasan-static-linking` option to skip inserting
`.note.hwasan.globals` for static binaries, as it is only needed for
instrumenting globals from dynamic libraries. In static binaries, the
global variables section can be accessed directly via the
`__start_hwasan_globals` and `__stop_hwasan_globals` symbols inserted by
the linker.

[lldb] Do not use LC_FUNCTION_STARTS data to determine symbol size as symbols are created  (#155282)

Note: This is a resubmission of #106791. I had to revert this a year ago
for a failing test that I could not understand. I have time now to try
and get this in again.

Summary:
This improves the performance of ObjectFileMacho::ParseSymtab by
removing eager and expensive work in favor of doing it later in a
less-expensive fashion.

Experiment:
My goal was to understand LLDB's startup time.
First, I produced a Debug build of LLDB (no dSYM) and a
Release+NoAsserts build of LLDB. The Release build debugged the Debug
build as it debugged a small C++ program. I found that
ObjectFileMachO::ParseSymtab accounted for somewhere between 1.2 and 1.3
seconds consistently. After applying this change, I consistently
measured a reduction of approximately 100ms, putting the time closer to
1.1s and 1.2s on average.

Background:
ObjectFileMachO::ParseSymtab will incrementally create symbols by
parsing nlist entries from the symtab section of a MachO binary. As it
does this, it eagerly tries to determine the size of symbols (e.g. how
long a function is) using LC_FUNCTION_STARTS data (or eh_frame if
LC_FUNCTION_STARTS is unavailable). Concretely, this is done by
performing a binary search on the function starts array and calculating
the distance to the next function or the end of the section (whichever
is smaller).

However, this work is unnecessary for 2 reasons:
1. If you have debug symbol entries (i.e. STABs), the size of a function
is usually stored right after the function's entry. Performing this work
right before parsing the next entry is unnecessary work.
2. Calculating symbol sizes for symbols of size 0 is already performed
in `Symtab::InitAddressIndexes` after all the symbols are added to the
Symtab. It also does this more efficiently by walking over a list of
symbols sorted by address, so the work to calculate the size per symbol
is constant instead of O(log n).

[IA][RISCV] Recognize interleaving stores that could lower to strided segmented stores (#154647)

This is a sibling patch to #151612: passing gap masks to the renewal TLI
hooks for lowering interleaved stores that use shufflevector to do the
interleaving.

NFC: remove some instances of deprecated capture (#154884)

```
 warning: implicit capture of 'this' with a capture default of '=' is deprecated [-Wdeprecated-this-capture]
```

Co-authored-by: Jeremy Kun <j2kun@users.noreply.github.com>

[LV] Remove unneeded ILV::LoopScalarPreHeader (NFC).

Follow-up suggested in https://github.com/llvm/llvm-project/pull/153643.
Remove some more global state by directly returning the scalar
preheader from createScalarPreheader.

[AArch64] Add another switch clustering test with power-of-2 constants.

Adds more test coverage for
https://github.com/llvm/llvm-project/pull/139736.

[AMDGPU] wmma_scale* IR verification (#155493)

[DAG] ComputeNumSignBits - ISD::EXTRACT_ELEMENT needs to return at least 1 (#155455)

When going through the ISD::EXTRACT_ELEMENT case, `KnownSign - rIndex *
BitWidth`
could produce a negative. When a negative is produced, the lower bound
of the `std::clamp` is returned. Change that lower bound to one to avoid
potential underflows, because the expectation is that
`ComputeNumSignBits`
should always return at least 1.

Fixes #155452.

[AMDGPU] Do not assert on non-zero COMPUTE_PGM_RSRC3 on gfx1250. NFCI (#155498)

COMPUTE_PGM_RSRC3 does exist on gfx1250, we are just not using it yet.

[NFC][Asan] Remove volatile from test

After #155447.
It's not needed, but does not compile on PowerPC.

Reapply ""[compiler-rt] Remove %T from shared object substitutions (#155302)""

This reverts commit 1d3c302171692293f74f92236b446b9240774d4d.

There were three test failures:
odr-violation.cpp - Attempted to fix by keeping everything in the same
folder.
interception-in-shared-lib-test.cpp - Tried folding comments to preserve
line numberings. Almost seems like a debug info issue on PPC.
odr_c_test.c - Attempted to fix by keeping everything in the same
folder.

[lldb] Corretly parse Wasm segments (#154727)

My original implementation for parsing Wasm segments was wrong in two
related ways. I had a bug in calculating the file vm address and I
didn't fully understand the difference between active and passive
segments and how that impacted their file vm address.

With this PR, we now support parsing init expressions for active
segments, rather than just skipping over them. This is necessary to
determine where they get loaded.

Similar to llvm-objdump, we currently only support simple opcodes (i.e.
constants). We also currently do not support active segments that use a
non-zero memory index. However this covers all segments for a
non-trivial Swift binary compiled to Wasm.

[flang][openacc] Only generate acc.terminator in compute construct (#155504)

When the end of a block is inside a data region (not a compute region),
generating an `acc.terminator` will lead to a missing terminator when
translating to LLVM.

Only generate acc.terminator instead of fir.unreachable when nested in
acc compute region.

[MLIR] Apply clang-tidy fixes for performance-unnecessary-value-param in IRTypes.cpp (NFC)

Revert ""[AArch64] AArch64TargetLowering::computeKnownBitsForTargetNode - add support for AArch64ISD::MOV/MVN constants"" (#155503)

Reverts llvm/llvm-project#154039, as it breaks bots.

[lldb] Adding structured types for existing MCP calls. (#155460)

This adds or renames existing types to match the names of the types on
https://modelcontextprotocol.io/specification/2025-06-18/schema for the
existing calls.

The new types are used in the unit tests and server implementation to
remove the need for crafting various `llvm::json::Object` values by
hand.

[ProfCheck] Exclude new LoopVectorize Test (#155502)

[MLIR][LLVMIR][DLTI] Pass to update #llvm.target's features per relevant backend (#154938)

Modifies `#llvm.target<..., features = $FEATURES>` so that `$FEATURES`
is now an `#llvm.target_features<[...]>` attribute (rather than a
`StringAttr`). This enables the attribute to respond to DLTI queries for
the different target features.

The pass updates the `$FEATURES` attribute of the target attr at name
`llvm.target` in accordance with the (Sub)Target's features that the
relevant LLVM backend knows about.

---

DEMO:
```mlir
module attributes {llvm.target = #llvm.target<triple = ""x86_64-unknown-linux"",
                                              chip = ""skylake""> } {
}
```
by way of `-llvm-target-to-target-features` turns into:
```mlir
module attributes {llvm.target = #llvm.target<triple = ""x86_64-unknown-linux"",
                                              chip = ""skylake"", 
                                              features = <[""+64bit"", ""+64bit-mode"", ""+adx"", ""+aes"", ""+allow-light-256-bit"", ""+avx"", ""+avx2"", ""+bmi"", ""+bmi2"", ""+clflushopt"", ""+cmov"", ""+crc32"", ""+cx16"", ""+cx8"", ""+ermsb"", ""+f16c"", ""+false-deps-popcnt"", ""+fast-15bytenop"", ""+fast-gather"", ""+fast-scalar-fsqrt"", ""+fast-shld-rotate"", ""+fast-variable-crosslane-shuffle"", ""+fast-variable-perlane-shuffle"", ""+fast-vector-fsqrt"", ""+fma"", ""+fsgsbase"", ""+fxsr"", ""+idivq-to-divl"", ""+invpcid"", ""+lzcnt"", ""+macrofusion"", ""+mmx"", ""+movbe"", ""+no-bypass-delay-blend"", ""+no-bypass-delay-mov"", ""+no-bypass-delay-shuffle"", ""+nopl"", ""+pclmul"", ""+popcnt"", ""+prfchw"", ""+rdrnd"", ""+rdseed"", ""+sahf"", ""+slow-3ops-lea"", ""+sse"", ""+sse2"", ""+sse3"", ""+sse4.1"", ""+sse4.2"", ""+ssse3"", ""+vzeroupper"", ""+x87"", ""+xsave"", ""+xsavec"", ""+xsaveopt"", ""+xsaves""]>>} {
}
```

[flang] Consolidate copy-in/copy-out determination in evaluate framework (#151408)

New implementation of `MayNeedCopy()` is used to consolidate
copy-in/copy-out checks.

`IsAssumedShape()` and `IsAssumedRank()` were simplified and are both
now in `Fortran::semantics` workspace.

`preparePresentUserCallActualArgument()` in lowering was modified to use
`MayNeedCopyInOut()`

Fixes https://github.com/llvm/llvm-project/issues/138471

[clang] Fix clang module build by declaring new textual header (#155510)

Add `clang/Basic/ABIVersions.def` introduced in #151995 to textual
header
to fix clang module build.

[fuzzer][Fuchsia] Forward fix for undefined StartRssThread (#155514)

The declaration was static when it shouldn't be since it can be defined
in FuzzerUtilFuchsia.cpp

Support: Add proxies for raw_ostream and raw_pwrite_stream (#113362)

Add proxies classes for `raw_ostream` and `raw_pwrite_stream` called
`raw_ostream_proxy` and `raw_pwrite_stream_proxy`. Add adaptor classes,
`raw_ostream_proxy_adaptor<>` and `raw_pwrite_stream_proxy_adaptor<>`,
to allow subclasses to use a different parent class than `raw_ostream`
or `raw_pwrite_stream`.

The adaptors are used by a future patch to help a subclass of
`llvm::vfs::OutputFile`, an abstract subclass of `raw_pwrite_stream`, to
proxy a `raw_fd_ostream`.

Patched by dexonsmith.

[gn build] Port 90670b5ca890

[libc][NFC] Clean up utimes and setsid (#155495)

Simplify utims a bit and add proper error handling to setsid as
described in the standard

[NFC][MC][XCore] Eliminate forward decls by rearranging functions (#155456)

Revert ""Reapply ""[compiler-rt] Remove %T from shared object substitutions (#155302)""""

This reverts commit 7624197dacfde71d21e3c88c308696ebb6f49f94.

This is causing more buildbot failures that probably need some offline
investigation:
1. https://lab.llvm.org/buildbot/#/builders/186/builds/11923

[NFC][WPD] Pass the module analysis manager instead of lambdas (#155338)

Easier to evolve - if we need more analyses, it becomes clumsy to keep passing around lambdas.

Reapply ""[AMDGPU] gfx1250 trans instructions bf16 codegen tests update. NFC (#155310)"" (#155515)

[CIR] Add support for initializing classes with multiple vtables (#155275)

This adds support for initializing the vptr members in a class that
requires multiple vtables because of multiple inheritence. This still
does not handle virtual bases.

[CI] Strip strings from filenames in compute_projects.py (#155519)

This can otherwise mess up some of the path detection logic,
particularly around ensuring the premerge checks are run when the
workflow YAML file is changed.

[RISCV][TTI] Implement getAddressComputationCost() in RISCV TTI. (#149955)

This patch implements the `getAddressComputationCost()` in RISCV TTI
which
make the gather/scatter with address calculation more expansive that
stride cost.

Note that the only user of `getAddressComputationCost()` with vector
type is in `VPWidenMemoryRecipe::computeCost()`. So this patch make some
LV tests changes.

I've checked the tests changes in LV and seems those changes can be
divided into two groups.
 * gather/scatter with uniform vector ptr, seems can be optimized to
 masked.load.
 * can optimize to stride load/store.

[lldb-dap] Improving lldbdap_testcase.py error diagnosability (#155352)

Improved response Message handling in lldbdap_testcase.py to handle
various formats. Allows for more descriptive error messaging (Provides
useful info even when error details are malformed)

---------

Co-authored-by: Piyush Jaiswal <piyushjais@meta.com>

[orc-rt] Fix comment typos in unit tests. NFC.

[lld][WebAssembly] -r: force -Bstatic (#108264)

This is a port of a recent ELF linker change: 8cc6a2469.

[AMDGPU] Set GRANULATED_WAVEFRONT_SGPR_COUNT of compute_pgm_rsrc1 to 0 for gfx10+ (#154666)

According to `llvm-project/llvm/docs/AMDGPUUsage.rst::L5212` the
`GRANULATED_WAVEFRONT_SGPR_COUNT`, which is `compute_pgm_rsrc1[6:9]` has
to be 0 for gfx10+ arch

---------

Co-authored-by: Matt Arsenault <Matthew.Arsenault@amd.com>

Revert ""[RISCV][TTI] Implement getAddressComputationCost() in RISCV TTI."" (#155535)

Reverts llvm/llvm-project#149955

Reapply ""[CI] Save sccache logs (#155444)"" (#155520)

This reverts commit b90f4ff3020c6fe018ec22b22a7faa5541ed5372.

Relands the change after making the relevant fixes (not missing the
`artifacts` directory).

AMDGPU: Fold mov imm to copy to av_32 class (#155428)

Previously we had special case folding into copies to AGPR_32,
ignoring AV_32. Try folding into the pseudos.

Not sure why the true16 case regressed.

[NFC] [clangd] [C++20 Modules] Add a warning if clangd detected multiple
source declares the same module

Now clangd assumes no duplicated module declared by different source
file in a sinlge project. But in practice, it may not be the case.

Although we can't fix it now, emitting a warning is helpful for users to
understand what's going on.

[DAGCombiner] Avoid double deletion when replacing multiple frozen/unfrozen uses (#155427)

Closes https://github.com/llvm/llvm-project/issues/155345.
In the original case, we have one frozen use and two unfrozen uses:
```
t73: i8 = select t81, Constant:i8<0>, t18
t75: i8 = select t10, t18, t73
t59: i8 = freeze t18 (combining)

t80: i8 = freeze t59 (another user of t59)
```

In `DAGCombiner::visitFREEZE`, we replace all uses of `t18` with `t59`.
After updating the uses, `t59: i8 = freeze t18` will be updated to `t59:
i8 = freeze t59` (`AddModifiedNodeToCSEMaps`) and CSEed into `t80: i8 =
freeze t59` (`ReplaceAllUsesWith`). As the previous call to
`AddModifiedNodeToCSEMaps` already removed `t59` from the CSE map,
`ReplaceAllUsesWith` cannot remove `t59` again.

For clarity, see the following call graph:
```
ReplaceAllUsesOfValueWith(t18, t59)
  ReplaceAllUsesWith(t18, t59)
    RemoveNodeFromCSEMaps(t73)
    update t73
    AddModifiedNodeToCSEMaps(t73)
    RemoveNodeFromCSEMaps(t75)
    update t75
    AddModifiedNodeToCSEMaps(t75)
    RemoveNodeFromCSEMaps(t59) <- first delection
    update t59
    AddModifiedNodeToCSEMaps(t59)
        ReplaceAllUsesWith(t59, t80)
            RemoveNodeFromCSEMaps(t59) <- second delection
                Boom!
```

This patch unfreezes all the uses first to avoid triggering CSE when
introducing cycles.

[clang][HeuristicResolver] Resolve explicit object parameter to enclosing record type (#155143)

Heuristically resolve the type of a `this auto` parameter to the record type
in the declaration. 

```cpp
struct Foo {
  int member {};
  auto&& getter1(this auto&& self) { // assume `self` is is `Foo`
    return self.member;
};
```

Fixes https://github.com/clangd/clangd/issues/2323

[flang][acc] Fix the indexing of the reduction combiner for multidimensional static arrays (#155536)

In the following example of reducing a static 2D array, we have
incorrect coordinates for array access in the reduction combiner. This
PR reverses the order of the induction variables used for such array
indexing. For other cases of static arrays, we reverse the loop order as
well so that the innermost loop can handle the innermost dimension.

```Fortran
program main
  implicit none
  integer, parameter :: m = 2
  integer, parameter :: n = 10
  integer :: r(n,m), i

  r = 0

  !$acc parallel loop reduction(+:r(:n,:m))
  do i = 1, n
     r(i, 1) = i
  enddo

  print *, r
end program main
```

Currently, we have:
```mlir
fir.do_loop %arg2 = %c0 to %c1 step %c1 {
  fir.do_loop %arg3 = %c0 to %c9 step %c1 {
    %0 = fir.coordinate_of %arg0, %arg2, %arg3 : (!fir.ref<!fir.array<10x2xi32>>, index, index) -> !fir.ref<i32>
    %1 = fir.coordinate_of %arg1, %arg2, %arg3 : (!fir.ref<!fir.array<10x2xi32>>, index, index) -> !fir.ref<i32>
```

We'll obtain:
```mlir
fir.do_loop %arg2 = %c0 to %c1 step %c1 {
  fir.do_loop %arg3 = %c0 to %c9 step %c1 {
    %0 = fir.coordinate_of %arg0, %arg3, %arg2 : (!fir.ref<!fir.array<10x2xi32>>, index, index) -> !fir.ref<i32>
    %1 = fir.coordinate_of %arg1, %arg3, %arg2 : (!fir.ref<!fir.array<10x2xi32>>, index, index) -> !fir.ref<i32>
```

[Github][CI] Install the correct binary of sccache on aarch64 (#155328)

[LoongArch][NFC] Pre-commit for BR_CC and SELECT_CC optimization (#151788)

AMDGPU: Remove unused argument from adjustAllocatableRegClass (#155554)

[RISCV] Lower (setugt X, 2047) as (setne (srl X, 11), 0) (#155541)

This matches 4095 and other pow2-1 constants larger simm12. We normally
do this through a DAGCombine controlled by isLegalICmpImmediate. 2047 is
considered a legal immediate because we have a setult instruction. In
this case we have setugt which isn't natively supported.

I added tests for 4095 for comparison.

[orc-rt] Add bind_front, a pre-c++-20 std::bind_front substitute. (#155557)

This can be used until the ORC runtime is able to move to c++-20.

Also adds a CommonTestUtils header with a utility class, OpCounter, that
counts the number of default constructions, copy constructions and
assignments, move constructions and assignments, and destructions. This
is used to test that orc_rt::bind_front doesn't introduce unnecessary
copies / moves.

AMDGPU: Remove special case of SGPR_LO class in imm folding (#155518)

Previous change accidentally broke this which shows it's not
doing anything.

[libc][math][c++23] Add {modf,remainder,remquo}bf16 math functions (#154652)

This PR adds the following basic math functions for BFloat16 type along
with the tests:
- modfbf16
- remainderbf16
- remquobf16

---------

Signed-off-by: Krishna Pandey <kpandey81930@gmail.com>
Co-authored-by: OverMighty <its.overmighty@gmail.com>

[RISCV] Group Zcf and Zcd instructions and CompressPats together. NFC (#155555)

Instead of repeatedly changing Predicates for each instruction.

[CodeGen] Optimize/simplify finalizeBundle. NFC (#155448)

When tracking defs in finalizeBundle two sets are used. LocalDefs is
used to track defined virtual and physical registers, while LocalDefsP
is used to track defined register units for the physical registers.

This patch moves the updates of LocalDefsP to only iterate over regunits
when a new physical register is added to LocalDefs. When the physical
register already is present in LocalDefs, then the corresponding
register units are present in LocalDefsP. So it was a waste of time to
add them to the set again.

[mlir][amx] Direct AMX data transfers (#154114)

Extends Vector to AMX conversion to attempt populating AMX tiles
directly from memory.

When possible, contraction producers and consumers are replaced by AMX
tile data transfer operations. This shortens data path by skipping
intermediate register loads and stores.

Add tools needed by build_symbolizer.sh to runtime deps when internal symbolizer enabled. (#153723)

[mlir][Transforms] Dialect conversion: Context-aware type conversions (#140434)

This commit adds support for context-aware type conversions: type
conversion rules that can return different types depending on the IR.

There is no change for existing (context-unaware) type conversion rules:
```c++
// Example: Conversion any integer type to f32.
converter.addConversion([](IntegerType t) {
  return Float32Type::get(t.getContext());
}
```

There is now an additional overload to register context-aware type
conversion rules:
```c++
// Example: Type conversion rule for integers, depending on the context:
// Get the defining op of `v`, read its ""increment"" attribute and return an
// integer with a bitwidth that is increased by ""increment"".
converter.addConversion([](Value v) -> std::optional<Type> {
  auto intType = dyn_cast<IntegerType>(v.getType());
  if (!intType)
    return std::nullopt;
  Operation *op = v.getDefiningOp();
  if (!op)
    return std::nullopt;
  auto incrementAttr = op->getAttrOfType<IntegerAttr>(""increment"");
  if (!incrementAttr)
    return std::nullopt;
  return IntegerType::get(v.getContext(),
                          intType.getWidth() + incrementAttr.getInt());
});
```

For performance reasons, the type converter caches the result of type
conversions. This is no longer possible when there context-aware type
conversions because each conversion could compute a different type
depending on the context. There is no performance degradation when there
are only context-unaware type conversions.

Note: This commit just adds context-aware type conversions to the
dialect conversion framework. There are many existing patterns that
still call `converter.convertType(someValue.getType())`. These should be
gradually updated in subsequent commits to call
`converter.convertType(someValue)`.

Co-authored-by: Markus Böck <markus.boeck02@gmail.com>

[BOLT][AArch64] Fix another cause of extra entry point misidentification (#155055)

[PowerPC] ppc64-P9-vabsd.ll - update v16i8 abdu test now that it vectorizes in the middle-end (#154712)

The scalarized IR was written before improvements to SLP / cost models
ensured that the abs intrinsic was easily vectorizable

opt -O3 : https://zig.godbolt.org/z/39T65vh8M

Now that it is we need a more useful llc test

[AMDGPU] Refactor insertWaveSizeFeature (#154850)

If a wavefrontsize32 or wavefrontsize64 is the only possible value
insert it into feature list by default and use that value as an
indication that another wavefront size is not legal.

s390x: optimize 128-bit fshl and fshr by high values (#154919)

Turn a funnel shift by N in the range `121..128` into a funnel shift in
the opposite direction by `128 - N`. Because there are dedicated
instructions for funnel shifts by values smaller than 8, this emits
fewer instructions.

This additional rule is useful because LLVM appears to canonicalize
`fshr` into `fshl`, meaning that the rules for `fshr` on values less
than 8 would not match on organic input.

[clang] Post-commit review for #150028 (#155351)

1) Return `std::nullopt` instead of `{}`.
 2) Rename the new function to evaluate*, it's not a simple getter.

[ASan] Prevent assert from scalable vectors in FunctionStackPoisoner. (#155357)

This has recently started causing 'Invalid size request on a scalable
vector.'

[LV] Add test for vectorisation of SAXPY unrolled by 5 (NFC). (#153039)

This test contains a vectorisation example of a loop based on SAXPY
manually unrolled by five, as discussed in #148808.

[Flang-RT][OpenMP] Define _GLIBCXX_NO_ASSERTIONS (#155440)

Since GCC 15.1, libstdc++ enabled assertions/hardening by default in
non-optimized (-O0) builds [1]. That is, _GLIBCXX_ASSERTIONS is defined
in the libstdc++ headers itself so defining/undefining it on the
compiler command line no longer has an effect in non-optimized builds.
As the commit message[2] suggests, define _GLIBCXX_NO_ASSERTIONS
instead.

For libstdc++ headers before 15.1, -U_GLIBCXX_ASSERTIONS still has to be
on the command line as well.

Defining _GLIBCXX_NO_ASSERTIONS was previously proposed in #152223

[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=112808
[2] https://github.com/gcc-mirror/gcc/commit/361d230fd7800a7e749aba8ed020f54f5c26d504

[AArch64][SME] Simplify initialization of the TPIDR2 block (#141049)

This patch updates the definition of `AArch64ISD::INIT_TPIDR2OBJ` to
take the number of save slices (which is currently always all ZA
slices). Using this, we can initialize the TPIDR2 block with a single
STP of the save buffer pointer and the number of save slices. The
reserved bytes (10-15) will be implicitly zeroed as the result of RDSVL
will always be <= 16-bits.

Note: We used to write the number of save slices to the TPIDR2 block
before every call with a lazy save; however, based on 6.6.9 ""Changes to
the TPIDR2 block"" in the aapcs64 
(https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#changes-to-the-tpidr2-block), 
it seems we can rely on callers preserving the contents of the TPIDR2 block.

[AMDGPU] More radical feature initialization refactoring (#155222)

Factoring in flang, just have a single fillAMDGPUFeatureMap
function doing it all as an external interface and returing
an error.

[mlir] Consistently add TableGen generated files as deps to `mlir-headers`/`mlir-generic-headers` CMake targets (#155474)

Tool targets like `mlir-opt` rely on the `mlir-headers` or
`mlir-generic-headers` targets to run first to generate headers.
However, many of the `IncGen` targets are not specified as dependencies
of the header targets in CMake, which causes spurious build failures when
using a high number of parallel build jobs.

Thus, this commit introduces a pair of new CMake macros
`add_mlir_dialect_tablegen_target` and
`add_mlir_generic_tablegen_target` to
`AddMLIR.cmake`, which can be used in place of
`add_public_tablegen_target` to
ensure (by convention) that `IncGen` targets are added to the
`mlir-headers`
(resp. `mlir-generic-headers`) target dependencies.

Most uses of `add_public_tablegen_target` in the dialects have been
refactored to use the new macros.

[MLIR] Adopt LDBG() in EliminateBarriers.cpp (NFC) (#155092)

Also add an extra optional TYPE argument to the LDBG() macro to make it
easier to punctually overide DEBUG_TYPE.

[KeyInstr] Enable -gkey-instructions by default if optimisations are enabled (#149509)

That's enabling Clang's -gkey-instructions, cc1's -gkey-instructions
remains off by default.

Key Instructions improves the optimized-code debug-stepping experience
in debuggers that use DWARF's `is_stmt` line table register to determine
stepping behaviour.

The feature can be disabled with -gno-key-instructions (note that the
positive and negative flag both imply -g).

RFC:
https://discourse.llvm.org/t/rfc-improving-is-stmt-placement-for-better-interactive-debugging/82668

[Bazel] Add missing Support dep to VectorToAMX (#155576)

[MLIR] Migrate Transform/IR/TransformOps.cpp to LDBG() debugging macro (NFC) (#155098)

[clang] AST: fix getAs canonicalization of leaf types (#155028)

[GlobalISel] Add support for scalarizing vector insert and extract elements (#153274)

This Adds scalarization handling for fewer vector elements of insert and
extract, so that i128 and fp128 types can be handled if they make it
past combines. Inserts are unmerged with the inserted element added to
the remerged vector, extracts are unmerged then the correct element is
copied into the destination. With a non-constant vector the usual stack
lowering is used.

[MLIR] Apply clang-tidy fixes for performance-unnecessary-value-param in Pass.cpp (NFC)

[Bazel] Add missing SCFTransforms dep to TestDialect (#155581)

[MLIR] Apply clang-tidy fixes for llvm-include-order in RegisterEverything.cpp (NFC)

[mlir][linalg] Produce canonical linalg.generic for im2col (#134675)

Before this patch, the Img2Col transform produced a non-canonical
linalg.generic whose input tensor was not reported in the inputs of the
operation: instead, it was accessed manually from inside the op body,
after an internal calculation of the access offsets. This patch modifies
the Im2Col rewrite to produce a canonical linalg.generic whose input is
correctly reported in its 'ins()', whose access offsets are computed
through an indexing map, and whose body contains only a 'linalg.yield'
op.

Signed-off-by: Fabrizio Indirli <Fabrizio.Indirli@arm.com>
Co-authored-by: Georgios Pinitas <georgios.pinitas@arm.com>

[clang][bytecode] Handle vector assignments (#155573)

[clang-repl] Put CompilerInstance fr",2025-08-30T21:28:33Z,2025-08-30T21:30:29Z,2025-08-30T21:30:24Z,,False,1,0,1,63,23,2
156201,closed,[ADT] Remove Mask in PointerEmbedded,kazutakahirata,"Mask, a private enum, isn't used anywhere in the class.
",2025-08-30T19:39:16Z,2025-09-01T02:19:06Z,2025-09-01T02:18:29Z,2025-09-01T02:18:29Z,True,1,0,1,0,3,1
156198,closed,[ARM] Simplify LowerCMP (NFC),AZero13,Pass the opcode directly.,2025-08-30T19:11:29Z,2025-08-31T14:50:14Z,2025-08-31T14:45:12Z,2025-08-31T14:45:12Z,True,2,0,3,4,12,1
156200,closed,"[ADT] Simplify DenseMap::{makeIterator,makeConstIterator} (NFC)",kazutakahirata,"makeIterator and makeConstIterator take a reference to DebugEpochBase,
which is the base class of DenseMapBase.  Since both these functions
and their callers are in DenseMapBase, we don't really need to pass
*this.

This patch drops ""&Epoch"" from these two functions and adjust callers
accordingly.
",2025-08-30T19:38:59Z,2025-08-31T01:29:09Z,2025-08-31T01:29:04Z,,False,2,0,1,16,19,1
156196,closed,release/21.x: [rtsan] Add versioned pthread_cond interceptors (#155970),llvmbot,"Backport 8f317c1

Requested by: @cjappl",2025-08-30T18:38:53Z,2025-09-05T00:47:54Z,2025-09-05T00:47:53Z,,False,9,0,1,46,0,2
156195,closed,[libc] Add CMake Target for Dl_info.h Header,boomanaiden154,"Otherwise when installing the dlfcn.h header, there is a missing reference to Dl_info.h, which causes compilation failures in some cases, notably libunwind.",2025-08-30T18:22:37Z,2025-09-02T23:22:14Z,2025-09-02T23:22:12Z,2025-09-02T23:22:12Z,True,1,0,1,2,0,2
156194,closed,[openmp] Fix missing include directory in omptest tool,mgorny,"Add missing `LIBOMP_INCLUDE_DIR` include directory to fix build failures in omptest, as reported
in https://github.com/llvm/llvm-project/pull/154786#issuecomment-3223481804. Thanks fo @jprotze for the suggested fix.",2025-08-30T18:22:00Z,2025-08-31T02:54:52Z,2025-08-31T02:54:45Z,2025-08-31T02:54:45Z,True,1,0,1,2,0,1
156197,closed,[MLIR][Python] fix standalone example/test,makslevental,Fix some things in `standalone` in order to unblock https://github.com/llvm/llvm-project/pull/155741.,2025-08-30T19:10:31Z,2025-08-31T00:52:08Z,2025-08-31T00:52:04Z,2025-08-31T00:52:04Z,True,1,0,1,21,9,4
156193,closed,[TargetLowering] Only freeze LHS and RHS if they are used multiple times in expandABD,AZero13,Not all paths in expandABD are using LHS and RHS twice.,2025-08-30T17:45:00Z,2025-08-31T11:52:34Z,2025-08-31T10:30:29Z,2025-08-31T10:30:29Z,True,5,0,2,19,16,2
156191,closed,[RISCV] Add computeKnownBitsForTargetNode for RISCVISD::SRAW.,topperc,"This node reads the lower 32 bits, shifts it right arithmetically
then sign extends to i64. If we know some of the lower 32 bits we
can propagate that information.
    
For the test case I had to find something that didn't get optimized
before type legalizaton and didn't get type legalized to a sign
extended value. The bswap gets type legalized to (lshr (bswap), 32).",2025-08-30T16:42:45Z,2025-08-31T01:27:23Z,2025-08-31T01:27:18Z,2025-08-31T01:27:18Z,True,1,0,2,34,0,2
156188,closed,"[TargetLowering] Don't do abdu(lhs, rhs) -> sub(xor(sub(lhs, rhs), uo…f(lhs, rhs)), uof(lhs, rhs)) if it is not custom lowered",AZero13,Otherwise we deal with a lot of crazy expansions that could be handled by a select.,2025-08-30T16:18:24Z,2025-08-30T16:23:57Z,2025-08-30T16:23:16Z,,False,1,0,2,2,1,1
156187,closed,[Headers][X86] Add constexpr support for some AVX[512] intrinsics.,moorabbit,"The following AVX[512] intrinsics are now constexpr:
- `_mm256_cvtepi32_pd`
- `_mm256_cvtepi32_ps`
- `_mm256_cvtps_pd`
- `_mm512_cvtepi32_ps`
- `_mm512_mask_cvtepi32_ps`
- `_mm512_maskz_cvtepi32_ps`
- `_mm512_cvtepu32_ps`
- `_mm512_mask_cvtepu32_ps`
- `_mm512_maskz_cvtepu32_ps`
- `_mm512_cvtepi32_pd`
- `_mm512_mask_cvtepi32_pd`
- `_mm512_maskz_cvtepi32_pd`
- `_mm512_cvtepi32lo_pd`
- `_mm512_mask_cvtepi32lo_pd`
- `_mm512_cvtepu32_pd`
- `_mm512_mask_cvtepu32_pd`
- `_mm512_maskz_cvtepu32_pd`
- `_mm512_cvtepu32lo_pd`
- `_mm512_mask_cvtepu32lo_pd`
- `_mm512_cvtps_pd`
- `_mm512_mask_cvtps_pd`
- `_mm512_maskz_cvtps_pd`
- `_mm512_cvtpslo_pd`
- `_mm512_mask_cvtpslo_pd`
- `_mm512_castsi512_si256`
- `_mm512_castps512_ps256`

This PR is part 1 of a series of PRs fixing #155798",2025-08-30T15:25:10Z,2025-09-01T16:04:25Z,2025-09-01T16:04:17Z,2025-09-01T16:04:17Z,True,2,2,5,106,78,4
156183,closed,[MLIR][BUG] fix {$VARIABLE} usage in CMakeLists.txt,x12301450,This pr fixed #156182 ,2025-08-30T14:16:55Z,2025-09-02T02:32:51Z,2025-09-02T02:32:51Z,2025-09-02T02:32:51Z,True,1,0,4,4,4,4
156184,closed,LLVM Qualification Group - Backlog documentation and Discussion Updates,CarlosAndresRamirez,"I have created backlog file for the Qualification group that contains all the topics currently under discussion  and I have added the new section in the main group's page,  referencing the backlog.

This Backlog will be used as the quick reference for anyone to know what are the current topics under discussion and what priorities have been given to them by the group.

Note for future editors: Add ""Last updated:"" comment on top of the document, easily keep track of the last updated dates. ",2025-08-30T14:28:46Z,2025-09-10T11:48:16Z,2025-09-10T11:47:58Z,2025-09-10T11:47:58Z,True,4,3,7,23,3,1
156181,closed,[TableGen][Decoder] Simplify parseFixedLenOperands (NFCI),s-barannikov,"Use information from CGIOperandList instead of re-parsing operand dags from scratch.
",2025-08-30T13:51:23Z,2025-08-30T14:35:59Z,2025-08-30T14:17:31Z,2025-08-30T14:17:31Z,True,2,0,1,15,47,1
156180,closed,[clang][bytecode] Fix ignoring comparisons in C,tbaederr,"Our comparison ops always return bool, and we do the pop before the conversion to in in C.

Fixes #156178",2025-08-30T13:30:37Z,2025-08-30T16:31:24Z,2025-08-30T15:41:08Z,2025-08-30T15:41:08Z,True,2,0,1,7,1,2
156175,closed,[TableGen][Decoder] Remove special case of single sub-op dag,s-barannikov,"If a custom operand has MIOperandInfo with >= 2 sub-operands, it is
required that either the operand or its sub-operands have a decoder
method (depending on usage). Require this for single sub-operand
operands as well, since there is no good reason not to.

There are no changes in the generated files.",2025-08-30T11:34:03Z,2025-08-31T07:07:48Z,2025-08-31T07:07:44Z,2025-08-31T07:07:44Z,True,2,0,1,55,44,7
156179,closed,[TableGen] Fix a couple of crashes related to sub-operand dags,s-barannikov,The added tests used to crash when attempting to dereference a nullptr MIOpInfo or call MIOpInfo->getArg(0) on an empty MIOpInfo dag.,2025-08-30T13:16:43Z,2025-09-05T15:47:59Z,2025-09-05T15:47:56Z,2025-09-05T15:47:56Z,True,2,0,2,66,3,3
156172,closed,"Revert ""Emit DW_OP_lit0/1 for constant boolean values""",Michael137,"Reverts llvm/llvm-project#155539

Failing on buildbots with:
```
Step 7 (test-build-stage1-unified-tree-check-all) failure: test (failure)
******************** TEST 'LLVM :: DebugInfo/debug-bool-const-location.ll' FAILED ********************
Exit Code: 1

Command Output (stderr):
--
/home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/build/stage1/bin/llc /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/llvm-project/llvm/test/DebugInfo/debug-bool-const-location.ll -O3 -filetype=obj -o - | /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/build/stage1/bin/llvm-dwarfdump - | /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/build/stage1/bin/FileCheck /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/llvm-project/llvm/test/DebugInfo/debug-bool-const-location.ll # RUN: at line 2
+ /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/build/stage1/bin/llc /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/llvm-project/llvm/test/DebugInfo/debug-bool-const-location.ll -O3 -filetype=obj -o -
+ /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/build/stage1/bin/llvm-dwarfdump -
+ /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/build/stage1/bin/FileCheck /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/llvm-project/llvm/test/DebugInfo/debug-bool-const-location.ll
/home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/llvm-project/llvm/test/DebugInfo/debug-bool-const-location.ll:7:10: error: CHECK: expected string not found in input
; CHECK: {{.*}} DW_OP_lit0
         ^
<stdin>:27:54: note: scanning from here
 [0x0000000000000018, 0x0000000000000020): DW_OP_lit1, DW_OP_stack_value
                                                     ^
<stdin>:28:41: note: possible intended match here
 [0x0000000000000020, 0x0000000000000034): DW_OP_reg3 X3)
                                        ^

Input file: <stdin>
Check file: /home/buildbots/llvm-external-buildbots/workers/ppc64le-lld-multistage-test/ppc64le-lld-multistage-test/llvm-project/llvm/test/DebugInfo/debug-bool-const-location.ll

-dump-input=help explains the following input dump.

Input was:
<<<<<<
           .
           .
           .
          22:  DW_AT_decl_line (5) 
          23:  DW_AT_external (true) 
          24:  
          25: 0x0000003f: DW_TAG_variable 
          26:  DW_AT_location (0x00000000:  
          27:  [0x0000000000000018, 0x0000000000000020): DW_OP_lit1, DW_OP_stack_value 
check:7'0                                                          X~~~~~~~~~~~~~~~~~~~ error: no match found
          28:  [0x0000000000000020, 0x0000000000000034): DW_OP_reg3 X3) 
check:7'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
check:7'1                                             ?                  possible intended match
          29:  DW_AT_name (""arg"") 
check:7'0     ~~~~~~~~~~~~~~~~~~~~
          30:  DW_AT_decl_file (""test"") 
check:7'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~
          31:  DW_AT_decl_line (5) 
check:7'0     ~~~~~~~~~~~~~~~~~~~~~
          32:  DW_AT_type (0x0000004f ""bool"") 
check:7'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          33:  
check:7'0     ~
           .
```",2025-08-30T11:04:16Z,2025-08-30T11:44:22Z,2025-08-30T11:44:22Z,2025-08-30T11:44:22Z,True,1,0,1,2,64,4
156171,closed,[flang] Do not use dialect conversion in `AffineDialectPromotion`,matthias-springer,"This pass uses the rewriter API incorrectly: it calls `replaceAllUsesWith`. This will start failing with #155244.

Instead of a dialect conversion, use the walk-patterns driver, which is also more efficient.

Depends on #156169.
",2025-08-30T10:37:22Z,2025-08-30T17:50:40Z,2025-08-30T17:50:39Z,2025-08-30T17:50:39Z,True,1,0,1,11,22,1
156170,closed,release/21.x: [AArch64][BTI] Add BTI at EH entries. (#155308),llvmbot,"Backport 1b37b9e6d788d7058381b68b5ab265bcb6181335

Requested by: @davemgreen",2025-08-30T10:04:09Z,2025-09-08T07:36:18Z,2025-09-08T07:35:44Z,2025-09-08T07:35:44Z,True,4,0,2,167,20,5
156173,closed,[MachineLICM] Fine tune getRegPressureSetLimit,LuoYuanke,"There are two API of getRegPressureSetLimit() in backend. One is provided by
TargetRegisterInfo which return the RegPressureSetLimit that is determined by
specific target without considering the reserved registers. The other is provided
by RegisterClassInfo which is based on TargetRegisterInfo::getRegPressureSetLimit
and is adjusted dynamically for reserved registers.
Most backend pass (e.g., scheduler) use TargetRegisterInfo::getRegPressureSetLimit.
However MachineLICM still use TargetRegisterInfo::getRegPressureSetLimit which is
not accurate.
This patch replaces the TargetRegisterInfo::getRegPressureSetLimit with
TargetRegisterInfo::getRegPressureSetLimit in MachineLICM pass.
",2025-08-30T11:10:06Z,2025-09-01T00:46:55Z,2025-09-01T00:46:55Z,,False,4,2,1,43441,42582,63
156169,closed,[flang] Do not use dialect conversion in `DoConcurrentConversionPass`,matthias-springer,"This pass uses the rewriter API incorrectly: it calls `eraseArgument`, bypassing the rewriter. This will start failing with #155244.

Ideally, the walk-patterns driver should be used, but it does not support pre-order traversal. The next best thing is the greedy pattern rewriter driver, with a check that enforces the desired traversal order. (Works only because the pass clones/moves all operations in the region.)
",2025-08-30T09:43:06Z,2025-08-30T18:07:46Z,2025-08-30T18:07:46Z,,False,2,2,1,65,53,10
156166,closed,Fixup test added in #155573 to work when the compiler defaults to C++20.,dyung,"The test added in #155573 assumes the compiler defaults to the current default of C++17. If the compiler is changed to default to C++20, the test fails because the expected warnings about a construct being a C++20 extension are no longer emitted. This change fixes up the test to work in either C++17 or C++20 mode by disabling the warning and removing the check for it as this is not what is being tested here.",2025-08-30T08:58:36Z,2025-08-30T19:34:36Z,2025-08-30T19:12:34Z,2025-08-30T19:12:33Z,True,3,0,1,4,4,1
156164,closed,[clang-tidy][NFC] Enable 'readability-redundant-declaration' check in clang-tidy config,vbvictor,Closes https://github.com/llvm/llvm-project/issues/156163,2025-08-30T08:14:20Z,2025-08-30T10:28:35Z,2025-08-30T09:23:49Z,2025-08-30T09:23:49Z,True,2,0,1,0,7,2
156148,closed,"Revert ""[msan] Detect dereferencing zero-alloc as use-of-uninitialized-value""",thurstond,"Reverts llvm/llvm-project#155944

Per post-commit discussion in https://github.com/llvm/llvm-project/pull/155944#discussion_r2311822441, this is detecting OOB access, which is not in scope for MSan. To be logically consistent with how MSan does not try to handle OOB in other cases, this patch reverts the MSan change. Dereferencing zero-alloc can be detected with ASan instead (as of https://github.com/llvm/llvm-project/pull/155943).
",2025-08-30T07:06:30Z,2025-09-04T23:51:25Z,2025-09-04T23:51:25Z,,False,2,0,1,4,6,2
156162,closed,[X86][NFC] Renamed Trigonometric functions testcases,JaydeepChauhan14,Reference PR - https://github.com/llvm/llvm-project/pull/155434#discussion_r2310501931,2025-08-30T07:58:46Z,2025-09-02T08:40:49Z,2025-09-02T08:38:38Z,2025-09-02T08:38:38Z,True,3,0,2,0,0,11
156146,closed,[M68k] Fix register class of index operands,s-barannikov,"Index operands can only be DR registers.
",2025-08-30T06:18:57Z,2025-08-30T07:42:47Z,2025-08-30T07:38:21Z,,False,4,0,1,3,3,1
156141,closed,[llvm] Proofread BigEndianNEON.rst,kazutakahirata,,2025-08-30T03:58:49Z,2025-08-30T18:19:17Z,2025-08-30T17:01:34Z,2025-08-30T17:01:34Z,True,1,0,1,20,20,1
156142,closed,[SelectionDAG] Add computeKnownBits for ISD::ROTL/ROTR.,topperc,,2025-08-30T03:59:27Z,2025-08-31T06:12:02Z,2025-08-31T04:25:56Z,2025-08-31T04:25:56Z,True,4,5,3,28,15,3
156139,closed,[AArch64] Remove an unnecessary cast (NFC),kazutakahirata,"getOpcode() already returns unsigned.
",2025-08-30T03:58:12Z,2025-08-30T17:01:31Z,2025-08-30T17:01:27Z,2025-08-30T17:01:27Z,True,2,0,1,1,1,1
156138,closed,[ADT] Remove a meaningless std::move (NFC),kazutakahirata,"std::move on StringRef is not useful because it's copied anyway.
",2025-08-30T03:57:50Z,2025-08-30T17:01:27Z,2025-08-30T17:01:19Z,2025-08-30T17:01:19Z,True,1,0,1,1,1,1
156137,closed,[ADT] Refactor StringMap iterators (NFC),kazutakahirata,"StringMap has four iterator classes:

- StringMapIterBase
- StringMapIterator
- StringMapConstIterator
- StringMapKeyIterator

This patch consolidates the first three into one class, namely
StringMapIterBase, adds a boolean template parameter to indicate
desired constness, and then use ""using"" directives to specialize the
common class:

  using const_iterator = StringMapIterBase<ValueTy, true>;
  using iterator = StringMapIterBase<ValueTy, false>;

just like how we simplified DenseMapIterator.

Remarks:

- This patch drops CRTP and iterator_facade_base for simplicity.  For
  fairly simple forward iterators, iterator_facade_base doesn't buy us
  much.  We just have to write a few ""using"" directives and operator!=
  manually.

- StringMapIterBase has a SFINAE-based constructor to construct a
  const iterator from a non-const one just like DenseMapIterator.

- We now rely on compiler-generated copy and assignment operators.
",2025-08-30T03:57:29Z,2025-09-04T03:21:21Z,2025-09-01T02:18:21Z,2025-09-01T02:18:21Z,True,8,0,4,91,64,4
156135,closed,AMDGPU: Avoid using exact class check in reg_sequence AGPR fold,arsenm,This does better in cases which mix align2 and non-align2 classes.,2025-08-30T02:42:27Z,2025-09-03T00:33:02Z,2025-09-03T00:05:48Z,2025-09-03T00:05:48Z,True,3,0,1,8,11,2
156134,closed,[mlgo] Fix bad merge of #156120 with 0082cf41de11,mtrofin,,2025-08-30T02:35:24Z,2025-08-30T02:35:55Z,2025-08-30T02:35:48Z,2025-08-30T02:35:48Z,True,1,0,1,2,3,1
156131,closed,[lldb-dap] Add `--no-lldbinit` as a CLI flag,piyushjaiswal98,"TLDR
----------
This PR adds `--no-lldbinit` as a new CLI flag to the `lldb-dap`

Motivation
-----------
Rcently Users reported being unable to control `.lldbinit` file sourcing when debugging through VS Code. https://github.com/llvm/llvm-project/issues/155802. 
VS Code extensions cannot easily inject custom parameters into the DAP initialize request. Adding `--no-lldbinit` as a CLI flag solves this problem by allowing the decision to skip `.lldbinit` files to be made at debugger startup, before any initialization requests are processed. 
VS Code extensions can control this behavior by specifying the flag through `debugAdapterArgs` or similar mechanisms in launch configurations.

```
{
  ""type"": <extension-type>,
  ""request"": ""launch"", 
  ""name"": ""Debug with --no-lldbinit"",
  ""program"": ""${workspaceFolder}/your-program"",
  ""debugAdapterArgs"": [""--no-lldbinit""]
}
```
Summary
----------
This PR introduces a new command-line flag `--no-lldbinit` (with alias `-x`) to `lldb-dap`. The flag prevents automatic parsing of `.lldbinit` files during debugger initialization, giving users control over whether their LLDB initialization scripts are loaded.

### Key Changes:

1.  **CLI Option Definition** (`Options.td`): Added the `--no-lldbinit` flag with `-x` alias
2.  **Core Implementation** (`DAP.cpp`): Added support for storing and using the no-lldbinit flag
3.  **Initialization Handler** (`InitializeRequestHandler.cpp`): Modified to respect the flag during debugger initialization
4.  **Main Tool** (`lldb-dap.cpp`): Added argument parsing for the new flag
5.  **Test Infrastructure** (`dap_server.py & lldbdap_testcase.py`): Enhanced test framework to support additional arguments

Test Plan
---------

### New Test Coverage (`TestDAP_launch.py`)

**Test Method:** `test_no_lldbinit_flag()`

**Test Strategy:**

1.  **Setup**: Creates a temporary `.lldbinit` file with specific settings that would normally be loaded
2.  **Execution**: Launches lldb-dap with the `--no-lldbinit` flag
3.  **Verification**: Confirms that the settings from `.lldbinit` are NOT applied, proving the flag works correctly

**Test Environment:**

*   Uses a temporary home directory with a custom `.lldbinit` file
*   Sets specific LLDB settings (`stop-disassembly-display never`, `target.x86-disassembly-flavor intel`)
*   Launches debug adapter with `--no-lldbinit` flag via `additional_args` parameter

**Validation Approach:**

*   Executes `settings show stop-disassembly-display` command during initialization
*   Verifies the output does NOT contain ""never"" (which would indicate `.lldbinit` was sourced)
*   Confirms that initialization commands are still executed properly

### Testing Infrastructure Enhancements

**File Modifications:**

*   `dap_server.py`: Enhanced to accept `additional_args` parameter for passing extra CLI flags
*   `lldbdap_testcase.py`: Updated `build_and_create_debug_adapter()` method to support additional arguments and environment variables

### Unit Test Integration

**Unit Test Updates** (`DAPTest.cpp`):

*   Added initialization of the new flag in test setup to ensure consistent test behavior

**Test Run**
<img width=""1759"" height=""1373"" alt=""Screenshot 2025-08-29 at 5 56 18 PM"" src=""https://github.com/user-attachments/assets/769b319a-5009-4ade-aff8-c5f548b38123"" />




",2025-08-30T00:58:40Z,2025-09-04T00:39:32Z,2025-09-04T00:39:32Z,2025-09-04T00:39:32Z,True,2,2,4,87,14,10
156133,closed,[mlir] EnumAttr.td: Fix the width of I64Enum,MaskRay,"Follow-up to #132148
",2025-08-30T02:20:22Z,2025-09-01T21:13:25Z,2025-09-01T21:13:24Z,2025-09-01T21:13:24Z,True,3,0,1,10,2,2
156132,closed,AMDGPU: Add VS_64_Align2 class,arsenm,"We need an aligned version of the VS class to properly
represent operand constraints.

This fixes regressions with #155559",2025-08-30T01:23:59Z,2025-09-02T14:24:10Z,2025-09-02T14:24:08Z,2025-09-02T14:24:08Z,True,2,0,1,165,152,13
156128,closed,Add documentation on debugging LLVM.,pcc,,2025-08-30T00:30:53Z,2025-09-03T21:53:28Z,2025-09-03T21:53:26Z,2025-09-03T21:53:26Z,True,1,10,2,118,10,4
156127,closed,[clang] fix obtaining EnumDecl for UsingEnumDecl,mizvekov,"Use the castAs acessor for the type for a UsingEnumDecl, as it can be sugar for an EnumType.

Fixes a regression reported here: https://github.com/llvm/llvm-project/pull/155313#issuecomment-3238482327

Since this regression was never released, there are no release notes.",2025-08-30T00:21:22Z,2025-08-30T01:48:46Z,2025-08-30T01:06:49Z,2025-08-30T01:06:49Z,True,3,0,1,13,1,2
156129,closed,[BOLT][AArch64][instr] Remove red zone clobbering protection,yozhu,"We can safely remove the red zone clobbering protection in arm64
instrumentation sequence, since there is no red zone in AArch64
ELF/Linux system.",2025-08-30T00:42:30Z,2025-09-04T04:43:49Z,2025-09-04T04:43:49Z,2025-09-04T04:43:49Z,True,2,0,1,1,5,1
156125,closed,[lit] Update internal shell lexer to handle LLDB persistent vars.,cmtice,"LLDB allows creation of 'persistent' variables, with names that start with '$'. The lit internal shell was escaping the '$', making it '\\$', in some CHECK lines, which causes an LLDB test, TestExprWithSideEffectOnConvenienceVar, to fail when using the lit internal shell.

Further explanation of the failing LLDB test: LLDB convenience variables start with '$'. The test passes several quoted commands that use and update convenience variables to lldb as arguments to be run in batch mode.  The tool that packages up the complete string and passes it to the lit internal shell lexer for lexing inserts a backslash in front of the '$' before passing the string in for lexing. The lexer was passing this change along, causing the tests to fail. 

This PR fixes the issue by having the lexer remove the newly added escape on the '$'.",2025-08-29T23:22:56Z,2025-09-08T22:56:38Z,2025-09-03T15:57:35Z,2025-09-03T15:57:35Z,True,8,2,5,7,1,2
156126,closed,[RISCV][VLOPT][NFC] Remove outdated FIXME comments related to supported instructions,mshockwave,"Remove several FIXME comments in `isSupportedInstr` for opcodes that were already implemented. Also moved switch cases for add-carry/sub-borrow instructions together.

NFC.",2025-08-29T23:41:12Z,2025-09-02T16:47:19Z,2025-09-02T16:47:16Z,2025-09-02T16:47:16Z,True,1,0,1,5,10,1
156123,closed,[mlir][Transforms] Allow RemoveDeadValues to process a function whose the last block is not the exit.,navyxliu,"'processFuncOp' queries the number of returned values of a function using the terminator of the last block's getNumOperands(). It presumes the last block is the exit. It is not always the case. We encounter a function that the last block jumps backward and then exit. append it as a lit test.

This patch fixes the bug by querying from FunctionInterfaceOp directly.

If processFuncOp gets the wrong number, it can't delete a dead returned value. here is the stacktrace.
```
 Assertion failed: (op->getNumResults() == toErase.size() && ""expected the number of results in `op` and the size of `toErase` to "" ""be the same""), function dropUsesAndEraseResults, file RemoveDeadValues.cpp, line 200.
 PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
 Stack dump:
 0.	Program arguments: /Users/xxinliu/Devel/llvm-project/build/bin/mlir-opt /Users/xxinliu/Devel/llvm-project/mlir/test/Transforms/remove-dead-values.mlir -remove-dead-values -split-input-file -verify-diagnostics
 Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
 0  mlir-opt                 0x00000001044b4f68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56
 1  mlir-opt                 0x00000001044b2bfc llvm::sys::RunSignalHandlers() + 172
 2  mlir-opt                 0x00000001044b5a60 SignalHandler(int, __siginfo*, void*) + 360
 3  libsystem_platform.dylib 0x000000018f0fd6a4 _sigtramp + 56
 4  libsystem_pthread.dylib  0x000000018f0c388c pthread_kill + 296
 5  libsystem_c.dylib        0x000000018efcca3c abort + 124
 6  libsystem_c.dylib        0x000000018efcbc70 err + 0
 7  mlir-opt                 0x000000010c372148 (anonymous namespace)::cleanUpDeadVals((anonymous namespace)::RDVFinalCleanupList&) (.cold.3) + 0
 8  mlir-opt                 0x000000010c36a484 (anonymous namespace)::cleanUpDeadVals((anonymous namespace)::RDVFinalCleanupList&) + 14920
 9  mlir-opt                 0x000000010c36675c (anonymous namespace)::RemoveDeadValues::runOnOperation() + 292
```

",2025-08-29T23:10:46Z,2025-08-31T10:00:52Z,2025-08-31T10:00:32Z,2025-08-31T10:00:32Z,True,3,0,1,24,2,2
156124,closed,[CIR] Add handling for volatile loads and stores,andykaylor,"This fills in the missing pieces to handle volatile loads and stores in CIR.

This addresses https://github.com/llvm/llvm-project/issues/153280",2025-08-29T23:18:55Z,2025-09-02T18:37:14Z,2025-09-02T18:36:48Z,2025-09-02T18:36:48Z,True,2,4,2,264,24,9
156122,closed,"[OpenACC] 'reduction' 'one-init' lowering, */&& operators.",erichkeane,"The * and && operators of a reduction require a starting value of '1'. This patch implements that by looping through every type and creating an init-list that puts a 1 in place of every initializer.

This patch will be followed up by a patch that generalizes this, as `min`, `max`, and `&` all have different initial values.",2025-08-29T23:10:23Z,2025-09-02T15:56:40Z,2025-09-02T15:56:39Z,2025-09-02T15:56:39Z,True,1,13,2,1900,164,19
156121,closed,[lldb] Fix some spelling and grammatical issues in Commands/Options.td,JDevlieghere,"Fixes whitespace, spelling and grammatical issues in the command options. I also formatted the affected options with clang-format and reflowed the description where necessary.",2025-08-29T23:07:14Z,2025-08-29T23:18:27Z,2025-08-29T23:12:35Z,2025-08-29T23:12:35Z,True,1,0,1,59,34,1
156120,closed,[mlgo][inliner] Fix potential concurrency issue in local ThinLTO + IR2Vec cases,mtrofin,"The inliner's `FeatureMap` used to be immutable, but in IR2Vec cases we don't know the shapes of the embedding vectors until later, so we need to initialize it at the time we construct the advisor. In non-distributed ThinLTO cases, for example, this means we'd mutate shared state.

The feature set is also needed when constructing the underlying model runner.

The alternative here is to postpone the creation of the model runner to the time we construct the advisor, and also make the feature map a member of the advisor object.

(issue identified by @efriedma-quic in PR #154541)",2025-08-29T22:47:37Z,2025-08-30T01:29:24Z,2025-08-30T01:24:30Z,2025-08-30T01:24:30Z,True,4,4,3,85,58,4
156119,closed,[lldb] Fix typo in the description of the -X alias,JDevlieghere,,2025-08-29T22:43:00Z,2025-08-29T22:49:31Z,2025-08-29T22:48:50Z,2025-08-29T22:48:50Z,True,1,0,1,1,1,1
156118,closed,[lldb] Refactor variable annotation logic in Disassembler::PrintInstructions,UltimateForce21,"This patch is a follow-up to [#152887](https://github.com/llvm/llvm-project/pull/152887), addressing review comments that came in after the original change was merged.

- Move `VarState` definition out of `PrintInstructions` into a private helper, with member comments placed before fields.
- Introduce a `VariableAnnotator` helper class to encapsulate state and logic for live variable tracking across instructions.
- Replace `seen_this_inst` flag with a map-diff approach: recompute the current variable set per instruction and diff against the previous set.
- Use `nullptr` instead of an empty `ProcessSP` when calling `ABI::FindPlugin`.
- Narrow `Block*` scope with `if (Block *B = ...)`.
- Set `DIDumpOptions::PrintRegisterOnly` directly from `static_cast<bool>(abi_sp)`.
- Prefer `emplace_back` over `push_back` for event strings.
- General cleanup to match LLVM coding style and reviewer feedback.

This makes the annotation code easier to read and consistent with LLVM/LLDB conventions while preserving functionality.",2025-08-29T22:40:47Z,2025-08-30T20:17:06Z,2025-08-30T20:17:06Z,2025-08-30T20:17:06Z,True,2,0,1,143,142,2
156117,closed,[lldb-dap] Fix typescript issue in updated typescript code.,cmtice,"After PR 155021 landed, some typescript 'promises' in async functions were not 'await'ed, which caused us some build failures. This fixes that by adding 'await' in the appropriate places.",2025-08-29T22:27:24Z,2025-08-29T22:41:42Z,2025-08-29T22:38:37Z,2025-08-29T22:38:37Z,True,2,0,1,5,5,1
156115,closed,[Flang] Make all tests work with lit's internal shell,boomanaiden154,"This patch removes REQUIRES: shell lines and updates the tests to not
need a shell, or adds REQUIRES lines for Linux where relevant. A lot of
these seem to have gotten introduced in
58c3f20bbf51f454ffb38ddb700a1d5ad374dc7b, but many are no longer
relevant as these tests no longer use shell scripts.

There was one test (missing_newline.f90) that needed to be modified to
work. Lit doesn't recognize -ne correctly for echo and the options need
to be split into separate flags.
",2025-08-29T22:20:59Z,2025-08-29T22:58:05Z,2025-08-29T22:58:04Z,2025-08-29T22:58:04Z,True,1,0,1,7,20,16
156116,closed,[Flang] Enable lit's internal shell by default,boomanaiden154,"Lit's internal shell is faster as it avoids the overhead of needing to
fork bash for every run line, and also provides better debug information
on failures.

Now that all of flang's tests work correctly with lit's internal shell,
we can enable it by default to take advantage of the benefits.

Towards #102704.",2025-08-29T22:21:03Z,2025-08-29T22:59:42Z,2025-08-29T22:59:41Z,2025-08-29T22:59:41Z,True,0,0,4,12,1,1
156111,closed,[lldb] Format tools/driver/Options.td (NFC),JDevlieghere,Use clang-format to format the driver options tablegen file.,2025-08-29T21:47:13Z,2025-08-29T22:00:36Z,2025-08-29T22:00:36Z,2025-08-29T22:00:36Z,True,1,0,1,216,201,1
156110,closed,[RISCV][NFC] Precommit a test for SLP behavior...,mgudim,when the subtarget has unaligned-vector-mem feature.,2025-08-29T21:36:46Z,2025-08-29T22:09:46Z,2025-08-29T22:09:46Z,2025-08-29T22:09:46Z,True,1,0,2,135,0,1
156109,closed,[flang] Fixed LIT test after re-enabling `noalias`.,vzakhari,,2025-08-29T21:35:00Z,2025-08-29T22:03:06Z,2025-08-29T22:03:06Z,2025-08-29T22:03:06Z,True,0,0,1,2,2,1
156108,closed,[clang] load umbrella dir headers in sorted order,rmaz,"Clang modules sort the umbrella dir headers by name before adding to the
module's includes to ensure deterministic output across different file systems.
This is insufficient however, as the header search table is also serialized.
This includes all the loaded headers by file reference, which are allocated
incrementally. To ensure stable output we have to also create the file
references in sorted order.",2025-08-29T21:25:37Z,2025-09-02T16:12:23Z,2025-09-02T15:56:55Z,2025-09-02T15:56:55Z,True,1,0,1,35,19,9
156107,closed,Fix debuginfod build failure when httplib is used.,zeroomega,"This is a follow up of adbd43250ade1d5357542d8bd7c3dfed212ddec0. The problem is HTTPServer class will lost its implicit move ctor if httplib is used. This patch adds the move ctor explicitly to solve this issue. The default move ctor is not added in the header due to a limitation that ""httplib::Server"" is a forward declaration and it is incomplete.",2025-08-29T21:09:29Z,2025-08-29T22:27:24Z,2025-08-29T22:25:24Z,2025-08-29T22:25:24Z,True,2,0,1,3,0,2
156106,closed,WIP Add check for private emails,vbvictor,WIP do not review,2025-08-29T21:07:04Z,2025-08-31T22:15:49Z,2025-08-31T22:15:49Z,,False,3,0,5,147,18,2
156104,closed,[OpenMP][Offload] Restore __kmpc_* function signatures,ro-i,Avoid altering existing function signatures of the kmpc interface to fix regressions in the runtime optimization (OpenMPOpt).,2025-08-29T20:56:41Z,2025-09-04T15:56:44Z,2025-09-04T15:56:42Z,2025-09-04T15:56:42Z,True,0,0,1,36,11,1
156103,closed,[fuzzer] Avoid buffer overflow in CrossOverTest.cpp (and fix-forward build breakage from #155943),thurstond,"ASan now detects dereferences of zero-sized allocations (https://github.com/llvm/llvm-project/pull/155943; the corresponding MSan change is https://github.com/llvm/llvm-project/pull/155944). This appears to have detected a bug in CrossOverTest.cpp, causing a buildbot breakage. This patch fixes the test.

Buildbot report: https://lab.llvm.org/buildbot/#/builders/4/builds/8732
```
            7: ==949882==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf169cfbe0010 at pc 0xb5f45efc6d1c bp 0xffffd933e460 sp 0xffffd933e458
check:20'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            8: READ of size 1 at 0xf169cfbe0010 thread T0
check:20'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            9:  #0 0xb5f45efc6d18 in LLVMFuzzerTestOneInput /home/tcwg-buildbot/worker/clang-aarch64-sve-vls-2stage/llvm/compiler-rt/test/fuzzer/CrossOverTest.cpp:48:7
check:20'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
check:20'1                                                                                                                                 ?                             possible intended match
           10:  #1 0xb5f45eec7288 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /home/tcwg-buildbot/worker/clang-aarch64-sve-vls-2stage/llvm/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:619:13
check:20'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           11:  #2 0xb5f45eec85d4 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) /home/tcwg-buildbot/worker/clang-aarch64-sve-vls-2stage/llvm/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:812:3
check:20'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           12:  #3 0xb5f45eec8c60 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) /home/tcwg-buildbot/worker/clang-aarch64-sve-vls-2stage/llvm/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:872:3
check:20'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           13:  #4 0xb5f45eeb5c64 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /home/tcwg-buildbot/worker/clang-aarch64-sve-vls-2stage/llvm/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:923:6
check:20'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           14:  #5 0xb5f45eee09d0 in main /home/tcwg-buildbot/worker/clang-aarch64-sve-vls-2stage/llvm/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
check:20'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

For context, FuzzerLoop.cpp:812 tries empty input:
```
810  // Test the callback with empty input and never try it again.
811  uint8_t dummy = 0;
812  ExecuteCallback(&dummy, 0);
```",2025-08-29T20:55:01Z,2025-08-29T23:17:58Z,2025-08-29T21:01:07Z,2025-08-29T21:01:06Z,True,4,0,1,3,0,1
156105,closed,[WebAssembly] Guard use of getSymbolName with isSymbol,dschuff,"WebAssemblyRegStackfy checks for writes to the stack pointer to avoid
stackifying across them, but it wasn't prepared for other global_set
instructions (such as writes in addrspace 1).

Fixes #156055

Thanks to @QuantumSegfault for reporting and identifying the offending code.",2025-08-29T21:05:27Z,2025-09-02T23:21:35Z,2025-09-02T23:21:35Z,2025-09-02T23:21:35Z,True,2,4,4,18,1,2
156100,closed,[UBSan] make ubsantrap `inaccessiblemem: write`,fmayer,"This is consistent with the normal trap. This will allow more
optimizations to work on it (e.g. it can be reordered more
freely).

This will also allow https://github.com/llvm/llvm-project/pull/155901 to avoid
hardcoding the ubsan trap.",2025-08-29T20:29:45Z,2025-09-09T23:40:10Z,2025-09-09T23:40:08Z,2025-09-09T23:40:08Z,True,2,0,3,11,10,3
156101,closed,[lldb] Stop the protocol servers when terminating the plugin,JDevlieghere,"Currently, the server keeps running until we call Stop from its dtor in the static destruction chain. This is too late: the server should stop when the plugin gets terminated.",2025-08-29T20:32:10Z,2025-08-29T22:56:21Z,2025-08-29T22:41:45Z,2025-08-29T22:41:44Z,True,2,0,1,31,7,3
156099,closed,[lldb][debugserver] Max response size for qSpeedTest,jasonmolenda,"The qSpeedTest packet is used for experiments to determine the optimal packet size for a given communication medium, e.g. to transfer 10MB of memory, is it faster to send a hundred 100KB packets or ten 1MB packets.  It creates a packet of the requested size in a stack allocation, but is not checking that its buffer is large enough for the requested size.

Change this allocation to be on heap, and impose a maximum size that can be tested (4MB, for now).

rdar://158630250",2025-08-29T20:28:42Z,2025-09-03T23:31:47Z,2025-09-03T23:31:42Z,2025-09-03T23:31:42Z,True,1,0,1,6,6,1
156097,closed,[InstCombine] Slightly optimize visitFcmp (NFC),Seraphimt,Studying the code related to float found a slightly optimal sequence of actions.,2025-08-29T20:20:31Z,2025-08-31T15:53:39Z,2025-08-31T15:48:57Z,2025-08-31T15:48:57Z,True,2,0,2,3,3,1
156098,closed,[TableGen][CodeGen] Remove DisableEncoding field of Instruction class,s-barannikov,"I believe it became no-op with the removal of the ""positionally encoded operands"" functionality (b87dc356 is the last commit in the series).

There are no changes in the generated files.",2025-08-29T20:22:09Z,2025-08-30T05:16:18Z,2025-08-30T04:44:20Z,2025-08-30T04:44:20Z,True,3,1,2,238,450,31
156095,closed,[flang-rt] Enable lit internal shell by default,boomanaiden154,"This patch enables the lit internal shell by default for testing flang-rt. The lit internal shell is able to run tests a bit faster as it avoids having to fork bash for every run line and also produces nicer debug information on failures.

This is part of #102704.",2025-08-29T20:18:17Z,2025-08-29T20:28:57Z,2025-08-29T20:28:54Z,2025-08-29T20:28:54Z,True,1,0,1,11,1,1
156093,closed,[mlir][ptr] Add load and store ops.,fabianmcg,"This patch adds the load and store operations to the ptr dialect. It's future work to implement SROA and Mem2Reg interfaces, as well as conversion to LLVM, and add alias information.

This patch also fixes a bug in `OptionalProp` that was causing the bytecode writer to exit early of writing the Op props if an optional prop had the default value.

Example:
```mlir
func.func @load_ops(%arg0: !ptr.ptr<#ptr.generic_space>) -> (f32, f32, f32, f32, f32, i64, i32) {
  %0 = ptr.load %arg0 : !ptr.ptr<#ptr.generic_space> -> f32
  %1 = ptr.load volatile %arg0 : !ptr.ptr<#ptr.generic_space> -> f32
  %2 = ptr.load %arg0 nontemporal : !ptr.ptr<#ptr.generic_space> -> f32
  %3 = ptr.load %arg0 invariant : !ptr.ptr<#ptr.generic_space> -> f32
  %4 = ptr.load %arg0 invariant_group : !ptr.ptr<#ptr.generic_space> -> f32
  %5 = ptr.load %arg0 atomic monotonic alignment = 8 : !ptr.ptr<#ptr.generic_space> -> i64
  %6 = ptr.load volatile %arg0 atomic syncscope(""workgroup"") acquire nontemporal alignment = 4 : !ptr.ptr<#ptr.generic_space> -> i32
  return %0, %1, %2, %3, %4, %5, %6 : f32, f32, f32, f32, f32, i64, i32
}

func.func @store_ops(%arg0: !ptr.ptr<#ptr.generic_space>, %arg1: f32, %arg2: i64, %arg3: i32) {
  ptr.store %arg1, %arg0 : f32, !ptr.ptr<#ptr.generic_space>
  ptr.store volatile %arg1, %arg0 : f32, !ptr.ptr<#ptr.generic_space>
  ptr.store %arg1, %arg0 nontemporal : f32, !ptr.ptr<#ptr.generic_space>
  ptr.store %arg1, %arg0 invariant_group : f32, !ptr.ptr<#ptr.generic_space>
  ptr.store %arg2, %arg0 atomic monotonic alignment = 8 : i64, !ptr.ptr<#ptr.generic_space>
  ptr.store volatile %arg3, %arg0 atomic syncscope(""workgroup"") release nontemporal alignment = 4 : i32, !ptr.ptr<#ptr.generic_space>
  return
}
```

Finally, this patch allows testing more advanced features of ptr memory spaces, for example:
```mlir
// mlir-opt -verify-diagnostics
func.func @store_const(%arg0: !ptr.ptr<#test.const_memory_space>, %arg1: i64) {
  // expected-error@+1 {{memory space is read-only}}
  ptr.store %arg1, %arg0 atomic monotonic alignment = 8 : i64, !ptr.ptr<#test.const_memory_space>
  return
}
```",2025-08-29T20:04:29Z,2025-09-01T11:16:17Z,2025-09-01T11:16:17Z,2025-09-01T11:16:17Z,True,3,14,3,341,52,10
156088,closed,[NVPTX] Remove unsupported 'seq_cst' test,AlexMaclean,"The NVPTX backend does not currently support correctly lowering `atomicrmw` with `seq_cst` of any size. Remove a test which erroneously hit this case and add logic to appropriately error out when this ordering is encountered, instead of emitting invalid PTX.  

In the long term, we should use `fence.sc`, similar to other atomic operations, to support this ordering.",2025-08-29T19:33:58Z,2025-08-29T20:22:34Z,2025-08-29T20:22:34Z,2025-08-29T20:22:34Z,True,2,0,1,4,3,2
156094,closed,[HLSL][NFC] Add assert to verify implicit binding resource attribute exists,hekota,Adds assert as requested in https://github.com/llvm/llvm-project/pull/152454#discussion_r2304509802.,2025-08-29T20:11:18Z,2025-09-03T04:57:41Z,2025-09-03T04:57:41Z,2025-09-03T04:57:41Z,True,1,0,1,1,0,1
156092,closed,[CIR] Implement VAArgExpr for ComplexType,AmrDeveloper,"This change adds support VAArgExpr for ComplexExpr

Issue: https://github.com/llvm/llvm-project/issues/141365",2025-08-29T19:59:53Z,2025-08-30T16:18:33Z,2025-08-30T16:18:33Z,2025-08-30T16:18:32Z,True,1,1,2,62,0,2
156086,closed,[X86] Fold vpmadd52h/l for pattern X * 0 + Y --> Y,XChy,Resolves comment in https://github.com/llvm/llvm-project/pull/155494#issuecomment-3227735091,2025-08-29T19:03:28Z,2025-08-30T16:15:06Z,2025-08-30T16:15:06Z,2025-08-30T16:15:06Z,True,4,1,4,89,2,2
156085,closed,[CIR] Add support for discrete bit-field,Andres-Salamanca,"This PR adds support for the discrete bit-field layout.
It is the same as this PR: https://github.com/llvm/clangir/pull/1860",2025-08-29T18:58:02Z,2025-09-04T03:08:56Z,2025-09-04T02:59:36Z,2025-09-04T02:59:36Z,True,3,6,4,136,2,4
156083,closed,[BOLT] Enable lit internal shell by default,boomanaiden154,"This patch enables lit's internal shell by default now that all
REQUIRES: shell tests have been update to not require shell features not
available in lit and all unresolved tests have been fixed.

This should speed up test runtime by a bit and will give nicer error
messaging.

Fixes #102701.
",2025-08-29T18:45:33Z,2025-09-02T13:16:11Z,2025-08-29T19:52:11Z,2025-08-29T19:52:11Z,True,2,0,4,12,1,1
156082,closed,[BOLT] Fix tests that were unresolved when using lit's internal shell,boomanaiden154,"These two tests were unresolved when using lit's internal shell.

In the case of tail-duplication-constant-prop, it was because they were
using a echo $? line, and lit's internal echo implementation does not
support $? to get the return code. The test was never actually asserting
anything about the return code though, so I've removed the echo
commands.

In the case of permission.test, it was because umask was not supported
before #155850, and afterwards not without an argument. The test also
was not great at capturing what it was supposed to (leaving open
possibilites like the system umask and what Bolt was using happening to
match), so I've rewritten the test in the style of
llvm/test/tools/llvm-objcopy/ELF/respect-umask.test.

This fixes #102693.
",2025-08-29T18:45:29Z,2025-08-29T19:51:22Z,2025-08-29T19:51:21Z,2025-08-29T19:51:21Z,True,1,0,1,25,10,2
156081,closed,[mlir][debug] Inherit DISubprogramAttr from DILocalScopeAttr.,abidh,"As mentioned in https://github.com/llvm/llvm-project/pull/154926, `DISubprogramAttr` is inherited from `DIScopeAttr` while in llvm, the `DISubprogram` inherits from `DILocalScope`. This change corrects the hierarchy.",2025-08-29T18:43:48Z,2025-09-11T11:04:02Z,2025-09-02T13:24:28Z,2025-09-02T13:24:28Z,True,1,4,2,5,4,2
156077,closed,[flang-rt][device] Silence warning missing return statement at end of non-void function,clementval,- Silence warning when using `FLANG_RT_EXPERIMENTAL_OFFLOAD_SUPPORT=CUDA`,2025-08-29T18:24:49Z,2025-08-29T19:45:25Z,2025-08-29T19:01:25Z,2025-08-29T19:01:25Z,True,2,0,2,1,1,1
156080,closed,[flang] Support #if defined when no definitions,klausler,"The ""defined"" operator isn't working in #if/#elif expressions when there are no defined macros.  Fix.",2025-08-29T18:39:41Z,2025-08-29T18:58:03Z,2025-08-29T18:57:59Z,2025-08-29T18:57:59Z,True,1,0,1,11,1,2
156078,closed,[flang-rt] Set supported_sources when FLANG_RT_EXPERIMENTAL_OFFLOAD_SUPPORT=CUDA,clementval,When building for the CUDA support sources should be set to the gpu sources. ,2025-08-29T18:28:00Z,2025-08-29T19:56:38Z,2025-08-29T19:56:35Z,2025-08-29T19:56:35Z,True,0,3,2,2,0,1
156074,closed,[bazel][mlir] Port #156053: PtrToLLVM,rupprecht,,2025-08-29T17:59:57Z,2025-08-29T18:07:47Z,2025-08-29T18:07:47Z,2025-08-29T18:07:47Z,True,0,0,1,20,0,1
156075,closed,[HLSL] Add copy assignment and construtor to resource types,s-perron,"The wrapper used to hold the handle for resource type has just the
default copy constructor and assignment operator. This causes clang to
insert memcpys when it does an assignment of a resource type. The
memcpy then cause optimizations to fail when the memcpy is turned into a
load and store of an i64.

To fix this, we should define copying of a resource type by adding the
operator= and copy constructor.

Partially fixes #154669
",2025-08-29T18:12:09Z,2025-09-06T11:50:04Z,2025-09-06T11:50:04Z,2025-09-06T11:50:03Z,True,1,21,11,199,31,13
156073,closed,[analyzer] Clean up bug types in CallAndMessageChecker,NagyDonat,"In CallAndMessageChecker the initialization of bug types was highly obfuscated (even compared to other `mutable std::unique_ptr` hacks). This commit cleans up this situation and removes a totally superfluous hidded 'modeling' sub-checker that did not have any role apart from obstructing the normal initialization of bug types.

(Note that if we need to reintroduce CallAndMessageModeling in the future, we can do it cleanly within the CheckerFamily framework, so we wouldn't need to re-obfuscate the bug type initialization.)

This change is mostly non-functional, the only visible change is the removal of the hidden modeling checker.",2025-08-29T17:48:14Z,2025-09-04T13:50:21Z,2025-09-04T13:50:21Z,2025-09-04T13:50:21Z,True,1,10,5,102,187,4
156076,closed,Mark ExecutionEngine/JITLink and ExecutionEngine/Orc as unsupported on AIX,jamieschmeiser,"Create ExecutionEngine/JitLink/lit.local.cfg and
ExecutionEngine/Orc/lit.local.cfg and use them to mark tests as unsupported on AIX.",2025-08-29T18:12:12Z,2025-09-02T13:38:44Z,2025-09-02T13:38:42Z,2025-09-02T13:38:42Z,True,0,0,1,4,0,2
156070,closed,[X86] Add -fexperimental-new-constant-interpreter test coverage to the BITSCAN constexpr test files,RKSimon,"Update tests to use builtin_test_helpers.h and the TEST_CONSTEXPR helper macro

Partial fix for #155814",2025-08-29T17:35:27Z,2025-08-30T18:14:37Z,2025-08-29T18:03:04Z,2025-08-29T18:03:04Z,True,1,0,2,17,23,1
156061,closed,[X86] Add -fexperimental-new-constant-interpreter test coverage to the BSWAP constexpr test files,RKSimon,"Update tests to use builtin_test_helpers.h and the TEST_CONSTEXPR helper macro

Partial fix for #155814",2025-08-29T17:11:24Z,2025-08-30T01:45:02Z,2025-08-29T17:36:06Z,2025-08-29T17:36:06Z,True,4,0,1,13,17,1
156065,closed,[X86] Merge matching AVX/AVX2 memory Features/Attributes blocks. NFC.,RKSimon,,2025-08-29T17:21:47Z,2025-08-30T18:14:31Z,2025-08-29T17:44:59Z,2025-08-29T17:44:59Z,True,1,0,1,21,77,1
156064,closed,[flang] Add hlfir.char_trim operation,luporl,"Fortran character trim is currently lowered directly into a runtime
call, which makes it more complex to simplify expressions using it.

With this patch trim is first lowered into an hlfir.char_trim
operation, that is only later transformed into a runtime call.
This makes it easier to remove unnecessary calls to trim, as
proposed in #154593.
",2025-08-29T17:19:09Z,2025-09-04T16:03:19Z,2025-09-04T16:03:12Z,2025-09-04T16:03:12Z,True,5,0,2,223,69,7
156060,closed,[Fuchsia] Use IR PGO in the Fuchsia toolchain build,ilovepi,"After #155957 pointed it out, we're actually using the frontend PGO in
the Fuchsia cmake cache files.",2025-08-29T17:00:40Z,2025-08-29T17:34:21Z,2025-08-29T17:34:21Z,2025-08-29T17:34:21Z,True,2,0,1,1,1,1
156059,closed,[TableGen][Decoder] Cache DecoderNamespace in InstructionEncoding (NFC),s-barannikov,,2025-08-29T16:50:29Z,2025-08-29T18:23:13Z,2025-08-29T18:23:09Z,2025-08-29T18:23:08Z,True,1,0,1,9,4,1
156057,closed,[InferAlignment] Increase alignment in masked load / store instrinsics if known,jhuber6,"Summary:
The masked load / store LLVM intrinsics take an argument for the
alignment. If the user is pessimistic about alignment they can provide a
value of `1` for an unaligned load. This patch updates infer-alignment to
increase the alignment value of the alignment argument if it is known
greater than the provided one.

Ignoring the gather / scatter versions for now since they contain many
pointers.
",2025-08-29T16:36:27Z,2025-09-02T11:13:54Z,2025-09-02T11:10:50Z,2025-09-02T11:10:50Z,True,6,7,3,67,2,2
156056,closed,[clang] Fix crash 'Cannot get layout of forward declarations' during CTU static analysis,balazske,"When a type is imported with `ASTImporter`, the ""original declaration""
of the type is imported. In some cases this is not the definition
(of the class). Before the fix the definition was only imported if
there was an other reference to it in the AST to import. This is not
always the case (like in the added test case), if not the definition
was missing in the ""To"" AST which can cause the assertion later.",2025-08-29T16:24:39Z,2025-09-04T09:16:45Z,2025-09-03T10:18:07Z,2025-09-03T10:18:07Z,True,5,3,6,55,1,2
156053,closed,[mlir][ptr] Add conversion to LLVM for all existing `ptr` ops,fabianmcg,"This patch adds conversion to LLVM for all existing pointer ops. This is a stop gap measure to allow users to use the `ptr` dialect now. In the future some of these conversions will be removed, and added as translations, for example `ptradd`.

Example:
```mlir
func.func @test_memref_ptradd_indexing(%arg0: memref<10x?x30xf32, #ptr.generic_space>, %arg1: index) -> !ptr.ptr<#ptr.generic_space> {
  %0 = ptr.to_ptr %arg0 : memref<10x?x30xf32, #ptr.generic_space> -> <#ptr.generic_space>
  %1 = ptr.type_offset f32 : index
  %2 = arith.muli %1, %arg1 : index
  %3 = ptr.ptr_add %0, %2 : <#ptr.generic_space>, index
  return %3 : !ptr.ptr<#ptr.generic_space>
}
// mlir-opt --convert-to-llvm --canonicalize --cse
llvm.func @test_memref_ptradd_indexing(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64) -> !llvm.ptr {
  %0 = llvm.mlir.zero : !llvm.ptr
  %1 = llvm.getelementptr %0[1] : (!llvm.ptr) -> !llvm.ptr, f32
  %2 = llvm.ptrtoint %1 : !llvm.ptr to i64
  %3 = llvm.mul %2, %arg9 : i64
  %4 = llvm.getelementptr %arg1[%3] : (!llvm.ptr, i64) -> !llvm.ptr, i8
  llvm.return %4 : !llvm.ptr
}
```
",2025-08-29T16:16:32Z,2025-08-29T16:57:48Z,2025-08-29T16:57:48Z,2025-08-29T16:57:48Z,True,2,0,1,805,0,6
156051,closed,[TableGen][DecoderEmitter] Use StringRef in a few places (NFC),s-barannikov,,2025-08-29T16:08:01Z,2025-08-29T16:46:11Z,2025-08-29T16:37:49Z,2025-08-29T16:37:48Z,True,1,0,1,5,7,1
156054,closed,release/21.x: [libc++] Disable cv-qualified arithmetic hash specializations (#155786),llvmbot,"Backport 8a65c4f11a4cb2aabb95c2c0f497cbae2e143cc0

Requested by: @philnik777",2025-08-29T16:19:54Z,2025-09-03T10:13:32Z,2025-09-03T10:12:56Z,2025-09-03T10:12:56Z,True,3,0,1,67,4,7
156050,closed,[lldb][DataFormatter] Allow std::string formatters to match against custom allocators,Michael137,"This came up in https://github.com/llvm/llvm-project/issues/155691.

For `std::basic_string` our formatter matching logic required the allocator template parameter to be a `std::allocator`. There is no compelling reason (that I know of) why this would be required for us to apply the existing formatter to the string. We don't check the `allocator` parameter for other STL containers either. This meant that `std::string` that used custom allocators wouldn't be formatted. This patch relaxes the regex for `basic_string`.",2025-08-29T16:02:24Z,2025-09-05T08:31:45Z,2025-09-05T08:24:51Z,2025-09-05T08:24:51Z,True,5,0,3,58,33,3
156048,closed,[X86] Add -fexperimental-new-constant-interpreter test coverage to the LZCNT/POPCNT constexpr test files,RKSimon,"Update tests to use builtin_test_helpers.h and the TEST_CONSTEXPR helper macro

Partial fix for #155814",2025-08-29T15:40:37Z,2025-08-29T17:09:07Z,2025-08-29T17:09:04Z,2025-08-29T17:09:04Z,True,1,0,1,38,51,2
156047,closed,[X86] Add constexpr handling for XOP/AVX512 rotate by immediate intrinsics,RKSimon,,2025-08-29T15:30:58Z,2025-09-01T16:10:14Z,2025-08-30T07:35:43Z,2025-08-30T07:35:43Z,True,3,0,3,130,13,6
156045,closed,[VPlan] Enable DebugLoc coverage tracking,artagnon,"Post 92195f6 (Reapply ""[DLCov] Implement DebugLoc coverage tracking""), we should use DebugLoc::getUnknown() instead of the default constructor.",2025-08-29T15:15:45Z,2025-08-29T20:08:47Z,2025-08-29T20:08:44Z,2025-08-29T20:08:44Z,True,2,0,1,23,19,1
156042,closed,[Clang] Add masked vector builtins for expand and compress access,jhuber6,"Summary:
The interface here is nearly indentical to the already added masked
loads and stores. These bind to very similar intrinsics so we add them
here.
",2025-08-29T14:59:11Z,2025-08-29T16:37:12Z,2025-08-29T16:37:12Z,2025-08-29T16:37:12Z,True,2,12,3,142,22,7
156038,closed,[AMDGPU] Autogenerate VOP3 literal checks,jayfoad,,2025-08-29T14:47:49Z,2025-09-02T16:09:37Z,2025-09-02T16:09:30Z,2025-09-02T16:09:30Z,True,2,7,3,185,182,1
156039,closed,[CI] Add flang-rt to pre-merge configuration,nikic,"Currently if you modify something in flang-rt, no tests are run at all.",2025-08-29T14:50:18Z,2025-08-29T18:52:13Z,2025-08-29T18:52:12Z,2025-08-29T18:52:12Z,True,1,2,2,15,10,2
156041,closed,[Offload] Update tablegen tests,RossBrunton,"These were not updated after #154736 .
",2025-08-29T14:57:25Z,2025-08-29T15:20:50Z,2025-08-29T15:20:50Z,2025-08-29T15:20:49Z,True,1,0,1,13,26,8
156037,closed,[VPlan] Use IsaPred to improve code (NFC),artagnon,,2025-08-29T14:46:51Z,2025-09-01T08:16:39Z,2025-09-01T08:16:36Z,2025-09-01T08:16:36Z,True,1,0,1,5,8,1
156036,closed,[CIR] Add value initialization for scalar types,mmha,,2025-08-29T14:46:24Z,2025-08-29T17:22:56Z,2025-08-29T17:22:56Z,2025-08-29T17:22:56Z,True,2,2,3,199,50,2
156029,closed,[clang][AArch64] Use .i16.f16 intrinsic formats for vcvth*_[s|u]16_f16,mrkajetanp,"Use .i16.f16 intrinsic formats for intrinsics like vcvth_s16_f16.
Avoids issues with incorrect saturation that arise when using .i32.f16 formats for the same conversions.
Fixes https://github.com/llvm/llvm-project/issues/154343.",2025-08-29T14:18:44Z,2025-09-02T10:38:38Z,2025-09-02T10:38:38Z,2025-09-02T10:38:38Z,True,5,0,2,26,39,3
156028,closed,[LV] Use getDecisionRangeAndClamp for IVUpdateMayOverflow,artagnon,The change is very difficult to test.,2025-08-29T14:11:11Z,2025-09-10T13:49:00Z,2025-09-10T13:48:57Z,,False,2,0,1,5,8,1
156026,closed,[lldb] Restrict TestVariableAnnotationsDisassembler.py to ELF x86_64 (skip on Windows/COFF),UltimateForce21,"The `TestVariableAnnotationsDisassembler.py` test assembles `d_original_example.s`, 
which contains ELF-specific directives such as:

- `.ident`
- `.section "".note.GNU-stack"", """", @progbits`
- `.section .debug_line, """", @progbits`

These directives are not understood by COFF on Windows, so the test fails 
on the lldb-remote-linux-win builder even when running on x86_64.

This patch adds a decorator to gate the test,
- `@skipUnlessPlatform([""linux"", ""freebsd"", ""netbsd"", ""android""])` — 
  runs only on ELF platforms

Follow-up to #155942.",2025-08-29T13:52:12Z,2025-08-30T21:51:39Z,2025-08-29T15:23:08Z,2025-08-29T15:23:08Z,True,9,1,3,3,0,1
156021,closed,[MemorySSA] Don't create phi nodes in fixupDefs(),nikic,"The general flow when inserting MemoryDefs is:

 * Insert the def and set it's defining access (may insert phis)
 * Insert IDF phis
 * Update defining access for defs after the new one (fixupDefs)
 * Rename uses if requested

fixupDefs() uses getPreviousDef() which can create new MemoryPHIs, but for which we're not going to insert IDF phis, so the required dominance property may not hold.

I believe this is a leftover from a time before the ""Insert IDF phis"" step existed. Now that step should already ensure that all necessary MemoryPhis have been inserted, and we only need to update them.

The fixupDefs() implementation was also returning after updating a single access, which is not right.

Fixes https://github.com/llvm/llvm-project/issues/47875.
Fixes https://github.com/llvm/llvm-project/issues/117157.
Fixes https://github.com/llvm/llvm-project/issues/152998.
Fixes https://github.com/llvm/llvm-project/issues/155161.
Fixes https://github.com/llvm/llvm-project/issues/155184.",2025-08-29T13:05:37Z,2025-09-04T08:26:22Z,2025-09-04T08:23:30Z,2025-09-04T08:23:30Z,True,5,1,2,86,15,2
156024,closed,[AArch64] Add patterns for sub from add negative immediates,davemgreen,"`sub 3` will be canonicalized in llvm to `add -3`. This adds some tablegen patterns for add from a negative immediate so that we can still generate sub imm SVE instructions.

The alternative is to add a isel combine, which seemed to work but created problems for mad and index patterns. This version does still need to add a lower-than-default Complexity to the ComplexPatterns to ensure that index was selected over sub-imm + index, as the default Complexity on ComplexPatterns is quite high.

Fixes #155928",2025-08-29T13:22:03Z,2025-08-31T14:12:33Z,2025-08-31T14:12:33Z,2025-08-31T14:12:33Z,True,2,1,4,67,56,8
156031,closed,[mlir][spirv] Add pattern matching for arith.index_cast index to i1 for ArithToSPIRV,ianayl,"Currently, `arith.index_cast` gets converted to `OpSConvert`: https://github.com/llvm/llvm-project/blob/9bf5bf3baf3c7aec82cdd235c6a2fd57b4dd55ab/mlir/lib/Conversion/ArithToSPIRV/ArithToSPIRV.cpp#L1331 [OpSConvert requires its operands to be of integer type](https://registry.khronos.org/SPIR-V/specs/unified1/SPIRV.html#OpSConvert), which poses an issue for `i1` since SPIRV distinguishes between booleans and integers. As a result, the following example doesn't get converted, leaving behind illegal ops:
```
%0 = arith.index_cast %arg0 : index to i1
```
This PR adds additional logic to convert `arith.index_casts` to SPIRV dialect when casting from `index` to `i1`. Converting `index_cast`s from `i1` to `index` is submitted as https://github.com/llvm/llvm-project/pull/155729. ",2025-08-29T14:20:55Z,2025-09-03T16:49:13Z,2025-09-03T16:48:54Z,2025-09-03T16:48:54Z,True,7,16,13,54,1,2
156019,closed,[clang][x86] Ensure we use the shifted value bit width to check for out of bounds per-element shift amounts,RKSimon,This should allow us to reuse these cases for the shift-by-immediate builtins in #155542,2025-08-29T13:00:45Z,2025-08-29T21:23:06Z,2025-08-29T13:21:25Z,2025-08-29T13:21:25Z,True,2,1,1,6,6,1
156018,closed,[OpenMP] Use Clang resource dir only in bootstrapping build,Meinersbur,"In an LLVM_ENABLE_PROJECTS=openmp build, the LLVM build tree in which just-built Clang is available, but in contrast to an LLVM_ENABLE_RUNTIMES=openmp build, is not the compiler that openmp is built with (CMAKE_CXX_COMPILER). The latter compiler (which might also be gcc) will not look into the resource directory of just-built Clang, where the OpenMP headers are installed. There may not even be a just-built Clang without LLVM_ENABLE_PROJECTS=clang.

We cannot add the  OpenMP header output directory to the search path which also include's Clang's internal headers that will conflict with CMAKE_CXX_COMPILER's internal headers. The only choice left is to use what the OpenMP standalone build does: Use CMAKE_CURRENT_BINARY_DIR which is added unconditionally to the header search path to compile openmp itself.

Note that LLVM_ENABLE_PROJECTS=openmp is [deprecated](https://github.com/llvm/llvm-project/pull/136314). Consider switching to a LLVM_ENABLE_RUNTIMES=openmp build and supporting removing the [LLVM_ENABLE_PROJECTS=openmp build mode](https://github.com/llvm/llvm-project/pull/152189).",2025-08-29T12:41:26Z,2025-08-30T14:28:31Z,2025-08-30T14:28:31Z,2025-08-30T14:28:31Z,True,3,0,2,5,4,1
156017,closed,[WIP][Clang][bytecode] interp__builtin_elementwise_int_binop - allow RHS operand to be a scalar,RKSimon,"Allows us to handle OP(vector, scalar) cases such as x86 shift/rotate by immediate

I've included a little of the x86 vector rotate by immediate constexpr code to show how I reckon this will work

CC @Arghnews - if I've gotten this right you should be able to add the shift-by-immediate builtins ids to share the code from the appropriate shl/lshr/ashr shift-by-variable cases.",2025-08-29T12:32:25Z,2025-08-29T15:16:10Z,2025-08-29T15:16:10Z,,False,6,3,1,133,18,5
156016,closed,[LV] Improve code around operands-iterator (NFC),artagnon,,2025-08-29T12:28:35Z,2025-09-01T08:17:59Z,2025-09-01T08:17:55Z,2025-09-01T08:17:55Z,True,1,0,1,6,9,1
156010,closed,"Revert ""[clang] Fix of a crash 'Cannot get layout of forward declarations!' during CTU static analysis""",balazske,"Reverts llvm/llvm-project#155375
Test does not work correctly on MacOS.",2025-08-29T11:52:29Z,2025-08-29T12:01:36Z,2025-08-29T12:01:34Z,2025-08-29T12:01:34Z,True,1,0,1,1,55,2
156013,closed,[SCEV] Rewrite some SCEVAdd sub-expressions using loop guards.,fhahn,"Trip count expressions sometimes consist of adding 3 operands, i.e. (Const + A + B). There may be guard info for A + B, and if so, apply it.

We can probably more generally apply this, but need to be careful w.r.t compile-time.

Alive2 Proof for changes in miniters.ll: https://alive2.llvm.org/ce/z/HFfXOx

Fixes https://github.com/llvm/llvm-project/issues/155941",2025-08-29T12:22:18Z,2025-09-01T13:01:18Z,2025-09-01T13:01:15Z,2025-09-01T13:01:15Z,True,2,0,2,16,8,4
156007,closed,[Coroutines] Remove assert about a promise being present,Dinistro,"This commit removes an assert in the generation of debug info for a coroutine frame. This assert checked if a promise alloca is present, even though it's not used. While this might always be the case when the coroutine was produced by clang++, this doesn't hold in the general case.

Note: We generate coroutine intrinsics from downstream passes. In our case, there is no guarantee that a coroutine has any promise, but they can originate from some non-coro C++ code.",2025-08-29T11:06:05Z,2025-09-01T08:29:22Z,2025-09-01T08:25:42Z,2025-09-01T08:25:42Z,True,4,3,1,1,4,2
156009,closed,[libc++][NFC] Replace typedefs with using declarations,philnik777,"We've done quite a bit of refactoring recently in `<__tree>`. This patch finishes up replacing typedefs with using declarations. As a side-effect, this also adds some `_LIBCPP_NODEBUG` annotations, since the clang-tidy check catches these now.
",2025-08-29T11:34:04Z,2025-09-01T14:22:53Z,2025-09-01T14:22:28Z,2025-09-01T14:22:28Z,True,1,0,1,38,38,1
156005,closed,[KeyInstr] Add release note following #149509,OCHyams,"Key Instructions (-gkey-instructions) is now enabled by default when DWARF is
being emitted, the input is plain C/C++, and optimisations are enabled.

Add release note for the change in default behaviour.",2025-08-29T10:50:10Z,2025-09-04T10:02:31Z,2025-09-04T10:02:31Z,2025-09-04T10:02:31Z,True,1,0,1,1,0,1
156014,closed,[LV] Use DenseMap::keys to improve code (NFC),artagnon,,2025-08-29T12:26:27Z,2025-08-29T18:43:44Z,2025-08-29T18:35:21Z,2025-08-29T18:35:20Z,True,3,0,1,1,1,1
156002,closed,"Reland ""[X86][APX] Remove redundant TEST*ri instructions""",phoebewang,"The goal is to remove redundant TEST*ri instructions, especially with NF feature. Other tests are side effects due to longer live range of EFLAGS. https://godbolt.org/z/PbaTj1oa3

Reland with fix to buildbot failures.",2025-08-29T10:07:05Z,2025-08-30T00:45:13Z,2025-08-29T14:51:41Z,2025-08-29T14:51:41Z,True,2,0,3,131,49,7
156001,closed,[X86] Merge matching AVX512 rotate Features/Attributes blocks. NFC.,RKSimon,Minor cleanup to help when I begin splitting off constexpr capable builtins,2025-08-29T09:59:24Z,2025-08-29T11:02:26Z,2025-08-29T10:57:09Z,2025-08-29T10:57:09Z,True,3,0,2,6,27,1
156000,closed,[MLIR][Python] Support Python-defined passes in MLIR,PragmaTwice,"It closes #155996.

This PR added a method `add(callable, ..)` to `mlir.passmanager.PassManager` to accept a callable object for defining passes in the Python side.

This is a simple example of a Python-defined pass.
```python
from mlir.passmanager import PassManager

def demo_pass_1(op):
    # do something with op
    pass

class DemoPass:
    def __init__(self, ...):
        pass
    def __call__(op):
        # do something
        pass

demo_pass_2 = DemoPass(..)

pm = PassManager('any', ctx)
pm.add(demo_pass_1)
pm.add(demo_pass_2)
pm.add(""registered-passes"")
pm.run(..)
```",2025-08-29T09:57:12Z,2025-09-09T01:01:24Z,2025-09-09T01:01:24Z,2025-09-09T01:01:24Z,True,13,38,20,137,4,4
155999,closed,[X86] Merge matching XOP Features/Attributes blocks. NFC.,RKSimon,Minor cleanup to help when I begin splitting off constexpr capable builtins,2025-08-29T09:49:19Z,2025-08-29T10:33:11Z,2025-08-29T10:33:08Z,2025-08-29T10:33:08Z,True,1,0,1,3,16,1
155997,closed,[mlir][Transforms][NFC] Simplify function signatures,matthias-springer,"Many internal functions take a `ConversionPatternRewriter &` or `ConversionPatternRewriterImpl &` as a parameter. There's only a single instance of these classes, so it's better to store the reference in a field. This commit is in preparation of another PR that will require access to `ConversionPatternRewriter` in additional helper functions.

Note: Public API does not change.

",2025-08-29T09:39:15Z,2025-08-29T13:16:19Z,2025-08-29T13:16:18Z,2025-08-29T13:16:18Z,True,2,0,1,87,102,1
155994,closed,[LoongArch] Perform SELECT_CC combine,heiher,"Fold `((srl (and X, 1<<C), C), 0, eq/ne)` -> `((shl X, GRLen-1-C), 0, ge/lt)`",2025-08-29T09:13:47Z,2025-09-01T07:12:17Z,2025-09-01T07:12:14Z,2025-09-01T07:12:14Z,True,1,0,1,86,17,3
155995,closed,[RISCV] add computeKnownBitsForTargetNode for RISCVISD::SRLW,bojle,"I've added support for computeKnownBitsForTargetNode for the SRLW instruction. A test has been included which uses the snippet of IR as suggested by topperc.

Fixed #154913

@RKSimon ",2025-08-29T09:30:05Z,2025-09-03T16:28:08Z,2025-09-03T13:44:02Z,2025-09-03T13:44:02Z,True,12,15,8,144,0,3
155991,closed,[NFC][PowerPC] adding the arguments for register names and VSR to VR,Himadhith,"NFC patch to add the flags `-ppc-asm-full-reg-names --ppc-vsr-nums-as-vr` to the test file `llvm/test/CodeGen/PowerPC/check-zero-vector.ll`.

Created this PR based on this discussion: https://github.com/llvm/llvm-project/pull/151971#issuecomment-3234090675",2025-08-29T08:54:29Z,2025-09-01T04:47:14Z,2025-09-01T04:47:14Z,2025-09-01T04:47:14Z,True,1,5,1,60,60,1
155990,closed,[OpenMP][Offload] Mark `SPMD_NO_LOOP` as a valid exec mode,RossBrunton,"This was added in #154105 , but was not added to the plugin interface's
list of valid modes.
",2025-08-29T08:49:56Z,2025-09-01T10:27:24Z,2025-09-01T10:27:24Z,2025-09-01T10:27:24Z,True,1,0,1,1,0,1
155989,closed,[Coroutines] Enhance DILabel generation with support for inlined locs,Dinistro,"This commit fixes an issue in the generation of DILabels. The previous code did not cover cases where the suspend intrinsic had an inlined location. Because of this, it took an incorrect DIScope, that broke an internal pre-condition of `DIBuilder::insertLabel`.

This has been addressed by taking the DIScope of the ""inlined at"" location, which should be the DISubprogram of the function holding the label.",2025-08-29T08:41:57Z,2025-09-01T08:26:15Z,2025-09-01T08:26:14Z,2025-09-01T08:26:14Z,True,1,0,1,108,3,2
155987,closed,[flang][OpenMP] Extend `do concurrent` mapping to device,ergawy,"Upstreams further parts of `do concurrent` to OpenMP conversion pass from AMD's fork. This PR extends the pass by adding support for mapping to the device.

PR stack:
- https://github.com/llvm/llvm-project/pull/155754
- https://github.com/llvm/llvm-project/pull/155987 ◀️
- https://github.com/llvm/llvm-project/pull/155992
- https://github.com/llvm/llvm-project/pull/155993
- https://github.com/llvm/llvm-project/pull/157638
- https://github.com/llvm/llvm-project/pull/156610
- https://github.com/llvm/llvm-project/pull/156837",2025-08-29T08:36:32Z,2025-09-10T18:44:57Z,2025-09-10T18:44:55Z,2025-09-10T18:44:55Z,True,2,26,4,524,18,5
155985,closed,[mlir][Transforms][NFC] Remove unused function parameter,matthias-springer,,2025-08-29T08:15:46Z,2025-08-29T08:32:28Z,2025-08-29T08:32:27Z,2025-08-29T08:32:27Z,True,1,0,1,3,7,1
155984,closed,[Headers][X86] Allow AVX512VL mask/z variants of AVX2 per-element shift intrinsics to be used in constexpr,RKSimon,Followup to #154780,2025-08-29T08:07:56Z,2025-08-29T08:35:17Z,2025-08-29T08:35:13Z,2025-08-29T08:35:13Z,True,3,0,1,40,20,2
155982,closed,"[Clang-Tidy] Handle nested-name-specifier in ""llvm-prefer-isa-or-dyn-cast-in-conditionals""",zwuis,"Use `declRefExpr` matcher to match callee so that we can get the `SourceRange` of the identifier of the callee for replacement.

Drive-by changes:

- Use `hasConditionVariableStatement` matcher to handle `if` statements with init-statement.
- Support `for` loops.

Fixes #154790",2025-08-29T07:27:53Z,2025-09-08T03:17:17Z,2025-09-08T02:19:53Z,2025-09-08T02:19:53Z,True,5,10,7,135,64,3
155981,closed,[LV] Improve the test coverage for strided access. nfc,Mel-Chen,"Add tests for strided access with UF > 1, and introduce a new test case @constant_stride_reinterpret.",2025-08-29T07:14:40Z,2025-09-03T10:19:36Z,2025-09-03T10:19:36Z,2025-09-03T10:19:36Z,True,1,4,4,904,65,1
155980,closed,[clang][bytecode] Remove split frame business,tbaederr,This was never really needed.,2025-08-29T07:09:04Z,2025-08-29T07:42:46Z,2025-08-29T07:42:46Z,2025-08-29T07:42:46Z,True,1,0,1,3,16,4
155977,closed,[Analysis] Remove an unnecessary cast (NFC),kazutakahirata,"getParent() already returns Function *.
",2025-08-29T05:19:06Z,2025-08-29T16:24:28Z,2025-08-29T16:24:22Z,2025-08-29T16:24:22Z,True,1,0,1,3,3,1
155978,closed,[llvm] Proofread BuildingADistribution.rst,kazutakahirata,,2025-08-29T05:19:23Z,2025-08-29T16:24:34Z,2025-08-29T16:24:30Z,2025-08-29T16:24:29Z,True,0,0,1,17,17,1
155976,closed,[Support] Simplify isUInt (NFC),kazutakahirata,,2025-08-29T05:18:49Z,2025-08-29T16:24:20Z,2025-08-29T16:24:15Z,2025-08-29T16:24:14Z,True,1,0,1,1,9,1
155975,closed,[ADT] Remove a set-but-unused variable in findBucketForInsertion (NFC),kazutakahirata,"The updated value isn't used.
",2025-08-29T05:18:12Z,2025-08-29T16:24:16Z,2025-08-29T16:24:06Z,2025-08-29T16:24:06Z,True,1,0,1,0,1,1
155974,closed,[ADT] Delegate to DenseMap::find_as (NFC),kazutakahirata,"DenseMap::find is a special case of DenseMap::find_as with a
restriction on the key type.
",2025-08-29T05:17:53Z,2025-08-29T16:24:12Z,2025-08-29T16:23:58Z,2025-08-29T16:23:58Z,True,1,0,1,2,14,1
155973,closed,[RISCV] Split the attribute test for xsfvfwmaccqqq to attributes-sifive.ll. NFC.,tclin914,,2025-08-29T05:12:47Z,2025-08-29T05:42:00Z,2025-08-29T05:40:51Z,2025-08-29T05:40:51Z,True,1,0,1,6,4,2
155972,closed,[RISCV][GlobalISel] Lower G_ATOMICRMW_SUB via G_ATOMICRMW_ADD,ReVe1uv,"RISCV does not provide a native atomic subtract instruction, so this patch lowers `G_ATOMICRMW_SUB` by negating the RHS value and performing an atomic add. The legalization rules in `RISCVLegalizerInfo` are updated accordingly, with libcall fallbacks when `StdExtA` is not available, and intrinsic legalization is extended to support `riscv_masked_atomicrmw_sub`.

For example, lowering

`%1 = atomicrmw sub ptr %a, i32 1 seq_cst`

on riscv32a produces:

```
li      a1, -1
amoadd.w.aqrl   a0, a1, (a0)
```

On riscv64a, where the RHS type is narrower than XLEN, it currently produces:

```
li      a1, 1
neg     a1, a1
amoadd.w.aqrl   a0, a1, (a0)
```

There is still a constant-folding or InstConbiner gap. For instance, lowering

```
%b = sub i32 %x, %y
%1 = atomicrmw sub ptr %a, i32 %b seq_cst
```

generates:

```
subw    a1, a1, a2
neg     a1, a1
amoadd.w.aqrl   a0, a1, (a0)
```

This sequence could be optimized further to eliminate the redundant neg. Addressing this may require improvements in the Combiner or Peephole Optimizer in future work.",2025-08-29T05:07:17Z,2025-09-04T01:37:21Z,2025-09-03T15:42:32Z,2025-09-03T15:42:32Z,True,4,10,3,1766,695,13
155968,closed,"Revert ""[X86][APX] Remove redundant TEST*ri instructions""",vitalybuka,"Reverts llvm/llvm-project#155586

Breaks bots, see details in #155586.",2025-08-29T03:38:00Z,2025-08-29T04:05:32Z,2025-08-29T04:05:32Z,2025-08-29T04:05:32Z,True,2,0,1,49,74,6
155965,closed,[clang] fix nested tags of the same name not being included in their context,mizvekov,"Fix an error in the logic meant to handle a redeclaration such as:
```C++
struct A {
  struct __attribute__((foo)) A *ptr;
};
```
In the declaration of ptr, we must introduce a new redeclaration of A in order for it to carry the new attribute. This is a redeclaration of the existing A, but it is only lexically contained in A, still semantically belonging to the TU. This is the same deal as happens with friend declarations, and the logic used to handle that is reused here.

But this was going haywire with a class indirectly nested within a class of the same name.

The fix limits this logic to only apply when the tag use is just a simple reference.

Since this regression was never released, there are no release notes.

Fixes #155936",2025-08-29T03:08:55Z,2025-08-29T04:04:31Z,2025-08-29T03:33:56Z,2025-08-29T03:33:56Z,True,2,0,1,17,1,2
155966,closed,[NFC] #155740 post cleanup,paperchalice,"Remove all ""approx-func-fp-math"" in tests.",2025-08-29T03:12:32Z,2025-08-29T05:14:46Z,2025-08-29T04:45:38Z,2025-08-29T04:45:38Z,True,4,0,1,97,437,17
155970,closed,[rtsan] Add versioned pthread_cond interceptors,cjappl,"This fixes #146120, confirmed by the original reporter

Previously reviewed as #155181, but re-submitting for better book-keeping.


Adds versioned pthread_cond interceptors, and the pthread_cond_init/_destroy interceptors",2025-08-29T04:42:55Z,2025-08-30T18:39:03Z,2025-08-29T18:06:32Z,2025-08-29T18:06:32Z,True,8,1,2,46,0,2
155964,closed,"Reland ""[sancov][LoongArch] Resolve pcaddu18i+jirl in evaluateBranch and teach sancov (#155371)""",zhaoqi5,"Reland 9c994f5 after fixing ubsan bots failures.

This commit overrides `updateState` and `resetState` hooks in
`MCInstrAnalysis` in order to be able to analyze pcaddu18i+jirl pairs
inside `evaluateBranch`.

After this commit, `llvm-objdump` is able to correctly analyze and print
detailed information. `lld/test/ELF/loongarch-call36.s` shows the
changes.

Besides, this commit also teaches sancov to resolve such call sequences.
Without this commit, some tests in compiler-rt failed:

```
Failed Tests :
  SanitizerCommon-asan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard-dso.cpp
  SanitizerCommon-asan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard.cpp
  SanitizerCommon-lsan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard-dso.cpp
  SanitizerCommon-lsan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard.cpp
  SanitizerCommon-msan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard-dso.cpp
  SanitizerCommon-msan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard.cpp
```

The reason is that sancov could not resolve pcaddu18i+jirl call sequence
correctly and caused mismatches between coverage points in the binary
and the .sancov file:

```
ERROR: Coverage points in binary and .sancov file do not match.
```

NOTE: A similar issue might also occur on RISC-V when relaxation is
disabled (not verified). This commit can also fix for it.",2025-08-29T03:03:35Z,2025-08-29T03:46:19Z,2025-08-29T03:46:17Z,2025-08-29T03:46:17Z,True,2,0,2,89,4,3
155961,closed,[RISCV][NFC] Simplify some rvv regbankselect cases,jacquesguan,,2025-08-29T02:16:59Z,2025-09-01T02:59:55Z,2025-09-01T02:59:54Z,2025-09-01T02:59:54Z,True,1,2,2,1933,4133,10
155963,closed,"Revert ""[rtsan] Support legacy pthread_cond variables (#152947)""",cjappl,"This reverts commit aa4bc2ed914bd08feb90ba691bd50482e8de51eb.

As discussed on #155181 , this introduced some unneeded code. Reverting and applying the smaller version of the fix",2025-08-29T02:32:54Z,2025-08-29T02:35:03Z,2025-08-29T02:33:44Z,2025-08-29T02:33:43Z,True,1,0,1,4,87,2
155960,closed,[LoongArch] Fix broadcast load with extension.,tangaac,"PR #135896 introduces [x]vldrepl instructions without handling extension.
This patch will fix that.",2025-08-29T02:03:20Z,2025-09-02T01:57:24Z,2025-09-01T10:28:17Z,2025-09-01T10:28:17Z,True,4,9,3,58,5,3
155959,closed,[clang] NFC: remove leftover from injected class name redecl,mizvekov,"The code being removed became non-functional when injected class names were removed from the redecl chain in 470c454a6176ef31474553e408c90f5ee630df89, but that commit didn't clean the code base out of all the workarounds for that state of affairs.",2025-08-29T01:58:01Z,2025-08-29T02:41:47Z,2025-08-29T02:38:09Z,2025-08-29T02:38:08Z,True,1,0,1,2,15,1
155957,closed,[Clang][CMake] Use IRPGO instead of FE PGO for Cmake Caches,boomanaiden154,"Currently the clang CMake caches use FE PGO for instrumentation (LLVM_BUILD_INSTRUMENTED=ON). However, IRPGO is generally regarded as better for performance. I am measuring about a 1.5% performance gain when building libLLVMSupport.a using this configuration versus what existed before this commit. I would suspect the gains are larger on other platforms like Windows where we cannot subsume any gains using PLO.",2025-08-29T01:53:08Z,2025-09-01T03:55:04Z,2025-08-29T17:06:26Z,2025-08-29T17:06:26Z,True,4,0,1,1,1,1
155958,closed,[CMake] Remove LLVM_ENABLE_IR_PGO Option,boomanaiden154,"It has been deprecated for eight years now
(a702fa17f31abd5efce302ef3d4cf2fbaf167368), and all users that I know of are using LLVM_BUILD_INSTRUMENTED.",2025-08-29T01:57:13Z,2025-08-29T17:38:32Z,2025-08-29T17:38:28Z,2025-08-29T17:38:28Z,True,0,0,1,1,4,1
155956,closed,[lldb][elf-core][ARM] Add support for VFP registers,igorkudrin,"This patch loads values of the VFP registers from the NT_ARM_VFP note. Note that a CORE/NT_FPREGSET note is typically present in core dump files and used to store the FPA registers. The FPA unit is rare and obsolete; however, Linux creates the note even if the unit is absent.",2025-08-29T01:49:52Z,2025-09-08T21:55:59Z,2025-09-08T21:55:55Z,2025-09-08T21:55:55Z,True,4,17,7,88,6,6
155954,closed,release/21.x: Add pointer auth documentation to contents (#155763),llvmbot,"Backport 6394c58

Requested by: @ojhunt",2025-08-29T00:59:05Z,2025-09-03T10:14:01Z,2025-09-03T10:13:25Z,2025-09-03T10:13:25Z,True,3,0,1,1,0,1
155950,closed,[RISCV] Add a conditional-cmv-fusion RUN line to select-binop-identity.ll. NFC,topperc,Trying to clear out some test file changes from our downstream.,2025-08-29T00:00:13Z,2025-08-29T02:36:00Z,2025-08-29T02:35:58Z,2025-08-29T02:35:58Z,True,1,0,1,142,0,1
155955,closed,[compiler-rt] Make __EH_FRAME_LIST__ const to avoid RW .eh_frame mapping (#155764),dongjianqiang2,"In crtbegin.c, `__EH_FRAME_LIST__` was previously declared as a writable array of pointers. This caused the linker to place .eh_frame into a segment with read-write permissions, leading to larger virtual memory footprint at runtime (e.g. .eh_frame mapped into both LOAD and RELRO).

Changing it to `static void * const __EH_FRAME_LIST__[]` ensures that the section is treated as read-only, matching GCC’s behavior with `__EH_FRAME_BEGIN__`. This prevents unnecessary RW mappings of .eh_frame while preserving the intended semantics.

Fixes: #155764",2025-08-29T01:29:20Z,2025-08-30T08:24:28Z,2025-08-30T06:56:45Z,2025-08-30T06:56:45Z,True,3,0,2,1,1,1
155949,closed,[flang] Re-enable setting `noalias` on procedure arguments.,vzakhari,"This is a follow-up on #140803, which was disabled in #142128
due to #143219.
",2025-08-28T23:53:19Z,2025-08-29T20:04:55Z,2025-08-29T20:04:55Z,2025-08-29T20:04:55Z,True,3,0,2,13,13,6
155947,closed,[C++20][Modules] Remove unused part of a test: `merge-records.cppm`.,mpark,,2025-08-28T23:22:39Z,2025-09-09T22:23:00Z,2025-08-29T01:41:30Z,2025-08-29T01:41:30Z,True,3,0,1,0,21,1
155946,closed,[MLIR] Fix issues with XeGPU to XeVM pass.,silee2,"Fixes two issue with XeGPU to XeVM pass

1. xegpu.update_nd_offset op lower generated incorrect code sequence
2. xegpu.store_nd did not lower single element vector",2025-08-28T23:22:32Z,2025-08-28T23:52:18Z,2025-08-28T23:52:18Z,2025-08-28T23:52:18Z,True,3,5,1,45,26,2
155944,closed,[msan] Detect dereferencing zero-alloc as use-of-uninitialized-value,thurstond,"When a zero-byte allocation is requested, MSan actually allocates 1-byte for compatibility. This change poisons that byte, to detect dereferences.

Also updates the test from #155934",2025-08-28T23:14:50Z,2025-09-05T21:51:05Z,2025-08-29T17:19:38Z,2025-08-29T17:19:38Z,True,1,13,1,6,4,2
155943,closed,[asan] Detect dereferencing zero-alloc as heap buffer overflow,thurstond,"When a zero-byte allocation is requested, ASan actually allocates 1-byte for compatibility. This change poisons that byte, to detect dereferences.

Also updates the test from #155933",2025-08-28T23:14:14Z,2025-09-02T16:47:15Z,2025-08-29T17:19:47Z,2025-08-29T17:19:47Z,True,8,0,1,6,4,2
155942,closed,[lldb] Skip TestVariableAnnotationsDisassembler.py on non-x86 architectures,UltimateForce21,"The test lldb-api::TestVariableAnnotationsDisassembler.py was failing on the lldb-remote-linux-ubuntu and lldb-remote-linux-win builders due to assembler incompatibilities in d_original_example.s. These failures are not related to the disassembler changes themselves but to the test setup.

This patch updates the test to be skipped when running on unsupported architectures to avoid failures. The test will still run and validate correctly where the assembler input is supported.",2025-08-28T23:10:08Z,2025-08-29T13:54:59Z,2025-08-29T10:25:36Z,2025-08-29T10:25:36Z,True,7,0,1,7,0,1
155939,closed,[lldb] Add SBFunction::GetBaseName() & SBSymbol::GetBaseName(),JDevlieghere,"When you are trying for instance to set a breakpoint on a function by name, but the SBFunction or SBSymbol are returning demangled names with argument lists, that match can be tedious to do.  Internally, the base name of a symbol is something we handle all the time, so it's reasonable that there should be a way to get that info from the API as well.

rdar://159318791",2025-08-28T22:51:06Z,2025-09-04T11:38:27Z,2025-08-29T02:10:53Z,2025-08-29T02:10:53Z,True,9,6,5,103,0,9
155935,closed,[RISCV] Prevent folding ADD_LO into load/store if we can't fold all uses.,topperc,"If we don't fold all uses, we end up with an LUI that is used by an ADDI and some loads/stores. This requires the LUI to write a different register than the ADDI or the load/stores uses have to be scheduled between the LUI and ADDI. It prevents macrofusion of the LUI+ADDI on CPUs that support it. It prevents the use of PseudoMovAddr which prevents the LUI+ADDI from being rematerializable.

This is based on a patch we have had in our downstream for a while that we originally wrote because of macrofusion and rematerialization. I no longer have any relevant performance or code size numbers for it.",2025-08-28T22:35:05Z,2025-09-09T16:43:37Z,2025-09-09T16:25:37Z,2025-09-09T16:25:37Z,True,1,13,4,8950,9106,29
155933,closed,[asan] Add test for deferencing zero-sized malloc/calloc,thurstond,"ASan fails to catch this, because 0-byte allocations are converted into 1-byte allocations.

Bug originally reported by dvyukov",2025-08-28T22:17:13Z,2025-08-28T22:48:52Z,2025-08-28T22:48:52Z,2025-08-28T22:48:52Z,True,2,2,3,39,0,1
155932,closed,release/21.x: [libc++] Fix broken precondition of __bit_log2 (#155476),llvmbot,"Backport 2ae4b92a1cf01b7d09f70ccc919eca2b5d02b080

Requested by: @ldionne",2025-08-28T22:15:03Z,2025-09-09T13:05:41Z,2025-09-09T08:32:12Z,2025-09-09T08:32:12Z,True,8,0,1,8,0,3
155934,closed,[msan] Add test for deferencing zero-sized malloc/calloc,thurstond,"MSan fails to catch this, because 0-byte allocations are converted into 1-byte allocations.
    
Bug originally reported by dvyukov
",2025-08-28T22:17:25Z,2025-08-28T22:48:32Z,2025-08-28T22:48:31Z,2025-08-28T22:48:31Z,True,2,0,3,39,0,1
155938,closed,[lldb] Skip TestVariableAnnotationsDisassembler.py on unsupported architectures,UltimateForce21,"The test lldb-api::TestVariableAnnotationsDisassembler.py was failing on the lldb-remote-linux-ubuntu and lldb-remote-linux-win builders due to assembler incompatibilities in d_original_example.s. These failures are not related to the disassembler changes themselves but to the test setup.

This patch updates the test to be skipped when running on unsupported architectures to avoid failures. The test will still run and validate correctly where the assembler input is supported.",2025-08-28T22:50:54Z,2025-08-28T23:11:06Z,2025-08-28T23:08:14Z,,False,2,0,62,7,0,1
155930,closed,ThinLTOBitcodeWriter: Split modules with __cfi_check and no type metadata.,pcc,"Eli Friedman found a case that was not handled correctly by #154833 where
we failed to split the module if it contained a __cfi_check function but
no type metadata. Handle this case correctly by checking for __cfi_check
when deciding whether to split.
",2025-08-28T21:59:13Z,2025-08-29T02:13:55Z,2025-08-29T02:13:53Z,2025-08-29T02:13:53Z,True,2,0,1,33,13,2
155926,closed,[NFC][llvm] Simplify test IR file,Prabhuk,Simplify  call-graph-section.ll test file for better readability.,2025-08-28T21:31:25Z,2025-09-01T18:34:47Z,2025-09-01T18:34:47Z,2025-09-01T18:34:47Z,True,1,0,3,2,4,1
155925,closed,[libc][test] Remove more unused nan variables,rupprecht,"These are redefined/shadowed by the if constexpr (FPBits::FRACTION_LEN - 1 >= 5) case below.

Added by https://github.com/llvm/llvm-project/pull/155569. I missed these ones in #155894.",2025-08-28T21:27:46Z,2025-08-28T21:33:42Z,2025-08-28T21:33:42Z,2025-08-28T21:33:42Z,True,1,0,1,0,6,1
155924,closed,"[OpenACC] 'reduction' init lowering for +, |, ^, ||",erichkeane,"These four operators have an initial value of 0, so they are able to use C/C++ 'zero init'.  This patch adds the infrastructure to the Sema init calculations to differentiate based on the reduction operator, then enables emission of the inits in CodeGen (which should work for all
    inits, once generated).

The rest of this test is just updating validation to make sure that the inits happen correctly for all 4 operators.",2025-08-28T21:26:57Z,2025-08-29T22:46:09Z,2025-08-29T22:46:09Z,2025-08-29T22:46:09Z,True,3,7,4,2349,329,23
155921,closed,[NVPTX] Fixup some issues introduced by 128-bit atomics,AlexMaclean,,2025-08-28T21:06:23Z,2025-08-29T18:17:08Z,2025-08-28T21:43:55Z,2025-08-28T21:43:55Z,True,2,2,1,32,10,3
155923,closed,"Reland ""[lit] Refactor available `ptxas` features""",justinfargnoli,"Reland #154439.  Reverted with #155914.

Account for:
- Windows `ptxas` outputting error messages to `stdout` instead of `stderr`: 10613ed67ca470a671c98280049812ea74f9c773
- Tests in `llvm/test/DebugInfo/NVPTX`: 56535ffa0f6d83f809035c97da06439026faa8ea",2025-08-28T21:20:12Z,2025-09-02T17:42:27Z,2025-09-02T17:42:25Z,2025-09-02T17:42:25Z,True,6,0,3,370,311,180
155918,closed,[profcheck] Allow `unknown` function entry count,mtrofin,"Some passes synthesize functions, e.g. WPD, so we may need to indicate “this synthesized function’s entry count cannot be estimated at compile time” - akin to `branch_weights`​.

Issue #147390",2025-08-28T20:36:52Z,2025-09-04T20:15:25Z,2025-09-04T20:15:23Z,2025-09-04T20:15:23Z,True,2,0,1,28,14,5
155917,closed,[NFC] Fix warning in IR2Vec Embedder creation in printer pass,svkeerthy,Fixes the warning `default label in switch which covers all enumeration values [-Wcovered-switch-default]`,2025-08-28T20:36:29Z,2025-08-28T22:25:19Z,2025-08-28T22:25:17Z,2025-08-28T22:25:17Z,True,2,0,2,1,11,1
155916,closed,"[libc++] Remove __classic_[upper,lower]_table from cxx03 __locale header NFC)",zibi2,Remove `__classic_upper_table()` and `__classic_lower_table()` from cxx03. The previous patch removed those function but declaration was left in cxx03 header. This is more cleaning up patch.,2025-08-28T20:30:53Z,2025-08-29T08:24:53Z,2025-08-29T08:24:52Z,2025-08-29T08:24:52Z,True,1,0,1,0,12,1
155914,closed,"Revert ""[lit] Refactor available `ptxas` features""",justinfargnoli,Reverts llvm/llvm-project#154439 in order to resolve https://github.com/llvm/llvm-project/pull/154439#issuecomment-3234638253. ,2025-08-28T20:08:33Z,2025-08-28T21:19:00Z,2025-08-28T21:18:58Z,2025-08-28T21:18:58Z,True,3,0,2,305,367,175
155913,closed,[flang][cuda] Define _CUDA only when preprocessor is enabled,clementval,"From the CUDA Fortran programming guide: 
> If CUDA Fortran is enabled in compilation, either by specifying -⁠cuda on the command line, and pre-processing is enabled by either the -⁠Mpreprocess compiler option or by using capital letters in the filename extension (.CUF, .F90, etc.) then the _CUDA macro is defined.

Move the definition of `_CUDA` to the compiler invocation. ",2025-08-28T20:06:23Z,2025-08-28T21:53:31Z,2025-08-28T21:44:46Z,2025-08-28T21:44:46Z,True,1,0,2,7,5,4
155911,closed,[MemoryBuiltins] Add getBaseObjectSize() (NFCI),nikic,"getObjectSize() is based on ObjectSizeOffsetVisitor, which has become very expensive over time. The implementation is geared towards computing as-good-as-possible results for the objectsize intrinsics and similar. However, we also use it in BasicAA, which is very hot, and really only cares about the base cases like alloca/malloc/global, not any of the analysis for GEPs, phis, or loads.

Add a new getBaseObjectSize() API for this use case, which only handles the non-recursive cases. As a bonus, this API can easily return a TypeSize and thus support scalable vectors. For now, I'm explicitly discarding the scalable sizes in BasicAA just to avoid unnecessary behavior changes during this refactor.

Compile-time: https://llvm-compile-time-tracker.com/compare.php?from=24924a8be1bb7c6083303330ecc0e7dc647247d3&to=061852858448ad2b549fc2b5a0dcd2d38581a859&stat=instructions:u

No changes on llvm-opt-benchmark.",2025-08-28T20:02:04Z,2025-09-01T07:25:59Z,2025-09-01T07:25:57Z,2025-09-01T07:25:57Z,True,1,6,2,67,3,3
155909,closed,[flang][folding] fix i(a)char folding regression,akuhlens,"Fixes a bug in folding ""ichar"" and ""iachar"" intrinsics introduced [here](https://github.com/llvm/llvm-project/commit/c649d31c596e6ca4a19103abba6499ff904ed9cc#r164779170).

There was already a slight bug that the coded didn't fold when portability warnings were enabled which has also been fixed and tested for.",2025-08-28T20:00:12Z,2025-08-28T21:29:27Z,2025-08-28T21:29:26Z,2025-08-28T21:29:26Z,True,1,3,3,25,6,3
155912,closed,[lit] Use `.format()` over format strings literals,justinfargnoli,Fix https://github.com/llvm/llvm-project/pull/154439#issuecomment-3234638253,2025-08-28T20:03:46Z,2025-08-28T20:49:24Z,2025-08-28T20:41:49Z,,False,7,0,2,8,6,1
155900,closed,[clang] fix obtaining underlying type for demoted enum definitions,mizvekov,"Clang skips parsing a TagDecl definition in case a definition was already parsed in another module.

In those cases, an EnumDecl might be left without an IntegerType. Take this into account when getting the underlying type of an enum, look for the integer type in the definition instead in those cases.

This patch also changes the implementation so it properly marks those skipped tag definitions as demoted.

This fixes a regression reported here: https://github.com/llvm/llvm-project/pull/155028#issuecomment-3233410561

Since this regression was never released, there are no release notes.",2025-08-28T18:10:33Z,2025-08-29T01:42:12Z,2025-08-28T18:40:46Z,2025-08-28T18:40:46Z,True,4,2,1,33,3,3
155899,closed,release/21.x: compiler-rt: Use OpenBSD's elf_aux_info to detect AArch64 HW features (#155768),llvmbot,"Backport 7b3745ed0c9b34ea78e9e9098736fe91930d103b 2eaba46f463e79212d549e2ebf74e5d53b88b76b

Requested by: @brad0",2025-08-28T18:07:31Z,2025-09-09T08:33:29Z,2025-09-09T08:32:55Z,2025-09-09T08:32:55Z,True,5,0,2,4,4,3
155904,closed,[clang] fix regression parsing C enum which doesn't declare anything,mizvekov,"The regression was introduced in #155313

Since this regression was never released, there are no release notes.

Fixes #155794",2025-08-28T18:35:47Z,2025-08-29T01:04:29Z,2025-08-28T18:59:17Z,2025-08-28T18:59:17Z,True,1,0,1,8,4,2
155896,closed,[ValueTracking] Use unionWith when calculating known bits for abs.,topperc,"We may have already gotten information from range metadata, don't
overwrite it.",2025-08-28T18:01:01Z,2025-08-29T02:36:25Z,2025-08-29T02:36:23Z,2025-08-29T02:36:23Z,True,1,0,2,14,1,2
155894,closed,[libc][test] Remove unused nan variables,rupprecht,"These are redefined/shadowed by the `if constexpr (FPBits::FRACTION_LEN - 1 >= 5)` case below.

Added by #155569",2025-08-28T17:51:28Z,2025-08-28T17:56:11Z,2025-08-28T17:56:10Z,2025-08-28T17:56:10Z,True,1,0,1,0,6,1
155891,closed,[Clang][bytecode] interp__builtin_elementwise_int_binop - use APSInt callback instead of repeated switch statement,RKSimon,"Users of interp__builtin_elementwise_int_binop are going to be very well defined, we can use a simple callback mechanism (including existing llvm::APIntOps static methods) to perform the evaluation and avoid a repeated switch statement.

Hopefully this will help keep interp__builtin_elementwise_int_binop clean as we add more uses",2025-08-28T17:28:51Z,2025-08-29T12:18:39Z,2025-08-29T11:49:21Z,2025-08-29T11:49:20Z,True,4,0,2,46,70,1
155883,closed,[docs][NFC] Resolve mismatched backticks,Rageking8,,2025-08-28T16:23:28Z,2025-08-28T22:16:57Z,2025-08-28T21:55:30Z,2025-08-28T21:55:30Z,True,2,0,1,7,7,7
155882,closed,[AMDGPU] Common up code from AMDGPUInstPrinter::printImmediate64. NFC.,jayfoad,"Introduce a new helper function printLiteral64.
",2025-08-28T16:23:17Z,2025-09-03T07:01:07Z,2025-08-28T16:53:31Z,2025-08-28T16:53:31Z,True,1,0,1,15,14,2
155888,closed,[RISCV][GISel] Lower G_ABDS and G_ABDU,sunshaoce,Implementation follows the `ISD::ABDS` handling in `RISCVTargetLowering::LowerOperation`.,2025-08-28T17:13:14Z,2025-09-05T13:21:31Z,2025-09-05T13:16:35Z,2025-09-05T13:16:35Z,True,6,11,16,597,4,6
155879,closed,"Revert ""[sancov][LoongArch] Resolve pcaddu18i+jirl in evaluateBranch and teach sancov""",vitalybuka,"Reverts llvm/llvm-project#155371

Breaks ubsan bots.
",2025-08-28T16:16:16Z,2025-08-28T16:44:31Z,2025-08-28T16:44:30Z,2025-08-28T16:44:30Z,True,3,0,1,4,87,3
155877,closed,release/21.x: [AArch64][PAC] Fix clobbering registers by BLRA and AUTH_TCRETURN (#155373),llvmbot,"Backport c7f3bdb61233374de6b28af139a8abc41f5683ee

Requested by: @atrosinenko",2025-08-28T16:12:20Z,2025-09-03T10:15:17Z,2025-09-03T10:14:43Z,2025-09-03T10:14:42Z,True,3,0,1,120,9,2
155876,closed,[X86] Add -fexperimental-new-constant-interpreter test coverage to the AVX512 constexpr test files,RKSimon,Partial fix for #155814,2025-08-28T16:07:28Z,2025-08-29T09:08:03Z,2025-08-29T08:09:23Z,2025-08-29T08:09:23Z,True,2,0,2,81,0,14
155874,closed,release/21.x: [AArch64][PAC] Do not execute AUT instructions speculatively (#155372),llvmbot,"Backport ab3c0ca8351b0b40f57dfa97a21d913bbbda71c3

Requested by: @atrosinenko",2025-08-28T16:03:19Z,2025-09-03T10:15:47Z,2025-09-03T10:15:12Z,2025-09-03T10:15:11Z,True,3,0,1,124,1,2
155873,closed,[flang] Fix -Wcharacter-conversion warnings (NFC),nikic,"This fixes new warnings when building with Clang 21, encountered in https://github.com/llvm/llvm-project/pull/155627.",2025-08-28T16:01:31Z,2025-08-29T14:34:52Z,2025-08-29T14:34:51Z,2025-08-29T14:34:51Z,True,1,3,1,3,2,2
155875,closed,"Revert ""[ADT] Fix signed integer overflow""",vitalybuka,"Reverts llvm/llvm-project#155826

To simplify revert of https://github.com/llvm/llvm-project/pull/155549 which introduces UBs.",2025-08-28T16:06:26Z,2025-08-28T16:09:09Z,2025-08-28T16:09:08Z,,False,2,0,1,1,2,1
155871,closed,"[flang][OpenMP] Simplify getLocation in FlangOmpReportVisitor, NFC",kparzysz,Use a utility function to get the construct source.,2025-08-28T16:00:34Z,2025-08-28T17:08:16Z,2025-08-28T17:08:14Z,2025-08-28T17:08:14Z,True,0,0,1,3,26,1
155872,closed,[flang][OpenMP] Replace OpenMPBlockConstruct with OmpBlockConstruct,kparzysz,"OpenMPBlockConstruct, somewhat confusingly, represents most but not all block-associated constructs. It's derived from OmpBlockConstruct, as are all the remaining block-associated constructs.

It does not correspond to any well-defined group of constructs. It's the collection of constructs that don't have their own types (and those that do have their own types do so for their own reasons).

Using the broader OmpBlockConstruct in type-based visitors won't cause issues, because the specific overloads (for classes derived from it) will always be preferred.",2025-08-28T16:01:18Z,2025-08-29T12:37:50Z,2025-08-29T12:37:48Z,2025-08-29T12:37:48Z,True,1,0,3,65,72,20
155870,closed,[MLIR][Python] fix StandalonePythonModules shipping all dialect modules,makslevental,,2025-08-28T15:59:05Z,2025-09-05T18:01:46Z,2025-09-02T02:10:31Z,,False,1,0,2,9,0,1
155869,closed,[libc] Use intermediate float operations on the GPU,jhuber6,"Summary:
Move the GPU config to the common directory instead of copying it and
enable the intermediate float option in the math library.
",2025-08-28T15:58:41Z,2025-08-28T18:03:56Z,2025-08-28T18:03:56Z,2025-08-28T18:03:55Z,True,1,0,1,1,46,2
155868,closed,[X86] Enable EliminateSpillageCopies by default on X86,cheezeburglar,"RAGreedy sometimes generates spill-reload chains such as in #136574; there is machinery in MachineCopyPropagation::EliminateSpillageCopies that eliminates these meaningless movs. Here we just enable it by default on X86.

Old code in RAGreedy that removed tried to prevent these chains are [here](https://github.com/llvm/llvm-project/commit/294eca35a00f89dff474044ebd478a7f83ccc310).

Running EliminateSpillageCopies is a little cheaper than the other functions in MachineCopyPropagation in the little perf profiling I've done.",2025-08-28T15:57:31Z,2025-08-29T19:49:55Z,2025-08-29T19:49:55Z,,False,5,0,1,2,0,1
155867,closed,[flang] Don't associate pointers with zero sized storage targets,eugeneepshteyn,Fixes #155481,2025-08-28T15:55:52Z,2025-08-29T12:20:46Z,2025-08-28T22:53:24Z,2025-08-28T22:53:24Z,True,4,5,5,4,2,1
155863,closed,[TableGen][DecoderEmitter] Simplify emitSoftFailTableEntry (NFC),s-barannikov,,2025-08-28T15:49:31Z,2025-08-28T17:12:27Z,2025-08-28T16:20:09Z,2025-08-28T16:20:09Z,True,1,0,1,11,30,1
155864,closed,[AMDGPU] Determine MCFixupKind in a more general way. NFCI.,jayfoad,,2025-08-28T15:50:30Z,2025-09-08T10:19:03Z,2025-08-28T16:24:50Z,2025-08-28T16:24:50Z,True,1,1,2,3,9,1
155866,closed,[HLSL] Add static methods for resource initialization,hekota,"Adds static methods `__createFromBinding` and `__createFromImplicitBinding` to resource classes. These methods will be used for resource initialization instead of resource constructors that take binding information.

Updated proposal: https://github.com/llvm/wg-hlsl/pull/336

Depends on #155861

Part 1 of #154221",2025-08-28T15:55:51Z,2025-09-10T18:15:24Z,2025-09-10T18:15:24Z,2025-09-10T18:15:24Z,True,2,18,16,351,28,6
155865,closed,[X86] Add -fexperimental-new-constant-interpreter test coverage to the AVX1/F16C/XOP constexpr test files,RKSimon,Partial fix for #155814,2025-08-28T15:52:57Z,2025-08-29T07:44:14Z,2025-08-28T19:56:44Z,2025-08-28T19:56:44Z,True,2,0,2,25,0,3
155862,closed,[ADT] Avoid creating iterators in DenseMap::operator[] (NFC),MacDue,An attempt to resolve the slowdown from #155204,2025-08-28T15:48:42Z,2025-08-29T11:40:52Z,2025-08-29T08:51:10Z,2025-08-29T08:51:10Z,True,4,0,1,13,5,1
155861,closed,[HLSL] Reorder arguments of __builtin_hlsl_resource_handlefromimplicitbinding,hekota,"Reorder the arguments of `__builtin_hlsl_resource_handlefromimplicitbinding` builtins to match the order of the `llvm.dx.resource.handlefromimplicitbinding` intrinsics, and also to match the arguments on the static create methods for resource initialization ([described here](https://github.com/llvm/wg-hlsl/pull/336)).

Previously the arguments were in the same order as the resource class constructor for implicit binding. The `orderId` argument was intentionally at index `3` to make sure explicit & implicit binding constructors have different signature. Since we are going to replace the constructors that have binding info with static create methods, this is no longer necessary, and it is better for the argument order to match.

Related to #154221.",2025-08-28T15:48:27Z,2025-09-04T00:30:37Z,2025-09-04T00:30:36Z,2025-09-04T00:30:36Z,True,1,0,2,10,10,6
155860,closed,[DirectX] Don't byte-swap returned byte-offset,inbelic,"- The returned byte offset from `rewriteOffsetToCurrentByte` should not be byte-swapped as it will be compared and interpreted as a uint32_t in its uses

This commit corrects build failures that hit an assert on big-endian builds",2025-08-28T15:47:25Z,2025-08-28T16:59:39Z,2025-08-28T16:59:39Z,2025-08-28T16:59:39Z,True,1,0,1,3,2,1
155859,closed,[X86] Add -fexperimental-new-constant-interpreter test coverage to the FMA/FMA4 constexpr test files,RKSimon,Partial fix for #155814,2025-08-28T15:44:31Z,2025-08-29T07:48:51Z,2025-08-29T07:30:12Z,2025-08-29T07:30:11Z,True,2,0,2,14,4,2
155857,closed,[X86] Add -fexperimental-new-constant-interpreter test coverage to the MMX/SSE constexpr test files,RKSimon,Partial fix for #155814,2025-08-28T15:35:25Z,2025-08-28T16:34:52Z,2025-08-28T16:34:49Z,2025-08-28T16:34:49Z,True,2,0,1,57,0,7
155856,closed,release/21.x: [mlir][cmake] Fix mlir target export (#153341),llvmbot,"Backport ada1911

Fixes #155827

Requested by: @joker-eph",2025-08-28T15:29:03Z,2025-09-03T10:16:24Z,2025-09-03T10:15:47Z,2025-09-03T10:15:46Z,True,3,0,1,1,1,1
155855,closed,[analyzer] Improve handling of placement new in `PointerArith`,alejandro-alvarez-sonarsource,"This pull improves the handling of placement new in`PointerArith`, fixing one family of false positives, and one of negatives:

### False Positives

```cpp
  Buffer buffer;
  int* array = new (&buffer) int[10];
  ++array; // there should be no warning
```

The code above should flag the memory region `buffer` as reinterpreted, very much as `reinterpret_cast` would do. Note that in this particular case the placement new is inlined so the engine can track that `*array` points to the same region as `buffer`.

This is no-op if the placement new is opaque.

### False Negatives

```cpp
  Buffer buffer;
  int* array = new (&buffer) int;
  ++array; // there should be a warning
```

In this case, there is an implicit cast to `void*` when calling placement new. The memory region was marked as reinterpreted, and therefore later pointer arithmetic will not raise. I have added a condition to not consider a cast to `void*` as a reinterpretation, as an array of voids does not make much sense.


There are still some limitations, of course. For starters, if a single `int` is created in place of an array of `unsigned char` of exactly the same size, it will still be considered as an array. A convoluted example to make the point that I think it makes sense *not* to raise in this situation is in the test `checkPlacementNewSlices`.

CPP-6868",2025-08-28T15:23:44Z,2025-09-05T14:36:59Z,2025-09-05T14:36:59Z,2025-09-05T14:36:59Z,True,6,9,5,138,2,3
155858,closed,[TargetLowering] Remove freezing from expandABS and expandABD,AZero13,They do not need freezing as they do not propagate poison or undef.,2025-08-28T15:43:40Z,2025-08-28T16:12:41Z,2025-08-28T15:59:30Z,,False,2,0,1,2,6,1
155854,closed,[NFC] Move llvm.fptrunc.round to Floating-Point Conversion Intrinsics class,MrSidims,"Floating-Point Conversion Intrinsics - is a new category of intrinsics, that do not fall into other categories and can be used for conversions with explicit rounding modes and mini-floats conversions.",2025-08-28T15:22:09Z,2025-09-08T12:51:19Z,2025-09-08T12:20:06Z,2025-09-08T12:20:05Z,True,6,0,2,47,39,1
155852,closed,[clang-tidy][NFC] Add custom .clang-format with 'QualifierAlignment: Left',vbvictor,"[""QualifierAlignment: Left""](https://clang.llvm.org/docs/ClangFormatStyleOptions.html#qualifieralignment) is  an established way of writing code in `clang-tools-extra/clang-tidy`. We should enforce it in CI.

This patch fixes all findings in current files that doesn't align with left-alignment style.",2025-08-28T15:12:41Z,2025-08-29T09:31:10Z,2025-08-29T09:31:05Z,2025-08-29T09:31:05Z,True,2,0,1,36,34,10
155851,closed,[AArch64][SDAG] Add f16 -> i16 rounding NEON conversion intrinsics,mrkajetanp,"Add dedicated .i16.f16 formats for rounding NEON conversion intrinsics in order to avoid issues with incorrect overflow behaviour caused by using .i32.f16 formats to perform the same conversions.

Added intrinsic formats:
i16 @llvm.aarch64.neon.fcvtzs.i16.f16(half)
i16 @llvm.aarch64.neon.fcvtzu.i16.f16(half)
i16 @llvm.aarch64.neon.fcvtas.i16.f16(half)
i16 @llvm.aarch64.neon.fcvtau.i16.f16(half)
i16 @llvm.aarch64.neon.fcvtms.i16.f16(half)
i16 @llvm.aarch64.neon.fcvtmu.i16.f16(half)
i16 @llvm.aarch64.neon.fcvtns.i16.f16(half)
i16 @llvm.aarch64.neon.fcvtnu.i16.f16(half)
i16 @llvm.aarch64.neon.fcvtps.i16.f16(half)
i16 @llvm.aarch64.neon.fcvtpu.i16.f16(half)

Backend side of the solution to https://github.com/llvm/llvm-project/issues/154343",2025-08-28T15:09:56Z,2025-08-31T12:57:47Z,2025-08-31T12:53:55Z,2025-08-31T12:53:55Z,True,4,7,4,294,4,4
155847,closed,[ValueTracking][SelectionDAG] Use KnownBits::reverseBits/byteSwap. NFC,topperc,,2025-08-28T14:56:23Z,2025-08-31T19:15:35Z,2025-08-28T20:26:33Z,2025-08-28T20:26:33Z,True,1,4,1,4,8,2
155845,closed,[RISCV] Use XORI/SLLI/ADDI to when materializing select of constants,preames,"This case is the inverse of the one introduced in #155644.  The complexity with the inversion is that we need to also invert the condition before shifting it.  I had originally planned to only do so when the condition was ""cheaply"" invertible (i.e. didn't require the xori), but when looking more closely at the diffs I noticed that while the XORI prevents this from being an icount improvement, and actually lengthens slightly the critical path, it does still reduce the number of registers needed.

(This still doesn't tackle the merging the code into the non-zicond path - that's still a future change.)",2025-08-28T14:54:04Z,2025-08-28T17:49:53Z,2025-08-28T17:49:47Z,2025-08-28T17:49:47Z,True,1,0,1,40,36,3
155843,closed,[RISCV] Compress shxadd to qc.c.muliadd when rd = rs2,svs-quic,Do this when Zba and Xqciac are both enabled.,2025-08-28T14:25:03Z,2025-09-01T07:04:41Z,2025-09-01T07:04:25Z,2025-09-01T07:04:25Z,True,1,7,4,36,13,3
155848,closed,[Clang][NFC] Rename OMPLoopTransformationDirective to OMPCanonicalLoopNestTransformationDirective,rofirrim,"This is preparatory work for the implementation of `#pragma omp fuse` in https://github.com/llvm/llvm-project/pull/139293

Not all OpenMP loop transformations makes sense to make them inherit from `OMPLoopBasedDirective`, in particular in OpenMP 6.0 'fuse' (to be implemented later) is a transformation of a canonical loop sequence.

This change renames class `OMPLoopTransformationDirective` to `OMPCanonicalLoopNestTransformationDirective` so we can reclaim that name in a later change.

",2025-08-28T14:57:24Z,2025-09-08T08:47:02Z,2025-09-08T08:47:01Z,2025-09-08T08:47:01Z,True,3,0,1,106,82,11
155842,closed,[VPlan] Introduce replaceSymbolicStrides (NFC),artagnon,Introduce VPlanTransforms::replaceSymbolicStrides factoring some code from LoopVectorize.,2025-08-28T14:24:38Z,2025-09-01T09:03:47Z,2025-09-01T09:03:47Z,2025-09-01T09:03:47Z,True,1,1,2,50,35,3
155840,closed,[flang][OpenMP] Reassociate floating-point ATOMIC update expressions,kparzysz,"This is a follow-up to PR153488, this time the reassociation is enabled for floating-point expressions, but only when associative-nath is enabled in the language options. This can be done via -ffast-math on the command line.",2025-08-28T14:21:42Z,2025-08-28T16:19:05Z,2025-08-28T16:18:57Z,2025-08-28T16:18:57Z,True,2,0,1,145,7,3
155850,closed,"Reapply ""[lit] Implement builtin umask (#94621)""",boomanaiden154,"This reverts commit faa4e35c622c13c7a565b979a6676d6cf3040cd4.

This was originally reverted because it was using a Python 3.9 feature (umask in subprocess.Popen) when LLVM only requires Python 3.8. This patch uses os.umask instead, which has been around for longer.",2025-08-28T15:07:09Z,2025-08-30T00:20:16Z,2025-08-29T17:50:42Z,2025-08-29T17:50:42Z,True,7,0,1,66,7,9
155839,closed,Reland: [OpenMP][clang] 6.0: num_threads strict (part 3: codegen),ro-i,"OpenMP 6.0 12.1.2 specifies the behavior of the strict modifier for the
num_threads clause on parallel directives, along with the message and
severity clauses. This commit implements necessary codegen changes.

Note: this is https://github.com/llvm/llvm-project/pull/146405 + the second commit that uses the existing `INTPTR_T_TY` variable for the getelementptr index type instead of i64. This is necessary because the target triple in `clang/test/OpenMP/parallel_num_threads_codegen.cpp` is `%itanium_abi_triple` and thus expands to the target triple of the current machine. Should thus fix https://lab.llvm.org/buildbot/#/builders/154/builds/20818",2025-08-28T14:17:19Z,2025-09-02T17:33:46Z,2025-08-28T19:00:15Z,2025-08-28T19:00:15Z,True,4,2,4,17060,465,29
155834,closed,[VPlan] Improve iterator-related code (NFC),artagnon,,2025-08-28T13:32:45Z,2025-08-28T17:41:22Z,2025-08-28T17:41:18Z,2025-08-28T17:41:17Z,True,2,0,1,5,8,1
155838,closed,"[Dexter] Update Dexter lit substitutions, making lldb-dap the default",SLTozer,"This patch updates Dexter's lit test setup, making lldb-dap the default debugger where available; as part of this, I've replaced references to `--debugger lldb` with new substitutions that provide the debugger and executable path: one substitution returns just lldb for the tests that require it (all the LLDB-using tests in `dexter-tests`), and the other which provides the system-preferred debugger for the tests that should be able to run with any debugger (all the tests in `feature_tests`).

As a small note, one test generates output that differs between lldb and lldb-dap - for this test specifically, we add an lldb-dap feature so that it can be marked XFAIL if we fall back to using LLDB.",2025-08-28T14:08:35Z,2025-08-29T13:28:17Z,2025-08-29T13:28:17Z,2025-08-29T13:28:17Z,True,4,4,5,68,100,40
155837,closed,[clang-format] Fix TableGen nested DAGArg format,hnakamura5,"Fixes https://github.com/llvm/llvm-project/issues/154634. 
Allow inserting space before DAGArg's opener paren when nested.",2025-08-28T14:07:31Z,2025-08-31T07:08:35Z,2025-08-31T07:08:35Z,2025-08-31T07:08:35Z,True,1,3,2,19,1,2
155836,closed,libclc: CMake: include GetClangResourceDir,rjodinchr,`get_clang_resource_dir` is not guarantee to be there. Make sure of it by including `GetClangResourceDir`.,2025-08-28T14:06:20Z,2025-08-28T16:57:47Z,2025-08-28T16:56:33Z,2025-08-28T16:56:33Z,True,2,0,1,1,0,1
155833,closed,[FuncSpec] Invalidate analysis by setting MadeChanges explicitly,XChy,"As reported in https://github.com/llvm/llvm-project/issues/154668#issuecomment-3233294078, we missed invalidating analysis as we don't set the MadeChanges to true after removing dead functions.

This patch makes it explicit to remove the dead functions marked by FuncSpec in SCCP and set MadeChanges correctly.",2025-08-28T13:29:47Z,2025-08-28T17:12:35Z,2025-08-28T17:12:35Z,2025-08-28T17:12:35Z,True,4,0,1,5,2,1
155831,closed,[clang][bytecode] Lazily create DynamicAllocator,tbaederr,"Due to all the tracking via map(s) and a BumpPtrAllocator, the creating and destroying the DynamicAllocator is rather expensive. Try to do it lazily and only create it when first calling
InterpState::getAllocator().",2025-08-28T13:14:35Z,2025-09-02T15:57:18Z,2025-09-02T15:57:18Z,2025-09-02T15:57:18Z,True,2,2,1,15,5,2
155832,closed,[SCEVDivision] Add SCEVDivisionPrinterPass with corresponding tests,kasuga-fj,"This patch introduces `SCEVDivisionPrinterPass` and registers it under the name `print<scev-division>`, primarily for testing purposes. This pass invokes `SCEVDivision::divide` upon encountering `sdiv`, and prints the numerator, denominator, quotient, and remainder. It also adds several test cases, some of which are currently incorrect and require fixing.

Along with that, this patch added some comments to clarify the behavior of `SCEVDivision::divide`, as follows:

- This function does NOT actually perform the division
- Given the `Numerator` and `Denominator`, find a pair `(Quotient, Remainder)` s.t. `Numerator = Quotient * Denominator + Remainder`
- The common condition `Remainder < Denominator` is NOT necessarily required
- There may be multiple solutions for `(Quotient, Remainder)`, and this function finds one of them
  - Especially, there is always a trivial solution `(0, Numerator)`
- The following computations may wrap
  - The multiplication of `Quotient` and `Denominator`
  - The addition of `Quotient * Denominator` and `Remainder`

Related discussion: #154745 ",2025-08-28T13:17:59Z,2025-08-29T12:13:56Z,2025-08-29T10:28:02Z,2025-08-29T10:28:02Z,True,3,16,3,240,2,6
155823,closed,[Offload] Add `OL_DEVICE_INFO_MAX_WORK_SIZE[_PER_DIMENSION]`,RossBrunton,"This is the total number of work items that the device supports (the
equivalent work group properties are for only a single work group).
",2025-08-28T12:03:43Z,2025-08-29T08:39:19Z,2025-08-29T08:39:19Z,2025-08-29T08:39:19Z,True,2,0,1,44,3,6
155826,closed,[ADT] Fix signed integer overflow,WillFroom,"Fixes the signed overflow for signed types > int after #155549, as integer promotion would result in `Val * 37U` being signed which would result in UB signed overflow for large values ",2025-08-28T12:43:53Z,2025-08-28T13:51:38Z,2025-08-28T13:49:18Z,2025-08-28T13:49:18Z,True,2,0,1,2,1,1
155820,closed,AMDGPU: Add tests for atomics with AGPR operands,arsenm,"The handling of AGPR vs. VGPR operand restrictions is
broken and results in bugs like #155777 and missed optimizations.
Add some baseline tests for future improvements.",2025-08-28T11:32:24Z,2025-08-28T13:21:09Z,2025-08-28T13:21:07Z,2025-08-28T13:21:07Z,True,2,4,2,4689,0,5
155830,closed,ADT: Make function_ref constexpr,arsenm,,2025-08-28T13:08:52Z,2025-08-28T14:29:42Z,2025-08-28T14:29:37Z,,False,4,0,1,8,8,1
155816,closed,[libc++] Optimize map::insert_or_assign,philnik777,"`__emplace_unique` uses `__find_equal`, which can be significantly faster than `lower_bound`. As a nice side-effect, this also changes the implementation to the ""naive"" implementation of trying `insert` first, and if that fails assign instead. This also matches the `insert_or_assign` overloads with a hint.

```
Zen 2:
--------------------------------------------------------------------------------------------------------
Benchmark                                                                            old             new
--------------------------------------------------------------------------------------------------------
std::map<int, int>::insert_or_assign(key, value) (already present)/0             1.62 ns         1.53 ns
std::map<int, int>::insert_or_assign(key, value) (already present)/32            5.78 ns         5.99 ns
std::map<int, int>::insert_or_assign(key, value) (already present)/1024          21.5 ns         15.4 ns
std::map<int, int>::insert_or_assign(key, value) (already present)/8192          26.2 ns         20.5 ns
std::map<int, int>::insert_or_assign(key, value) (new value)/0                   22.5 ns         21.1 ns
std::map<int, int>::insert_or_assign(key, value) (new value)/32                  42.9 ns         28.4 ns
std::map<int, int>::insert_or_assign(key, value) (new value)/1024                 118 ns         92.0 ns
std::map<int, int>::insert_or_assign(key, value) (new value)/8192                 227 ns          173 ns
std::map<std::string, int>::insert_or_assign(key, value) (already present)/0     13.2 ns         18.9 ns
std::map<std::string, int>::insert_or_assign(key, value) (already present)/32    65.6 ns         39.0 ns
std::map<std::string, int>::insert_or_assign(key, value) (already present)/1024   127 ns         64.4 ns
std::map<std::string, int>::insert_or_assign(key, value) (already present)/8192   134 ns         71.4 ns
std::map<std::string, int>::insert_or_assign(key, value) (new value)/0           45.6 ns         37.3 ns
std::map<std::string, int>::insert_or_assign(key, value) (new value)/32           142 ns         93.3 ns
std::map<std::string, int>::insert_or_assign(key, value) (new value)/1024         288 ns          147 ns
std::map<std::string, int>::insert_or_assign(key, value) (new value)/8192         368 ns          182 ns

Apple M4:
--------------------------------------------------------------------------------------------------------
Benchmark                                                                              old           new
--------------------------------------------------------------------------------------------------------
std::map<int, int>::insert_or_assign(key, value) (already present)/0              0.784 ns      0.740 ns
std::map<int, int>::insert_or_assign(key, value) (already present)/32              2.52 ns       1.77 ns
std::map<int, int>::insert_or_assign(key, value) (already present)/1024            8.72 ns       4.06 ns
std::map<int, int>::insert_or_assign(key, value) (already present)/8192            10.6 ns       3.98 ns
std::map<int, int>::insert_or_assign(key, value) (new value)/0                     17.3 ns       17.2 ns
std::map<int, int>::insert_or_assign(key, value) (new value)/32                    22.5 ns       19.3 ns
std::map<int, int>::insert_or_assign(key, value) (new value)/1024                  56.8 ns       33.5 ns
std::map<int, int>::insert_or_assign(key, value) (new value)/8192                  88.2 ns       41.0 ns
std::map<std::string, int>::insert_or_assign(key, value) (already present)/0       16.6 ns       11.8 ns
std::map<std::string, int>::insert_or_assign(key, value) (already present)/32      13.7 ns       30.7 ns
std::map<std::string, int>::insert_or_assign(key, value) (already present)/1024    46.7 ns       49.1 ns
std::map<std::string, int>::insert_or_assign(key, value) (already present)/8192    41.9 ns       76.9 ns
std::map<std::string, int>::insert_or_assign(key, value) (new value)/0             40.0 ns       40.5 ns
std::map<std::string, int>::insert_or_assign(key, value) (new value)/32            38.9 ns       40.0 ns
std::map<std::string, int>::insert_or_assign(key, value) (new value)/1024          84.9 ns       96.9 ns
std::map<std::string, int>::insert_or_assign(key, value) (new value)/8192           166 ns        149 ns
```",2025-08-28T11:00:46Z,2025-09-04T14:28:09Z,2025-08-29T16:48:11Z,2025-08-29T16:48:11Z,True,1,1,1,54,12,3
155819,closed,[RISCV] Use QC_E_LI to materialise addresses,svs-quic,"This is only used in the small code model and when `Xqcili` is enabled, where addresses would otherwise use `LUI/ADDI`. Other code models need to use pc-relative addressing. This patch does this for global/block addresses, constant pools and jumptables.

Overall, this gives a better code size saving as` QC.E.LI` is easier to relax to `QC.LI/LI` etc than` LUI/ADDI` (especially when the `LUI/ADDI` might have sharing, or be split apart). `QC.E.LI` has the `RISCV_QC_E_32` local relocation attached to it.",2025-08-28T11:26:24Z,2025-09-05T07:28:33Z,2025-09-05T07:28:29Z,2025-09-05T07:28:29Z,True,5,2,6,401,1,5
155815,closed,AMDGPU: Add missing verifier tests for load/store AGPR case,arsenm,,2025-08-28T10:44:49Z,2025-08-28T12:23:28Z,2025-08-28T12:23:26Z,2025-08-28T12:23:26Z,True,2,0,1,92,0,1
155813,closed,[lldb][test] Run ranges::ref_vew test only for libc++,da-viper,"Remove redundant build step in std::ranges::ref_view test, this causes it use `libstdc++` on linux instead of `libc++` .",2025-08-28T10:23:27Z,2025-08-28T11:14:07Z,2025-08-28T11:14:07Z,2025-08-28T11:14:07Z,True,1,0,1,0,1,1
155811,closed,[lldb] Add lldbHost dependency to lldbProtocolMCP,nikic,"Fixes linker error:

```
/usr/bin/ld: /tmp/lto-llvm-013f16.o: in function `lldb_private::JSONTransport<lldb_protocol::mcp::Request, lldb_protocol::mcp::Response, lldb_protocol::mcp::Notification>::OnRead(lldb_private::MainLoopBase&, lldb_private::Transport<lldb_protocol::mcp::Request, lldb_protocol::mcp::Response, lldb_protocol::mcp::Notification>::MessageHandler&)':
/usr/bin/../lib/gcc/x86_64-redhat-linux/15/../../../../include/c++/15/bits/unique_ptr.h:1085:(.text._ZN12lldb_private13JSONTransportIN13lldb_protocol3mcp7RequestENS2_8ResponseENS2_12NotificationEE6OnReadERNS_12MainLoopBaseERNS_9TransportIS3_S4_S5_E14MessageHandlerE+0x7fc): undefined reference to `lldb_private::TransportUnhandledContentsError::TransportUnhandledContentsError(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'
```",2025-08-28T10:17:01Z,2025-08-28T18:42:22Z,2025-08-28T18:42:20Z,2025-08-28T18:42:20Z,True,1,0,1,1,0,1
155809,closed,"Revert ""[OpenMP][clang] 6.0: num_threads strict (part 3: codegen)""",ro-i,"Reverts llvm/llvm-project#146405

Reverting for further investigation due to getelementptr index size mismatch on ARM buildbot:
```
/home/tcwg-buildbot/worker/clang-armv8-quick/llvm/clang/test/OpenMP/parallel_num_threads_codegen.cpp:86:11: error: OMP60: expected string not found in input
// OMP60: [[ARRDECAY:%.+]] = getelementptr inbounds [4 x i8], ptr [[STR:%.+]], i64 0, i64 0
          ^
<stdin>:55:51: note: scanning from here
 call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @1, i32 0, ptr @main.omp_outlined.1)
                                                  ^
<stdin>:58:8: note: possible intended match here
 %arraydecay = getelementptr inbounds [4 x i8], ptr %str, i32 0, i32 0
       ^

Input file: <stdin>
Check file: /home/tcwg-buildbot/worker/clang-armv8-quick/llvm/clang/test/OpenMP/parallel_num_threads_codegen.cpp

-dump-input=help explains the following input dump.

Input was:
<<<<<<
            .
            .
            .
           50:  call void @__kmpc_push_num_threads(ptr @1, i32 %0, i32 2)
           51:  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @1, i32 0, ptr @main.omp_outlined)
           52:  %1 = load i8, ptr %a, align 1
           53:  %2 = sext i8 %1 to i32
           54:  call void @__kmpc_push_num_threads(ptr @1, i32 %0, i32 %2)
           55:  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr @1, i32 0, ptr @main.omp_outlined.1)
check:86'0                                                       X~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ error: no match found
           56:  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %str, ptr align 1 @__const.main.str, i32 4, i1 false)
check:86'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           57:  store ptr @.str, ptr %str1, align 4
check:86'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           58:  %arraydecay = getelementptr inbounds [4 x i8], ptr %str, i32 0, i32 0
check:86'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
check:86'1            ?                                                                possible intended match
...
```",2025-08-28T10:12:16Z,2025-08-28T10:12:55Z,2025-08-28T10:12:53Z,2025-08-28T10:12:53Z,True,1,0,1,463,17061,30
155804,closed,[NVPTX] Add max/minimumnum to ISel,LewisCrawford,"Add direct support for the LLVM `maximumnum` and `minimumnum` intrinsics, rather than lowering them to a sequence of compare + select instructions.

The `maximumnum` and `minimumnum` intrinsics map directly to PTX `max`/`min` instructions.

In future, the LLVM `maxnum`/`minnum` intrinsics might need some fix-ups for sNaN handling added, but currently, both `llvm.maxnum` and `llvm.maximumnum` will map directly to PTX `max` instructions.",2025-08-28T09:47:26Z,2025-08-29T19:59:56Z,2025-08-29T09:32:08Z,2025-08-29T09:32:08Z,True,2,8,3,426,4,3
155803,closed,[clang] Optimize EmbedExpr child iterator callback,tbaederr,"Instead of querying the bitwidth and signeness of the integer literal for every iteration, get the bitwidth directly from the `APIntStorage` and assume the signeness to be `true` since we set the type of the `EmbedExpr` to `Ctx.IntTy` and the type of the integer literal to that of the `EmbedExpr`, so it should always be signed, as long as `ASTContext::IntTy` is signed.

Before:
```
$ hyperfine -r 50 -w 3 'bin/clang -c ../../benchmarks/embed.cpp -std=c++20 -fconstexpr-steps=1000000000'
Benchmark 1: bin/clang -c ../../benchmarks/embed.cpp -std=c++20 -fconstexpr-steps=1000000000
  Time (mean ± σ):      1.796 s ±  0.090 s    [User: 0.961 s, System: 0.834 s]
  Range (min … max):    1.640 s …  2.150 s    50 runs
```
After:
```
$ hyperfine -r 50 -w 3 'bin/clang -c ../../benchmarks/embed.cpp -std=c++20 -fconstexpr-steps=1000000000'
Benchmark 1: bin/clang -c ../../benchmarks/embed.cpp -std=c++20 -fconstexpr-steps=1000000000
  Time (mean ± σ):      1.700 s ±  0.050 s    [User: 0.909 s, System: 0.789 s]
  Range (min … max):    1.637 s …  1.880 s    50 runs
```

That is roughly .1s less, or whatever, 5% or something.

The benchmark is simply:
```c++
constexpr char str[] = {
#embed ""sqlite3.c"" suffix(,0)
};

constexpr char str2[] = {
#embed ""sqlite3.c"" suffix(,0)
};

constexpr char str3[] = {
#embed ""sqlite3.c"" suffix(,0)
};
```
where `sqlite3.c` contains the sqlite3 amalgamation (roughly 9 million characters).

",2025-08-28T09:46:40Z,2025-08-28T14:46:10Z,2025-08-28T14:46:10Z,2025-08-28T14:46:10Z,True,1,0,1,6,4,4
155801,closed,[mlir][nvgpu] Move dependent dialect from C++ to TableGen for nvgpu-to-nvvm pass (NFC),linuxlonelyeagle,Removed the getDependentDialects function from the convert-nvgpu-to-nvvm pass and instead use TableGen to define dependent dialects.,2025-08-28T09:30:42Z,2025-08-29T00:49:33Z,2025-08-29T00:49:33Z,2025-08-29T00:49:33Z,True,3,8,2,4,6,2
155793,closed,[Sema] Allow zero-size allocations for -Walloc-size,vvuksanovic,"Allocations of size zero are usually done intentionally and then reallocated before use.

Fixes #155633",2025-08-28T08:59:07Z,2025-09-02T15:18:56Z,2025-09-02T15:18:56Z,2025-09-02T15:18:56Z,True,8,0,1,14,24,8
155792,closed,[llvm] Proofread Benchmarking.rst,kazutakahirata,,2025-08-28T08:53:37Z,2025-08-28T14:44:36Z,2025-08-28T14:44:24Z,2025-08-28T14:44:24Z,True,0,0,1,10,10,1
155791,closed,[AVR] Remove unnecessary casts (NFC),kazutakahirata,"getSubtargetImpl() already returns const AVRSubtarget *.
",2025-08-28T08:53:14Z,2025-08-28T14:44:30Z,2025-08-28T14:44:16Z,2025-08-28T14:44:16Z,True,0,0,1,2,2,1
155789,closed,[ADT] Define SetVector::count in terms of SetVector::contains (NFC),kazutakahirata,"We can avoid repeating the same code in count by delegating to
contains.

While I am at it, this patch adds [[nodiscard] to contains and count.
",2025-08-28T08:52:30Z,2025-08-28T14:44:11Z,2025-08-28T14:44:00Z,2025-08-28T14:44:00Z,True,1,0,1,3,7,1
155790,closed,"[ADT] ""Inline"" TestAndEraseFromSet into SetVector::remove_if (NFC)",kazutakahirata,"TestAndEraseFromSet is used only from SetVector::remove_if.  This
patch ""inlines"" the struct into its sole user in the form of a lambda
function.

FWIW, ""git blame"" shows that TestAndEraseFromSet dates back to 2012.
Most likely, the lambda function wasn't an option yet back then.
",2025-08-28T08:52:48Z,2025-08-28T14:44:24Z,2025-08-28T14:44:08Z,2025-08-28T14:44:08Z,True,1,0,1,7,25,1
155788,closed,[ADT] Teach SmallSetVector to inherit constructors (NFC),kazutakahirata,"This patch teaches SmallSetVector to inherit constructors from the
base class with ""using"".  This way, we can remove all of the manually
defined constructors in SmallSetVector.
",2025-08-28T08:52:13Z,2025-08-28T14:44:01Z,2025-08-28T14:43:52Z,2025-08-28T14:43:52Z,True,1,0,1,1,11,1
155784,closed,MC: Fix NOP insertion between fused instructions that breaks macro fusion,aleks-tmb,"In the https://github.com/llvm/llvm-project/commit/39c8cfb70d203439e3296dfdfe3d41f1cb2ec551 patch, getOrCreateDataFragment was optimized by eagerly allocating an empty fragment when adding a fragment with a variable-size tail. This means that in this case the current MC fragment is no longer the one where the instruction was inserted, and the check
`PendingBA && PendingBA->getNext() == OS.getCurrentFragment()` fails, since CurrentFragment is now the empty fragment instead of the fragment containing the instruction.

`PendingBA -> Fragment with a variable-size tail (contains previous instruction) -> CurrentFragment (newly allocated empty fragment)`

This breaks the macro-fusion logic because it incorrectly assumes another fragment has been inserted between the fused instructions.

Fixes https://github.com/llvm/llvm-project/issues/155045

#155316 Reland",2025-08-28T08:17:51Z,2025-08-28T09:03:41Z,2025-08-28T09:03:41Z,2025-08-28T09:03:41Z,True,2,0,1,29,2,2
155786,closed,[libc++] Disable cv-qualified arithmetic hash specializations,philnik777,"#140407 accidentally enabled `hash` for cv-qualified types. This patch disables these specializations again.
",2025-08-28T08:38:11Z,2025-08-29T16:20:04Z,2025-08-29T16:13:26Z,2025-08-29T16:13:26Z,True,4,0,1,67,4,7
155782,closed,[clang][bytecode][NFC] Clean up EvaluationResult,tbaederr,"Remove incorrect comments, unused includes, an unused function and make the Ctx member debug-build-only.",2025-08-28T08:14:58Z,2025-08-28T08:53:40Z,2025-08-28T08:53:40Z,2025-08-28T08:53:40Z,True,1,0,1,13,13,2
155785,closed,[Offload][OpenMP] Tests require libc on GPU for printf,jplehr,These tests currently fail when libc is not configured to be built as they require printf to be available in target regions.,2025-08-28T08:27:11Z,2025-08-28T12:30:22Z,2025-08-28T12:30:18Z,2025-08-28T12:30:18Z,True,1,0,2,12,0,6
155781,closed,Be smarter about the GLIBCXX_USE_CXX11_ABI default,serge-sans-paille,"It appears that unconditionally using GLIBCXX_USE_CXX11_ABI=0 is slow on modern libstdc++, while using GLIBCXX_USE_CXX11_ABI=1 breaks old buildbots, so use the compiler default unless asked to do differently.",2025-08-28T08:14:18Z,2025-08-30T07:04:46Z,2025-08-30T06:45:55Z,2025-08-30T06:45:55Z,True,1,0,1,9,1,1
155780,closed,"Revert ""[X86] Fix incorrect NOP insertion between fused instructions that breaks macro fusion""",aleks-tmb,Reverts llvm/llvm-project#155316,2025-08-28T08:12:56Z,2025-08-28T08:13:32Z,2025-08-28T08:13:22Z,2025-08-28T08:13:22Z,True,1,0,1,2,29,2
155779,closed,[AMDGPU][NFC] Reduce diff between downstream branch,mariusz-sikora-at-amd,,2025-08-28T08:00:18Z,2025-08-28T09:06:44Z,2025-08-28T09:06:37Z,2025-08-28T09:06:37Z,True,1,0,1,22,22,4
155775,closed,[X86] Fix assertion in AVX512 setcc combine due to invalid APInt mask width,abhishek-kaushik22,"The AVX512 setcc combine in X86ISelLowering was calling `APInt::getLowBitsSet` with a mask width (`Len`) that could exceed the bit width of the broadcasted scalar operand (`BroadcastOpVT.getSizeInBits()`), leading to assertion failures.

This patch replaces `Len` with the number of defined (non-undef) elements in the constant pool vector.

This ensures the generated mask is valid and avoids crashes when the constant pool contains more elements than the scalar bit width can represent.

Fixes #155762",2025-08-28T07:49:30Z,2025-08-28T14:20:56Z,2025-08-28T14:20:47Z,2025-08-28T14:20:47Z,True,1,2,2,58,1,2
155773,closed,[clang-format] Correctly annotate RequiresExpressionLBrace,owenca,Fixes #155746,2025-08-28T07:42:20Z,2025-08-28T14:40:44Z,2025-08-28T14:40:43Z,2025-08-28T14:40:43Z,True,1,0,1,9,1,2
155774,closed,AArch64: Replace @plt/%gotpcrel in data directives with %pltpcrel %gotpcrel,MaskRay,"Similar to #132569 for RISC-V, replace the unofficial `@plt` and
`@gotpcrel` relocation specifiers, currently only used by clang
-fexperimental-relative-c++-abi-vtables, with %pltpcrel %gotpcrel. The
syntax is not used in humand-written assembly code, and is not supported
by GNU assembler.
",2025-08-28T07:47:18Z,2025-08-28T07:51:51Z,2025-08-28T07:51:51Z,,False,1,0,1,103,43,7
155772,closed,[clang][bytecode] Simplify and optimize EvaluationResult,tbaederr,Remove support for saving a `Pointer` in the `EvaluationResult` since that was unused. Add `stealAPValue()` which moves the `APValue` out of the `EvaluationResult` to avoid a copy at the end of the evaluation.,2025-08-28T07:34:32Z,2025-08-28T08:28:53Z,2025-08-28T08:06:04Z,2025-08-28T08:06:04Z,True,2,0,1,22,81,4
155771,closed,Disassembler: Remove unused include,arsenm,,2025-08-28T07:18:51Z,2025-08-28T14:47:00Z,2025-08-28T14:46:58Z,2025-08-28T14:46:58Z,True,1,0,1,0,1,1
155768,closed,compiler-rt: Use OpenBSD's elf_aux_info to detect AArch64 HW features,brad0,,2025-08-28T06:57:30Z,2025-08-28T17:58:52Z,2025-08-28T17:58:47Z,2025-08-28T17:58:47Z,True,0,0,1,2,2,1
155765,closed,AMDGPU: Add tests for ds_write2 formation with agprs,arsenm,"The current handling for write2 formation is overly conservative
and cannot form write2s with AGPR inputs.",2025-08-28T06:45:13Z,2025-09-03T01:27:19Z,2025-09-03T01:27:18Z,2025-09-03T01:27:18Z,True,2,0,3,1110,0,1
155761,closed,[clang][bytecode][NFC] Remove FunctionPointer leftovers,tbaederr,from EvaluationResult. `setFunctionPointer()` is unused.,2025-08-28T06:28:02Z,2025-08-28T06:53:46Z,2025-08-28T06:53:46Z,2025-08-28T06:53:46Z,True,1,0,1,1,13,3
155756,closed,[clang][bytecode] Speed up `EvaluationResult::CheckArrayInitialized()`,tbaederr,"For large primitive arrays, avoid creating a new `Pointer` for every element (via `Pointer::isElementInitialized()`) or avoid iterating over the array altogether (via `Pointer::allElementsInitialized()`).",2025-08-28T05:45:02Z,2025-08-28T20:29:05Z,2025-08-28T07:14:23Z,2025-08-28T07:14:22Z,True,1,2,1,70,20,3
155763,closed,Add pointer auth documentation to contents,ojhunt,,2025-08-28T06:40:01Z,2025-08-29T01:04:08Z,2025-08-28T21:02:37Z,2025-08-28T21:02:37Z,True,9,0,1,1,0,1
155754,closed,[NFC][flang][OpenMP] Extract target region utils to map or clone outside values,ergawy,"Following up on #154483, this PR introduces further refactoring to extract some shared utils between OpenMP lowering and `do concurrent` conversion pass. In particular, this PR extracts 2 utils that handle mapping or cloning values used inside target regions but defined outside.

Later `do concurrent` PR(s) will also use these utils.

PR stack:
- https://github.com/llvm/llvm-project/pull/155754 ◀️
- https://github.com/llvm/llvm-project/pull/155987
- https://github.com/llvm/llvm-project/pull/155992
- https://github.com/llvm/llvm-project/pull/155993
- https://github.com/llvm/llvm-project/pull/157638
- https://github.com/llvm/llvm-project/pull/156610
- https://github.com/llvm/llvm-project/pull/156837",2025-08-28T05:30:52Z,2025-09-09T10:34:19Z,2025-09-08T12:33:00Z,2025-09-08T12:33:00Z,True,2,4,2,153,100,4
155757,closed,[clang][bytecode] Avoid copying APValue into EvaluationResult,tbaederr,"Move the `APValue` into `EvaluationResult` instead.

For a large primitive array (`#embed` of the sqlite3 amalgamation), this improves compile times by around 25%.",2025-08-28T06:04:06Z,2025-08-28T06:46:06Z,2025-08-28T06:46:06Z,2025-08-28T06:46:06Z,True,1,0,1,7,7,2
155767,closed,AMDGPU: Add debug print to load/store opt for agpr case,arsenm,,2025-08-28T06:50:04Z,2025-08-29T02:49:04Z,2025-08-29T02:49:02Z,2025-08-29T02:49:02Z,True,2,0,1,3,0,1
155753,closed,[SCCP][FuncSpec] Poison unreachable constant global variable user,XChy,"Fixes #155738.
The original assumption ""we already replaced its users with a constant"" for the global variable becomes incorrect after #154668. The users in the dead function are not simplified, in fact.
This patch poisons all the unsimplified constant global variable users.",2025-08-28T05:25:22Z,2025-08-28T11:13:28Z,2025-08-28T11:13:28Z,2025-08-28T11:13:27Z,True,1,0,2,37,3,2
155751,closed,[KnownBits] Add operator<<=(unsigned) and operator>>=(unsigned). NFC,topperc,Add operators to shift left or right and insert unknown bits.,2025-08-28T05:13:13Z,2025-08-28T17:08:32Z,2025-08-28T17:08:28Z,2025-08-28T17:08:28Z,True,2,3,1,40,45,7
155748,closed,[msan] Fix multiply-add-accumulate (#153927) to use ReductionFactor,thurstond,"https://github.com/llvm/llvm-project/pull/153927 incorrectly cast using a hardcoded reduction factor of two, rather than using the parameter.

This caused false negatives but not false positives. (The only incorrect case was a reduction factor of four; if four values {A,B,C,D} are being reduced, the result is fully zero iff {A,B} and {C,D} are both zero after pairwise reduction. If only one of those reduced pairs is zero, then the quadwise reduction is non-zero.)",2025-08-28T04:59:53Z,2025-09-02T17:16:57Z,2025-09-02T17:16:57Z,2025-09-02T17:16:57Z,True,2,0,1,171,279,9
155743,closed,[LV]: consider scalable VF during deciding dead epilogue.,hassnaaHamdi,"- Consider scalable VF during calculating remaining iterations out of MainLoop.
- Consider epilogue scalable VF during deciding if remaining iterations less than the epilogue VF.
",2025-08-28T03:39:50Z,2025-09-03T17:45:58Z,2025-09-03T17:45:58Z,,False,0,0,1,38,206,4
155747,closed,"[RISC-V] Added the mips extension instructions like ehb,ihb and pause etc for MIPS RV64 P8700.",ukalappa-mips,"Please refer the https://mips.com/wp-content/uploads/2025/06/P8700_Programmers_Reference_Manual_Rev1.84_5-31-2025.pdf for more information .

and files like RISCVInstrInfoXMips.td clang formatted .

No Regression found.",2025-08-28T04:56:10Z,2025-09-01T08:40:28Z,2025-09-01T08:40:28Z,2025-09-01T08:40:28Z,True,2,16,10,72,18,9
155750,closed,[Uniformity] Fix typo in assumed divergent cycles output (NFC),perlfu,,2025-08-28T05:05:50Z,2025-08-28T05:49:33Z,2025-08-28T05:49:33Z,2025-08-28T05:49:33Z,True,1,0,1,24,24,13
155742,closed,[flang] Attach proper storage to [hl]fir.declare in lowering.,vzakhari,"As described in https://discourse.llvm.org/t/rfc-flang-representation-for-objects-inside-physical-storage/88026,
`[hl]fir.declare` should carry information about the layout
of COMMON/EQUIVALENCE variables within the physical storage.

This patch modifes Flang lowering to attach this information.
",2025-08-28T03:33:31Z,2025-09-04T22:49:12Z,2025-09-04T22:49:12Z,2025-09-04T22:49:12Z,True,1,2,2,555,280,40
155749,closed,[builtins] Rename freebsd to elf_aux_info to reflect the function called. NFCI,brad0,,2025-08-28T05:05:11Z,2025-08-28T06:50:03Z,2025-08-28T06:50:00Z,2025-08-28T06:50:00Z,True,1,0,1,2,2,3
155741,closed,[MLIR][Python] enable type stub auto-generation,makslevental,This PR turns on automatic type stub generation (rather than relying on hand-written/updated stubs). It uses nanobind's [stubgen facility](https://nanobind.readthedocs.io/en/latest/typing.html#stub-generation). If you would like to enable this functionality you can add `GENERATE_TYPE_STUBS` to `declare_mlir_python_extension` .,2025-08-28T03:30:13Z,2025-09-09T16:05:02Z,2025-09-05T16:38:00Z,2025-09-05T16:38:00Z,True,11,3,16,128,3186,13
155740,closed,"[IR][CodeGen] Remove ""approx-func-fp-math"" attribute",paperchalice,"Remove ""approx-func-fp-math"" attribute and related command line option, users should always use afn flag in IR.
Resolve FIXME in `TargetMachine::resetTargetOptions` partially.",2025-08-28T03:26:44Z,2025-08-29T02:41:29Z,2025-08-29T01:52:07Z,2025-08-29T01:52:07Z,True,2,0,6,7,85,19
155734,closed,[SimplifyCFG] Probabilities associated with same condition are constant,mtrofin,"The branch weights capture probability. The probability has everything to do with the (SSA) value the condition is predicated on, and nothing to do with the position in the CFG.",2025-08-28T01:16:07Z,2025-09-04T21:44:56Z,2025-09-04T21:37:35Z,2025-09-04T21:37:35Z,True,4,4,1,35,47,2
155737,closed,[clang][bytecode] Handle negative array sizes in constexpr `new` instead of asserting,snarang181,"This patch fixes a crash in the constexpr interpreter when evaluating `new T[n]` with a negative element count.

Fixes https://github.com/llvm/llvm-project/issues/152904 ",2025-08-28T02:48:05Z,2025-08-29T12:28:41Z,2025-08-29T12:28:41Z,2025-08-29T12:28:41Z,True,1,16,8,31,1,2
155739,closed,[LV] Align legacy cost model to vplan-based model for gather/scatter w/ uniform addr.,ElvisWang123,"This patch check if the addr is uniform in legacy cost model to align vplan-based cost model after #150371.

This patch fixes llvm-test-suite assertion (https://lab.llvm.org/buildbot/#/builders/210/builds/1935) due to cost model misaligned after #149955 under RISCV.

I've tested this patch (on top of #149955) on the llvm-test-suite locally with crashed options `rva23u64`, `rva23u64_zvl1024b` and build successfully.

Since this fix will change LV, I think would be better to create a PR to fix this.",2025-08-28T03:15:18Z,2025-09-02T01:11:49Z,2025-09-02T01:11:45Z,2025-09-02T01:11:45Z,True,2,27,6,191,2,2
155733,closed,[lldb][debugserver] Upstream to debugserver changes,jasonmolenda,"Review of diffs from lldb's internal debugserver and llvm.org main found two orphaned changes that should be upstreamed.

First is in MachTask::ExceptionThread where we want to confirm that a mach exception messages is from the correct process before we process it.

Second is that we want to run the arm64 register context through thread_convert_thread_state() after thread_get_state, and before thread_set_state, to re-sign fp/sp/lr/pc appropriately for ptrauth (arm64e) processes.",2025-08-28T01:01:29Z,2025-08-28T17:06:52Z,2025-08-28T17:06:46Z,2025-08-28T17:06:46Z,True,1,3,2,72,20,2
155732,closed,[libc][NFC] Fix Implicit Conversion Warning in getrandom Test,boomanaiden154,"getrandom returns a ssize_t, but the error codes are defined as integers. We need to use the builtin cast in the Fails matcher to ensure that everything is the same type.

clang will warn about this in a bootstrapping build. Originally found in \#155627.",2025-08-28T00:56:32Z,2025-08-28T03:58:27Z,2025-08-28T03:58:24Z,2025-08-28T03:58:24Z,True,1,0,1,3,2,1
155730,closed,[CI] Handle Runtime Build Failures Correctly in generate_test_report,boomanaiden154,The nested ninja invocations currently confuse the script. Update  the script to handle this correctly and a test to ensure we do not regress this behavior in the future.,2025-08-28T00:25:51Z,2025-08-28T15:02:10Z,2025-08-28T15:02:09Z,2025-08-28T15:02:09Z,True,0,3,3,40,0,2
155731,closed,Add WarnOnModificationOfCopiedLoopVariable to performance-for-range-c…,flowerhack,"…opy.

Adds an option to performance-for-range-copy that alerts when a loop variable is copied and modified.

This is a bugprone pattern because the programmer in this case often assumes they are modifying the original value instead of a copy.

The warning can be suppressed by instead explicitly copying the value inside the body of the loop.",2025-08-28T00:53:52Z,2025-08-28T21:20:43Z,2025-08-28T21:20:43Z,,False,5,1,1,99,2,4
155729,closed,[mlir][spirv] Add pattern matching for arith.index_cast i1 to index for ArithToSPIRV,ianayl,"Currently, `arith.index_cast` gets converted to `OpSConvert`: https://github.com/llvm/llvm-project/blob/9bf5bf3baf3c7aec82cdd235c6a2fd57b4dd55ab/mlir/lib/Conversion/ArithToSPIRV/ArithToSPIRV.cpp#L1331 [OpSConvert requires its operands to be of integer type](https://registry.khronos.org/SPIR-V/specs/unified1/SPIRV.html#OpSConvert), which poses an issue for `i1` since SPIRV distinguishes between booleans and integers. As a result, the following example doesn't get converted, leaving behind illegal ops:
```
%0 = arith.index_cast %arg0 : i1 to index
```
This PR adds additional logic to convert `arith.index_casts` to SPIRV dialect when casting from `i1` to `index`. Converting `index_cast`s from `index` to `i1` is a part of https://github.com/llvm/llvm-project/pull/156031.",2025-08-28T00:02:51Z,2025-09-03T18:04:56Z,2025-09-03T18:04:35Z,2025-09-03T18:04:35Z,True,6,7,11,55,2,2
155728,closed,[flang][runtime][NFC] Clean up Fortran::common::optional<> usage,klausler,"When somebody replaced uses of std::optional<> in the runtime with a new optional<> defined locally, many needless top-level Fortran:: namespace qualifiers were added, which are inconsistent with namespace usage in the runtime.  Clean them up.",2025-08-27T23:55:04Z,2025-08-29T15:06:05Z,2025-08-29T15:06:02Z,2025-08-29T15:06:02Z,True,0,0,1,171,184,26
155727,closed,[libc][gpu] Add exp/log benchmarks and flexible input generation,leandrolcampos,"This patch adds GPU benchmarks for the exp (`exp`, `expf`, `expf16`) and log (`log`, `logf`, `logf16`) families of math functions. 

Adding these benchmarks revealed a key limitation in the existing framework: the input generation mechanism was hardcoded to a single strategy that sampled numbers with a uniform distribution of their unbiased exponents.

While this strategy is effective for values spanning multiple orders of magnitude, it is not suitable for linear ranges. The previous framework lacked the flexibility to support this.

### Summary of Changes

**1. Framework Refactoring for Flexible Input Sampling:**
The GPU benchmark framework was refactored to support multiple, pluggable input sampling strategies.

* **`Random.h`:** A new header was created to house the `RandomGenerator` and the new distribution classes.
* **Distribution Classes:** Two sampling strategies were implemented:
    * `UniformExponent`: Formalizes the previous logic of sampling numbers with a uniform distribution of their unbiased exponents. It can now also be configured to produce only positive values, which is essential for functions like `log`.
    * `UniformLinear`: A new strategy that samples numbers from a uniform distribution over a linear interval `[min, max)`.
* **`MathPerf` Update:** The `MathPerf` class was updated with a generic `run_throughput` method that is templated on a distribution object. This makes the framework extensible to future sampling strategies.

**2. New Benchmarks for `exp` and `log`:**
Using the newly refactored framework, benchmarks were added for `exp`, `expf`, `expf16`, `log`, `logf`, and `logf16`. The test intervals were carefully chosen to measure the performance of distinct behavioral regions of each function.",2025-08-27T23:54:05Z,2025-08-28T02:05:10Z,2025-08-28T02:05:10Z,2025-08-28T02:05:10Z,True,2,0,1,744,114,13
155726,closed,[MLIR] Refix pr154556,silee2,Adding missing MLIRSCFTransforms,2025-08-27T23:53:13Z,2025-08-28T00:02:54Z,2025-08-28T00:02:54Z,2025-08-28T00:02:54Z,True,1,0,5,1,0,1
155724,closed,"clang/AMDGPU: Add __builtin_amdgcn_inverse_ballot_w{32,64}",nhaehnle,"Add builtins that expose the underlying llvm.amdgcn.inverse.ballot intrinsic that we've had for a while.

This allows more explicitly writing code that selects or branches in terms of lane masks, which can lead to better code quality.",2025-08-27T23:45:49Z,2025-08-28T02:40:11Z,2025-08-28T02:40:03Z,2025-08-28T02:40:03Z,True,3,0,1,41,0,5
155725,closed,AMDGPU: llvm.amdgcn.inverse.ballot needs to be convergent,nhaehnle,It is only defined for uniform inputs (instruction selection inserts v_readfirstlane as necessary).,2025-08-27T23:52:48Z,2025-08-28T02:40:31Z,2025-08-28T02:40:27Z,2025-08-28T02:40:27Z,True,1,0,1,6,2,2
155723,closed,[orc-rt] std::forward unbound arguments when using bind_front.,lhames,"The call operator for the type returned by bind_front should forward its arguments, rather than moving them. This ensures that we handle lvalue references in unbound args correctly:

  auto B = bind_front([](int &) {});
  int N = 7;
  B(N); // <- no longer an error!",2025-08-27T23:43:46Z,2025-08-27T23:54:41Z,2025-08-27T23:54:37Z,2025-08-27T23:54:37Z,True,0,0,1,7,1,2
155722,closed,[MLIR] Add missing dependency for PR154556.,silee2,Add missing dependency MLIRSCFDialect from #154556,2025-08-27T23:41:08Z,2025-08-27T23:50:37Z,2025-08-27T23:50:27Z,2025-08-27T23:50:27Z,True,3,2,2,1,0,1
155721,closed,[CIR] Add support for emitting VTTs and related ojects,andykaylor,This adds support for emitting virtual table tables (VTTs) and construction vtables.,2025-08-27T23:32:12Z,2025-09-02T16:22:09Z,2025-09-02T16:22:05Z,2025-09-02T16:22:05Z,True,1,2,1,333,25,6
155718,closed,release/21.x: [compiler-rt] Remove leftovers of FreeBSD md5/sha2 interceptors (#153351),llvmbot,"Backport 5abec20b25be01866b1c6f75f6f45426d2b4f87b

Requested by: @alexrp",2025-08-27T23:26:09Z,2025-09-09T08:27:37Z,2025-09-09T08:26:55Z,2025-09-09T08:26:55Z,True,6,0,1,0,38,2
155720,closed,[lldb] Correct a usage after a rename was merged.,ashgti,"Fixes lldb-mcp, aa71d95 was merged after 71a065e.",2025-08-27T23:31:46Z,2025-08-27T23:49:31Z,2025-08-27T23:37:45Z,2025-08-27T23:37:45Z,True,3,0,1,1,1,1
155717,closed,release/21.x: [compiler-rt] Avoid depending on the libnvmm header for NetBSD (#153534),llvmbot,"Backport 9ec771bd4a16198cec04b4b9c30c22ee89140a2d

Requested by: @alexrp",2025-08-27T23:25:54Z,2025-09-08T07:33:28Z,2025-09-08T07:32:52Z,2025-09-08T07:32:52Z,True,3,0,1,1,2,1
155716,closed,[orc-rt] Allow move_only_function to capture by lvalue-reference.,lhames,"Store std::decay_t<Callable> to ensure that we can initialize via lvalue references:

  auto NamedNoop = [](){};
   move_only_function<void()> Noop(NamedNoop); // <- no longer an error!",2025-08-27T23:20:00Z,2025-08-27T23:31:06Z,2025-08-27T23:31:03Z,2025-08-27T23:31:03Z,True,0,0,1,7,1,2
155715,closed,"[flang][runtime] Handle ALLOCATE(..., short SOURCE=)",klausler,"Ensure that blank padding takes place when a fixed-length character allocatable is allocated with a short SOURCE= specifier.  While here, clean up DoFromSourceAssign() so that it uses a temporary descriptor on the stack rather than allocating one from the heap.

Fixes https://github.com/llvm/llvm-project/issues/155703.",2025-08-27T23:04:10Z,2025-08-29T14:50:21Z,2025-08-29T14:50:17Z,2025-08-29T14:50:17Z,True,0,2,1,23,11,2
155713,closed,[Driver] Enable outline atomics for OpenBSD/aarch64,brad0,,2025-08-27T22:55:51Z,2025-08-28T06:26:02Z,2025-08-28T06:02:26Z,2025-08-28T06:02:26Z,True,2,0,1,6,1,2
155714,closed,[lldb] Adjust ProtocolServer connection defaults.,ashgti,"This adjusts the ProtocolServer command to default to create a new connection listening on `localhost:0` and adds a new `ServerMetadata` details to `~/.lldb/mcp/lldb-<pid>.json` to record information about the current MCP server.

This can be consumed by the lldb-mcp binary to establish a connection from an LLM client.

",2025-08-27T23:03:06Z,2025-08-29T23:18:20Z,2025-08-29T23:17:46Z,2025-08-29T23:17:46Z,True,4,10,11,151,56,13
155712,closed,release/21.x: [libc++] Ensure that we restore invariants in basic_filebuf::overflow (#147389),llvmbot,"Backport 6291b63a9a104fe93f8e4e279ef2237dc081304f

Requested by: @var-const",2025-08-27T22:49:59Z,2025-09-08T07:33:00Z,2025-09-08T07:32:05Z,2025-09-08T07:32:05Z,True,16,0,3,141,12,5
155711,closed,[lldb] NFC Moving mcp::Transport into its own file.,ashgti,Moving `lldb_protocol::mcp::MCPTransport` out of Server.h and into its own file and simplifying the name to `Transport`.,2025-08-27T22:39:45Z,2025-08-28T12:28:19Z,2025-08-27T23:21:04Z,2025-08-27T23:21:04Z,True,5,0,1,90,38,9
155708,closed,[lldb] Add lldb-mcp scaffolding,JDevlieghere,"Add the scaffolding for a new tool lldb-mcp. This utility is meant to replace netcat and acts a proxy between the LLM and one or more LLDB instances. In its current form, the utility is a trivial MCP server without any tools or resources.",2025-08-27T22:19:09Z,2025-08-28T17:35:28Z,2025-08-27T23:22:00Z,2025-08-27T23:22:00Z,True,8,6,2,135,0,4
155710,closed,[RISCV] Verify vfwmaccbf16 and vfncvtbf16 FRM argument in SemaRISCV::CheckBuiltinFunctionCall.,topperc,We need to check that the FRM value is an integer constant expression with value 0-4.,2025-08-27T22:37:41Z,2025-08-29T07:24:39Z,2025-08-29T05:32:13Z,2025-08-29T05:32:12Z,True,13,0,3,115,0,3
155707,closed,[flang][runtime] Handle null list-directed fields in child input,klausler,"List-directed input statements maintain two flags (""eatComma_"" and ""hitSlash_"") in their state that allow GetNextDataEdit() to detect and handle field separators (usually ',') and slashes in the input stream.  For list-directed input in a defined input subroutine, it's necessary to copy those flags from the parent list-directed input statement (if any) and update them afterwards.

Fixes https://github.com/llvm/llvm-project/issues/154791.",2025-08-27T22:14:35Z,2025-08-29T14:49:58Z,2025-08-29T14:49:54Z,2025-08-29T14:49:54Z,True,4,0,1,9,0,2
155705,closed,[lldb] Add more command option mnemonics,JDevlieghere,"Add a bunch of mnemonics to the command options now that they're highlighted in the help output.

This uncovered two issues:

  - We had an instance where we weren't applying the ANSI formatting.
  - We had a place where we were now incorrectly computing the column width.

Both are fixed by this PR.",2025-08-27T21:44:26Z,2025-09-04T20:21:27Z,2025-09-04T20:21:25Z,2025-09-04T20:21:25Z,True,3,0,1,185,151,5
155704,closed,"Fix the lit failure on ""loop-register.s"" test.",zeroomega,"This is a follow up of f3a5c16b9810fc12e7be35ff719be10427338256, which broke the test on arm64 due to incorrect use of the UNSUPPORTED tag.",2025-08-27T21:39:48Z,2025-08-28T13:53:08Z,2025-08-27T23:11:35Z,2025-08-27T23:11:35Z,True,6,0,1,1,1,1
155702,closed,[memprof] Modernize DataAccessProfRecord (NFC),kazutakahirata,"It's a bit safer to keep the initialization attached to the member
variable.
",2025-08-27T21:26:27Z,2025-08-27T22:37:40Z,2025-08-27T22:37:29Z,2025-08-27T22:37:29Z,True,1,0,1,2,2,1
155700,closed,[NFC][IR2Vec] Change getSlotIndex parameter from Value* to Value&,svkeerthy,,2025-08-27T21:21:21Z,2025-08-30T00:08:31Z,2025-08-29T23:54:05Z,2025-08-29T23:54:04Z,True,5,0,1,9,9,4
155698,closed,[CI] Add a script to cache lit test timing files,boomanaiden154,"This patch adds a new script with the ability to upload/download .lit_test_times.txt files to ensure tests are run in a reasonably optimal order.

The plan is to integrate this into the workflows in follow-up PRs.",2025-08-27T21:15:45Z,2025-08-27T23:35:47Z,2025-08-27T23:35:44Z,2025-08-27T23:35:44Z,True,0,0,1,294,11,3
155697,closed,[CIR] Emit copy for aggregate initialization,andykaylor,This adds the implementation of aggEmitFinalDestCopy for the case where the destination value is not ignored. This requires adding the cir.copy operation and associated interface code.,2025-08-27T21:14:24Z,2025-09-03T18:08:46Z,2025-09-03T18:08:40Z,2025-09-03T18:08:40Z,True,1,3,3,300,22,15
155695,closed,[mlir][tosa] Avoid requirement to specify enum name for enum attributes,Tai78641,"This commit updates the printer/parser of operations that use
enum type attributes such that they aren't required to specify
the full enum name e.g.
`rounding_mode = #tosa.rounding_mode<SINGLE_ROUND>` becomes
`rounding_mode = SINGLE_ROUND`.

For compatibility, text with #tosa.rounding_mode<...> will still be
accepted by the parser.
",2025-08-27T21:10:34Z,2025-08-29T15:32:50Z,2025-08-29T15:32:50Z,2025-08-29T15:32:50Z,True,6,0,2,583,194,25
155696,closed,"Reland ""[AArch64] AArch64TargetLowering::computeKnownBitsForTargetNode - add support for AArch64ISD::MOV/MVN constants""",ningxinr,"Reland #154039 

Per suggestion by @davemgreen, add mask on the shift amount to prevent shifting more than the bitwidth. This change is confirmed to fix the tests failures on x86 sanitizer bots and aarch64 sanitizer bots failures. 

Fixes: https://github.com/llvm/llvm-project/issues/153159",2025-08-27T21:12:56Z,2025-09-02T18:23:45Z,2025-09-02T17:32:31Z,2025-09-02T17:32:31Z,True,3,1,3,150,0,2
155694,closed,[lldb] Add a simplified syntax for underlying command options (NFC),JDevlieghere,"This PR updates the tablegen emitter for command options to support a simplified syntax to underline the mnemonic. Previously, you had to write `${ansi.underline}<L>${ansi.normal}`, where `<L>` is the mnemonic. This really hurt the readability of the description. With this PR, you can write `${<L>}` instead.",2025-08-27T20:54:39Z,2025-08-29T18:06:55Z,2025-08-29T18:06:51Z,2025-08-29T18:06:51Z,True,6,6,3,42,18,2
155690,closed,[NFC][IR2Vec] Initialize Embedding vectors with zeros by default,svkeerthy,Initialize `Embedding` vectors with zeros by default when only size is provided.,2025-08-27T20:26:07Z,2025-09-04T20:31:14Z,2025-09-04T20:31:11Z,2025-09-04T20:31:11Z,True,4,0,1,5,5,2
155693,closed,[RISCV] Enable LUi/AUIPC+ADDI/ADDIW reg alloc hint by default,preames,"This block of code is currently conditional on the fusions being enabled but as far as I can tell, does no harm to generally enable.  The net effect is the generically compiled code runs slightly better on machines with this fusion.

The actual motivation is merely to stop confusing myself when I see the sequence in code; the register allocators choice to sometimes blow two registers instead of one is just generally weird, and my eyes spot it when scanning disassembly.

(Note that this is just the regalloc hint; the scheduling changes remain  conditional, and probably should remain so.)",2025-08-27T20:53:13Z,2025-09-06T11:10:06Z,2025-08-27T22:59:09Z,2025-08-27T22:59:09Z,True,2,0,1,147,197,17
155689,closed,[libc++] Turn off PIE when running libc++ premerge tests.,cmtice,Turning off PIE for the LLVM premerge tests gave us an 8-10% run time improvement on Linux. Hopefully it can also improve the libc++ premerge test run times.,2025-08-27T20:22:25Z,2025-08-28T02:30:44Z,2025-08-28T02:30:44Z,,False,4,0,1,1,0,1
155688,closed,[clang] fix regression printing constructor/destructor names,mizvekov,"This makes the type printer not qualify constructor and destructor names. These are represented as canonical types and the type printer is used, but unlike canonical types which we normally print as fully qualified, the expected behaviour for declaration names is for them to be unqualified.

Note that this restores the behaviour pre #147835, but that is still broken for the constructor names of class templates, since in that case the injected class name type is used, but here the type printer is configured to also print the implicit template arguments.

No release notes since this regression was never released.

Fixes #155537",2025-08-27T20:17:17Z,2025-08-28T01:23:10Z,2025-08-27T21:04:55Z,2025-08-27T21:04:55Z,True,3,0,1,37,20,10
155687,closed,[Clang] Update ReleaseNotes with ThreadSafetyAnalysis changes,melver,"Note that ACQUIRED_BEFORE(...) and ACQUIRED_AFTER(...) no longer require -Wthread-safety-beta.

Follow-up from https://github.com/llvm/llvm-project/pull/152853.",2025-08-27T20:14:40Z,2025-09-01T19:50:14Z,2025-09-01T19:50:13Z,2025-09-01T19:50:13Z,True,1,0,1,4,0,1
155685,closed,[NVPTX] don't erase CopyToRegs when folding movs into loads (#149393),Artem-B,"Backport of #149393

We may still need to keep CopyToReg even after folding uses into vector loads, since the original register may be used in other blocks.

Partially reverts 1fdbe6984976d9e85ab3b1a93e8de434a85c5646",2025-08-27T20:09:40Z,2025-09-03T17:42:24Z,2025-09-03T10:21:26Z,2025-09-03T10:21:26Z,True,4,0,1,1095,691,7
155686,closed,[CMake][AIX] Enable CMP0182: Create shared library archives by default,daltenty,"On AIX we prefer to create shared libraries as shared library archives (i.e. we archive the shared object in a big AR archive) as this is the standard format on the platform.

There is now a CMake policy that allows us to do this by default, so opt-in to that behaviour.",2025-08-27T20:12:05Z,2025-09-02T17:31:19Z,2025-08-28T13:29:27Z,2025-08-28T13:29:27Z,True,2,1,2,6,0,1
155684,closed,[mlir] Fix node numbering order in SliceMatchers example,chios202,"After reviewing this again, it looks like I missed some nodes. Node 7 uses node 1 and 5 as well.",2025-08-27T19:40:08Z,2025-08-30T06:50:59Z,2025-08-30T06:34:49Z,2025-08-30T06:34:49Z,True,2,0,1,1,1,1
155679,closed,[libcxx][test] Avoid warnings about unused variables and typedefs if `_LIBCPP_VERSION` is not defined,AlexGuteniev,Make these tests pass with MSVC STL,2025-08-27T19:02:14Z,2025-09-02T16:20:52Z,2025-09-02T16:19:48Z,2025-09-02T16:19:48Z,True,3,5,3,13,11,5
155683,closed,[mlir][vector] Propagate alignment in LowerVectorGather.,amd-eochoalo,"Alignment is properly propagated when patterns
`UnrollGather`, `RemoveStrideFromGatherSource`, or
`Gather1DToConditionalLoads` are applied.",2025-08-27T19:38:07Z,2025-09-05T13:43:18Z,2025-09-05T13:43:18Z,2025-09-05T13:43:18Z,True,1,2,3,24,8,2
155676,closed,[SPIR-V] Fix asm printing of OpLifetimeStart/Stop,sarnex,"There should not be a comma between the operands. 
`spirv-val` errors on it, and `llvm-spirv` doesn't emit it.",2025-08-27T18:46:28Z,2025-08-28T14:18:34Z,2025-08-28T14:18:34Z,2025-08-28T14:18:34Z,True,2,0,1,8,8,2
155678,closed,[llvm-debuginfo-analyzer][lit] Fix tests failing when X86 isn't available,sarnex,"Need to require the target.

Fixes: https://github.com/llvm/llvm-project/pull/153318",2025-08-27T19:01:11Z,2025-08-27T20:16:42Z,2025-08-27T20:16:32Z,2025-08-27T20:16:32Z,True,2,0,1,4,0,2
155675,closed,[flang] Downgrade an error to a warning for specific circumstances,klausler,"We emit an error on the component name in the structure constructor ""__builtin_c_ptr(__address=0)"", which is the value of ""c_ptr_null()"", because the component name ""__address"" is PRIVATE to an intrinsic module.  The error is specifically omitted, however, when the name appears in a module file, since it's what we emit for ""c_ptr_null()"" in initializers.

This patch carves out another exception -- downgrading the error to a warning -- for the case of a PRIVATE component name in a structure constructor from an intrinsic module when the structure constructor appears in a module.  This case arises when module files are being reprocessed as Fortran source in order to convert them to hermetic module files.",2025-08-27T18:36:37Z,2025-08-29T14:49:37Z,2025-08-29T14:49:33Z,2025-08-29T14:49:33Z,True,1,0,1,26,6,4
155673,closed,[AMX][PreTileConfig] Ensure that PLDTILECFGV instruction is sinked closer to tile use instruction.,karthik-senthil,"According AMX ABI, tile registers (including config) are volatile hence requiring caller to save/restore config register. This is done in X86's FastPreTileConfig pass. Currently the PLDTILECFGV instruction is emitted immediately after the call which can be problematic if call returns a value in say rax register and AMX tile is configured using the same register. This PR addresses this issue by ensuring that PLDTILECFGV is sinked closer to first instruction using a tile after the call.",2025-08-27T18:31:10Z,2025-09-04T06:16:26Z,2025-09-03T18:36:33Z,2025-09-03T18:36:33Z,True,5,0,2,164,4,3
155672,closed,"[LAA,Loads] Use loop guards and max BTC if needed when checking deref.",fhahn,"Remove the fall-back to constant max BTC if the backedge-taken-count cannot be computed.

The constant max backedge-taken count is computed considering loop guards, so to avoid regressions we need to apply loop guards as needed.

Also remove the special handling for Mul in willNotOverflow, as this should not longer be needed after 914374624f
(https://github.com/llvm/llvm-project/pull/155300).",2025-08-27T18:16:04Z,2025-09-02T20:45:20Z,2025-09-02T17:58:33Z,2025-09-02T17:58:33Z,True,5,7,1,69,64,5
155671,closed,[memprof] Make HeapProfileRecords optional,kazutakahirata,"memprof::AllMemProfData has become home to multiple types of memprof
data -- heap profile and static data profile.  When we write test
cases for static data profile in YAML, we do not want to include empty
heap profile.  That would just add visual clutter.

This patch makes HeapProfileRecords optional.
",2025-08-27T18:15:43Z,2025-08-28T02:44:01Z,2025-08-27T23:59:48Z,2025-08-27T23:59:48Z,True,4,0,2,42,2,4
155668,closed,[Clang][CodeGen]NFC] Modernize loops in EmitCtorPrologue,andykaylor,"This patch updates the loops in EmitCtorPrologue to use range-based for loops rather than looping over a single iterator which was being shared between three loops. Setting up three separate ranges adds a very small amount of overhead, but it improves the readability and maintainability of the code.",2025-08-27T18:02:55Z,2025-09-09T16:56:29Z,2025-09-09T16:56:24Z,2025-09-09T16:56:24Z,True,3,3,2,36,19,1
155667,closed,[flang][OpenMP] Analyze objects in OmpObjectList on clauses (#155424),kparzysz,"This is intended to diagnose errors such as incorrect uses of assumed-size arrays, for example.

Fixes https://github.com/llvm/llvm-project/issues/151990

Reinstate 63085310c9 (PR 155424) with a change that treats whole assumed- size-arrays as variables (as defined by the Fortran standard). This treats them, by default, as valid variable list items.",2025-08-27T18:01:49Z,2025-08-27T18:24:14Z,2025-08-27T18:24:12Z,2025-08-27T18:24:12Z,True,1,0,1,55,4,6
155669,closed,[RISCV][POC] Should we be using ADD for disjoint or?,preames,"This is at the moment mostly a prompt for discussion as opposed to a patch I intend to land.

I happened to notice that c.add allows more registers than the c.or instruction.  Thus, by using ADD instead of OR for a disjoint OR, we have the possibility of emitting more compressible instructions. I can see that this does happen in a couple places in the tests, but I don't have a compelling example or anything.

If we wanted to do this with less test churn and confusion, we could do something like introduce a OR_DISJOINT pseudo, and lower it to either OR or ADD extremely late based on which registers got used..",2025-08-27T18:13:10Z,2025-08-29T15:07:44Z,2025-08-29T15:07:43Z,,False,4,0,1,2946,2946,82
155666,closed,[flang][acc] Fix mappableTy.generateAccBounds to correctly handle dynamic-sized arrays,khaki3,We currently see the misuse of the `upperbound` operand for the `acc::DataBoundsOp` generation in `generateSeqTyAccBounds`. This PR keeps setting `lowerbound` to zero for all cases and adjusts `upperbound` to be `extent - 1`.,2025-08-27T17:58:52Z,2025-08-28T05:46:09Z,2025-08-28T05:46:08Z,2025-08-28T05:46:08Z,True,3,5,3,26,6,3
155664,closed,[HLSL][SPIRV] Add -fspv-use-unknown-image-format option,s-perron,"This option allows users to control the image format used for HLSL resources
when targeting SPIR-V. When the option is enabled, the unknown image format
is used. Otherwise, the image format is guessed based on the input type.

Fixes https://github.com/llvm/llvm-project/issues/148270
",2025-08-27T17:39:27Z,2025-08-29T21:04:54Z,2025-08-29T13:55:32Z,2025-08-29T13:55:32Z,True,1,3,3,149,12,8
155662,closed,[clang] MicrosoftMangle: pick correct tagdecl for mangling tagkind,mizvekov,"This fixes a regression reported here: https://github.com/llvm/llvm-project/pull/147835#issuecomment-3225550458

Since this regression was never released, there are no release notes.",2025-08-27T17:24:41Z,2025-08-28T17:56:27Z,2025-08-27T17:48:54Z,2025-08-27T17:48:54Z,True,1,2,1,45,2,2
155660,closed,[Github] Bump clang-format to 21.1.0,boomanaiden154,"This patch bumps the clang-format version in the pr-code-format action to the latest release version, in line with how we have handled this before.",2025-08-27T17:20:42Z,2025-08-28T14:36:53Z,2025-08-28T14:36:50Z,2025-08-28T14:36:49Z,True,5,2,2,4,1,1
155663,closed,[CIR] Add constant record ILE support,mmha,"This patch adds basic support for constant record initializer list expressions. There's a couple of limitations:

* No zero initialized padding bytes in C mode
* No bitfields
* No designated initializer lists
* Record alignments are not calculated, yet
* ILEs of derived records don't work, yet
* The constant attribute is not propagated to the backend, resulting in non-constants being emitted in the LLVM IR",2025-08-27T17:38:33Z,2025-09-04T21:10:47Z,2025-09-04T21:10:47Z,2025-09-04T21:10:47Z,True,2,44,6,837,24,14
155659,closed,[flang][openacc] bug fix in semantic checking,akuhlens,"This fixes two scoping related bugs with OpenACC semantic checking.
- Data constructs with open acc now inherit the default Data Sharing Attribute of their parent construct.
- Data Sharing Attributes scopes now nest such that if a symbol's DSA wasn't declared by the innermost then lookup looks in the parent construct's data sharing declarations. This fixes the added test cases.",2025-08-27T17:19:40Z,2025-08-27T23:23:05Z,2025-08-27T23:23:05Z,2025-08-27T23:23:05Z,True,2,4,2,58,9,2
155657,closed,[WPD] set the branch funnel function entry count,mtrofin,"We can compute the entry count of branch funnel functions, and potentially avoid them being deemed cold (also, keeping profile information coherent is always good for performance)

Issue #147390",2025-08-27T17:14:00Z,2025-09-08T23:41:36Z,2025-09-08T23:41:34Z,2025-09-08T23:41:34Z,True,6,12,1,244,9,2
155658,closed,[CI] Bump Linux Contaienr LLVM to 21.1.0,boomanaiden154,"Now that a new release has come out, we should bump the version of the toolchain in the container to keep up to date.",2025-08-27T17:17:39Z,2025-08-27T23:36:07Z,2025-08-27T23:36:03Z,2025-08-27T23:36:03Z,True,1,0,1,1,1,1
155656,closed,Update SSE/AVX integer comparison intrinsics to be used in constexpr,smoke-y,"Closes #155413
",2025-08-27T17:11:42Z,2025-08-28T15:10:46Z,2025-08-28T15:10:26Z,2025-08-28T15:10:26Z,True,7,7,9,62,30,7
155655,closed,[NFC][offload] Fix error message for cuFuncSetAttribute,kevinsala,,2025-08-27T17:04:56Z,2025-08-27T18:35:38Z,2025-08-27T18:35:38Z,2025-08-27T18:35:38Z,True,1,0,1,1,1,1
155653,closed,[docs][OpenMP] Claim C/C++ implementation of dyn_groupprivate clause,kevinsala,,2025-08-27T16:57:20Z,2025-08-28T18:12:03Z,2025-08-28T18:12:01Z,2025-08-28T18:12:01Z,True,1,0,1,3,1,1
155654,closed,[RISCV] Mark OR used in czero select lowering as disjoint,preames,"This has no test impact at the moment, just being pedantic.  Since one of the arms must always be zero, there are no common bits.",2025-08-27T16:57:37Z,2025-08-27T17:31:57Z,2025-08-27T17:26:22Z,2025-08-27T17:26:22Z,True,1,0,1,6,4,1
155652,closed,[Clang] Update `__builtin_masked_load` to accept passthrough argument,jhuber6,"Summary:
It's important to be able to define the result of the masked-off lanes,
add this as an optional argument to the builtin.
",2025-08-27T16:37:04Z,2025-08-27T18:58:31Z,2025-08-27T18:58:31Z,2025-08-27T18:58:30Z,True,2,4,1,44,4,5
155651,closed,[docs][OpenMP] Add docs section for OpenMP 6.1 implementation status,kevinsala,Add section for OpenMP 6.1 (experimental) implementation status in the documentation. OpenMP 6.1 has not been released yet.,2025-08-27T16:35:43Z,2025-08-28T17:06:26Z,2025-08-28T17:06:24Z,2025-08-28T17:06:24Z,True,1,0,1,20,0,1
155649,closed,[flang] Fix lowering of unused dummy procedure pointers,luporl,"Fixes #126453
",2025-08-27T16:22:17Z,2025-09-08T11:39:11Z,2025-09-08T11:39:07Z,2025-09-08T11:39:07Z,True,6,0,1,89,9,4
155648,closed,"[mlir][vector] Propagate alignment when emulating masked{load,stores}.",amd-eochoalo,Propagate alignment from `vector.maskedload` and `vector.maskedstore` to `memref.load` and `memref.store` during `VectorEmulateMaskedLoadStore` pass.,2025-08-27T16:21:38Z,2025-09-08T14:38:18Z,2025-09-05T13:48:41Z,2025-09-05T13:48:41Z,True,6,2,5,38,3,2
155646,closed,[flang-rt] Add the ability to have user supplied callback functions to further customize the runtime environment.,d-parks,"Add the ability to have pre and post call back functions to ExecutionEnvironment::Configure() to allow further customization of the flang runtime environment (called from _FortranAStartProgam) in situations where either the desired features/functionality are proprietary or are too specific to be accepted by the flang community.

Example:
Custom constructor object linked with flang objects:
```
#include ""flang-rt/runtime/environment.h""
#include ""flang/Runtime/entry-names.h""
#include ""flang/Runtime/extensions.h""

namespace Fortran::runtime {

// Do something specific to the flang runtime environment prior to the
// core logic of ExecutionEnvironment::Configure().
static void
CustomPreConfigureEnv(int argc, const char *argv[], const char *envp[],
                      const EnvironmentDefaultList *envDefaultList) {
  puts(__func__);
}

// Do something specific to the flang runtime environment after running the
// core logic of ExecutionEnvironment::Configure().
static void
CustomPostConfigureEnv(int argc, const char *argv[], const char *envp[],
                       const EnvironmentDefaultList *envDefaultList) {
  puts(__func__);
}

void __attribute__((constructor)) CustomInitCstor(void) {
  // Possibilities:
  // RTNAME(RegisterConfigureEnv)(&CustomPreConfigureEnv,
  // &CustomPostConfigureEnv); RTNAME(RegisterConfigureEnv)(nullptr,
  // &CustomPostConfigureEnv);
  RTNAME(RegisterConfigureEnv)(&CustomPreConfigureEnv, nullptr);
}
} // namespace Fortran::runtime
```


",2025-08-27T15:59:08Z,2025-08-29T16:06:48Z,2025-08-29T16:06:47Z,2025-08-29T16:06:47Z,True,1,7,6,85,1,2
155644,closed,[RISCV] Use SLLI/ADDI to when materializing select of constants,preames,"This avoids the need to materialize the difference explicitly, and thus reduces register pressure when the condition val is otherwise unused.

@Reviewers

1) This is deliberately subset to be simple.  In followups, I'm going to handle the swapped case, but that's a bit more complex and might best be done by refactoring some of the existing combines.

2) We should arguably be doing this for all configurations, not just zicond.",2025-08-27T15:48:54Z,2025-08-27T17:31:11Z,2025-08-27T17:31:06Z,2025-08-27T17:31:06Z,True,1,0,1,57,41,3
155643,closed,[libc++][AIX] Fixup problems with ABI list checking,daltenty,"There are some problems with our ABI list checking exposed by recent compiler/cmake upgrades.

- For symcheck, there are typos in how XCOFF magic are defined, we intended the second two digits to be a hex value, but our syntax doesn't say that. Thus this will never match a valid XCOFF file.
- AIX triples can have version numbers. Those need to be discarded when looking for an libc++ ABI list, like we do for other targets.",2025-08-27T15:44:02Z,2025-09-02T17:21:37Z,2025-08-27T22:28:26Z,2025-08-27T22:28:26Z,True,3,1,4,4,1,2
155642,closed,[RISCV][GISel] Lower G_SSHLSAT and G_USHLSAT,sunshaoce,,2025-08-27T15:42:17Z,2025-08-28T03:00:43Z,2025-08-28T02:32:18Z,2025-08-28T02:32:18Z,True,2,0,1,311,5,4
155641,closed,[mlir][emitc] Isolate expressions from above,aniragil,"The expression op is currently not isolated from above. This served its original usage as an optional, translation-oriented op, but is becoming less convenient now that expressions appear earlier in the emitc compilation flow and are gaining use as components of other emitc ops.

This patch therefore adds the isolated-from-above trait to expressions. Syntactically, the only change is in the expression's signature which now includes the values being used in the expression as arguments and their types. The region's argument's names shadow the used values to keep the def-use relations clear.",2025-08-27T15:36:26Z,2025-09-01T12:10:18Z,2025-09-01T12:10:17Z,2025-09-01T12:10:17Z,True,8,0,1,256,122,13
155639,closed,"Revert ""[BOLT] Refactor MCInstReference and move it to Core (NFC)""",atrosinenko,"Reverts llvm/llvm-project#138655.

As [reported](https://github.com/llvm/llvm-project/pull/138655#issuecomment-3228451062) by @nico:
> Looks like this breaks building with libc++: http://45.33.8.238/macm1/113043/step_3.txt
>
> Please take a look and revert for now if it takes a while to fix.

I will resend the patch after implementing a better way to handle the iterators.",2025-08-27T15:31:45Z,2025-08-27T15:45:34Z,2025-08-27T15:45:32Z,2025-08-27T15:45:32Z,True,1,0,1,234,256,5
155640,closed,[flang][OpenMP] Handle symbols on composite simd with multiple privatizers,mrkajetanp,"In some cases, a clause on a composite simd construct applied to simd can be using a symbol that is also used by another privatizer, not applied to simd. Correctly handle this scenario by checking which directive the privatizer is being generated for while determining whether to emit the copy region.

Fixes #155195.",2025-08-27T15:36:21Z,2025-08-28T14:58:30Z,2025-08-28T14:58:30Z,2025-08-28T14:58:30Z,True,1,0,2,49,15,6
155637,closed,[lldb] Fix a typo in --one-shot description (NFC),kastiglione,,2025-08-27T15:26:42Z,2025-08-27T16:55:52Z,2025-08-27T16:55:48Z,2025-08-27T16:55:48Z,True,1,0,1,1,1,1
155635,closed,[OpenACC] Partial Reduction recipe Lowering,erichkeane,"This patch implements basic reduction recipe lowering, plus adds a bunch of tests for it that should be meaningful later.  At the moment, all this does is ensure that we get the init 'alloca' set right (the actual initializer isn't done correctly yet, and will be in a followup), an empty combiner (though the type of certain operations probably has to be different as well, when we get to those), and a full-destruction, as we already have the infrastructure for it.",2025-08-27T15:14:43Z,2025-08-28T15:08:27Z,2025-08-28T14:16:45Z,2025-08-28T14:16:44Z,True,3,2,2,6701,17,20
155628,closed,[RISCV] Avoid recreating constants in LowerSelect [nfc],preames,,2025-08-27T14:18:51Z,2025-08-27T16:54:28Z,2025-08-27T16:54:25Z,2025-08-27T16:54:25Z,True,1,0,1,1,3,1
155632,closed,"[Offload] For AMDGPU driver, use product name",RossBrunton,"On my system, this causes the device to now identify as ""Radeon RX 7900
GRE"" rather than ""gfx1100"". This matches Nvidia, which identifies as
(for example) ""NVIDIA GeForce GT 1030"".
",2025-08-27T14:57:20Z,2025-08-28T14:16:18Z,2025-08-28T14:16:17Z,2025-08-28T14:16:17Z,True,8,1,3,37,6,8
155629,closed,[flang] optimize `tand` precision,c8ef,Closes #150452.,2025-08-27T14:27:55Z,2025-08-27T15:29:19Z,2025-08-27T14:49:16Z,2025-08-27T14:49:16Z,True,6,0,1,17,6,2
155627,closed,[CI] Enable -Werror in pre-merge CI,nikic,"We have many buildbots that run with -Werror, but it's currently not enabled in pre-merge CI, so adding a warning causes a slew of post-commit failures.

Note that we only guarantee warning freedom when compiling with a recent version of clang, but not when using gcc or msvc. The monolithic-linux build uses recent clang (currently 21.1.0), so it should be safe to enable the option there.",2025-08-27T14:16:01Z,2025-09-01T09:08:16Z,2025-09-01T09:08:14Z,2025-09-01T09:08:14Z,True,5,0,3,2,1,1
155626,closed,[Offload] Port llvm-offload-device-info to new offload API,RossBrunton,"This is a tool similar to urinfo that simply prints properties of all
devices. The old openMP version has been ported to liboffload.
",2025-08-27T14:15:42Z,2025-09-04T13:20:27Z,2025-09-04T11:23:30Z,2025-09-04T11:23:30Z,True,7,6,6,260,21,2
155624,closed,[llvm-exegesis] Follow up of 810ac29cfe81cbd8f2e97d06f0acd540f841c754,sjoerdmeijer,"Disable the test case for now as it still shows slightly different codegen in a stage2 build, which is not wrong, but needs to investigated why it is happening.",2025-08-27T14:03:53Z,2025-08-27T21:13:52Z,2025-08-27T14:04:31Z,2025-08-27T14:04:31Z,True,3,0,1,6,0,1
155623,closed,[BOLT] Remove shell requirements from several tests,boomanaiden154,"This patch removes the shell requirement from four tests. This patched is aimed at enabling lit's internal shell for BOLT, which results in a ~15% test time improvement.

After this patch there are still two more unresolved tests that need to be fixed. That is tracked by #102693.

This is towards #102701.",2025-08-27T13:58:37Z,2025-08-27T18:23:54Z,2025-08-27T18:23:51Z,2025-08-27T18:23:51Z,True,1,0,1,28,41,4
155622,closed,"Revert ""[ADT] Deprecate the redirection from SmallSet to SmallPtrSet (Take 2) (#155078)",joker-eph,"This reverts commit 9b493dcad25941911af94bd6a63fea5fb187b870.

There are hundreds of warnings when building LLVM/Clang because of this right now. See the original PR for the detailed issues.

Also revert the follow-up fix ""[ADT] Fix redirection of SmallSet to SmallPtrSet (#155117)"" This reverts commit 3ca1ca4301703ceadd0ab9c0b156bd6c0a3af7ec.",2025-08-27T13:43:38Z,2025-08-27T15:24:03Z,2025-08-27T15:24:03Z,2025-08-27T15:24:03Z,True,2,0,1,1,10,1
155621,closed,[VectorCombine] Avoid double deletion in `eraseInstruction`,dtcxzyw,"Consider the following pattern:
```
C = op A B
D = op C
E = op D, C
```
As `E` is dead, we call `eraseInstruction(E)` and see if its operands become dead. `RecursivelyDeleteTriviallyDeadInstructions(D)` also erases `C`, which causes a UAF crash in the subsequent call `RecursivelyDeleteTriviallyDeadInstructions(C)`.

This patch also adds deleted ops into the visit list to avoid double deletion. As an alternative, we can use `WeakVH` for the operand list.

Closes https://github.com/llvm/llvm-project/issues/155543.
",2025-08-27T13:37:25Z,2025-08-27T14:28:04Z,2025-08-27T14:28:02Z,2025-08-27T14:28:02Z,True,1,0,1,18,2,2
155620,closed,[clang] Update typechecking of builtin elementwise ternary math operators,ckoparkar,"Fixes #155405

For scalars we directly compare their unqualified types. But even if we compare unqualified vector types, a difference in qualifiers in the element types can make the vector types be considered not equal. For example, vector of 4 'const float' values vs vector of 4 'float' values. So we compare unqualified types of their elements and number of elements.

/cc @tbaederr ",2025-08-27T13:35:16Z,2025-08-29T10:40:39Z,2025-08-29T10:33:00Z,2025-08-29T10:33:00Z,True,3,18,6,74,15,3
155618,closed,[DebugInfo] Drop extra DIBuilder::finalizeSubprogram() calls (NFC),dzhidzhoev,"After #139914, `DIBilder::finalize()` finalizes both declaration and definition DISubprograms. 
Therefore, there is no need to call `DIBuilder::finalizeSubprogram()` right before `DIBilder::finalize()`.",2025-08-27T13:25:50Z,2025-08-27T15:58:30Z,2025-08-27T15:58:29Z,2025-08-27T15:58:29Z,True,1,0,1,0,7,3
155616,closed,[AArch64] Fix file description,tomershafir,The class implements `AArch64ISelLowering` (no such file as `AArch64TargetLowering`).,2025-08-27T13:07:11Z,2025-08-28T09:44:06Z,2025-08-28T09:44:01Z,,False,3,0,1,1,1,1
155614,closed,[ThreadPool] Fix Windows failures in the AffinityMask unit test,nga888,"These thread pool tests are typed and one was failing due to the setting of environment variable `LLVM_THREADPOOL_AFFINITYMASK` leaking out of a previous run of the test. I suspect that this has mainly succeeded because the tests have run in separate shards.

Also the re-invocation of the unit test with the process affinity mask set was not actually running the test because `--gtest_filter=` was not set correctly. This has been fixed.

The use of the test type (TypeParam) in the AsyncBarrier test has been restored. Without this the typing of these tests would be completely redundant.

I suspect that some of these unit tests do not work if `LLVM_ENABLE_THREADS == 0` but that is beyond the scope of this fix.",2025-08-27T12:58:30Z,2025-08-27T13:27:02Z,2025-08-27T13:27:02Z,2025-08-27T13:27:02Z,True,3,1,1,10,4,1
155615,closed,AMDGPU: Fold 64-bit immediate into copy to AV class,arsenm,"This is in preparation for patches which will intoduce more
copies to av registers.",2025-08-27T13:00:27Z,2025-09-04T00:56:17Z,2025-09-03T00:29:59Z,2025-09-03T00:29:59Z,True,4,2,4,146,128,8
155612,closed,[Clang] Introduce __builtin_meow_synthesises_from_spaceship,philnik777,"This set of builtins makes it possible to detect whether a comparison operation is synthesised from a spaceship operator. This makes it possible to avoid calling the comparison multiple times if you care about the three-way relation. This is especially interesting for the associative containers from the STL, since a lot of functions call the comparator twice to establish the relation. With this builtin these functions can call the comparator just once and use the result of the three way comparison directly.
",2025-08-27T12:31:49Z,2025-09-01T19:49:16Z,2025-09-01T19:49:09Z,2025-09-01T19:49:09Z,True,3,1,1,272,3,5
155611,closed,[Coroutines] Avoid copying memory attributes to generated functions,Dinistro,This commit ensures that the coro split does not blindly copy memory attributes to generated coroutine functions. Copying things like `memory(none)` to functions that read or write memory causes UB.,2025-08-27T12:28:20Z,2025-08-29T08:55:25Z,2025-08-29T08:54:48Z,,False,2,0,1,48,5,2
155610,closed,"Reapply ""[LLDB] Add `ScalarLiteralNode` and literal parsing in DIL""",kuilpd,"This patch introduces `ScalarLiteralNode` without any uses by other nodes yet. It also includes lexing and parsing for integer and floating point numbers.
Reapplies #152308 with a fix.",2025-08-27T12:25:19Z,2025-08-27T12:49:56Z,2025-08-27T12:49:55Z,2025-08-27T12:49:55Z,True,1,0,18,429,31,15
155607,closed,AMDGPU: Refactor isImmOperandLegal,arsenm,"The goal is to expose more variants that can operate without
preconstructed MachineInstrs or MachineOperands.",2025-08-27T12:17:36Z,2025-09-03T04:32:02Z,2025-09-03T00:06:18Z,2025-09-03T00:06:18Z,True,6,7,3,76,46,4
155609,closed,[AArch64][NFC] Add MCInstrAnalysis unittests,bgergely0,"Increasing the AArch64 backend testing with MCInstAnalysis test.

Also added the isBarrier() function in MCInstAnalysis: 
since [isBarrier exists in MCInstDesc.h](https://github.com/llvm/llvm-project/blob/d94846a9adfd6c89699228f8538a832554c59df7/llvm/include/llvm/MC/MCInstrDesc.h#L291-L294), it makes sense to be available in the MCInstAnalysis as well.",2025-08-27T12:23:02Z,2025-08-28T14:02:26Z,2025-08-28T12:32:32Z,2025-08-28T12:32:32Z,True,3,6,2,196,0,3
155605,closed,"Revert ""[LLDB] Add `ScalarLiteralNode` and literal parsing in DIL""",kuilpd,Reverts llvm/llvm-project#152308,2025-08-27T12:07:59Z,2025-08-27T12:14:46Z,2025-08-27T12:14:44Z,2025-08-27T12:14:44Z,True,1,0,1,31,433,15
155602,closed,[NFC] SimplifyCFG: Detect switch replacement earlier in `switchToLookup`,OutOfCache,"This PR is the first part to solve the issue in #149937.

The end goal is enabling more switch optimizations on targets that do not support lookup tables.

SimplifyCFG has the ability to replace switches with either a few simple calculations, a single value, or a lookup table.
However, it only considers these options if the target supports lookup tables, even if the final result is not a LUT, but a few simple instructions like muls, adds and shifts.

To enable more targets to use these other kinds of optimization, this PR restructures the code in `switchToLookup`.
Previously, code was generated even before choosing what kind of replacement to do. However, we need to know if we actually want to create a true LUT or not before generating anything. Then we can check for target support only if any LUT would be created.

This PR moves the code so it first determines the replacement kind and then generates the instructions.

A later PR will insert the target support check after determining the kind of replacement. If the result is not a LUT, then even targets without LUT support can replace the switch with something else.",2025-08-27T11:59:58Z,2025-09-01T12:42:19Z,2025-09-01T12:42:19Z,2025-09-01T12:42:19Z,True,2,9,11,145,124,1
155603,closed,AMDGPU: Fix fixme for out of bounds indexing in usesConstantBus check,arsenm,"This loop over all the operands in the MachineInstr will eventually
go past the end of the MCInstrDesc's explicit operands. We don't
need the instr desc to compute the constant bus usage, just the
register and whether it's implicit or not. The check here is slightly
conservative. e.g. a random vcc implicit use appended to an instruction
will falsely report a constant bus use.",2025-08-27T12:03:05Z,2025-09-02T17:25:10Z,2025-09-02T17:25:08Z,2025-09-02T17:25:08Z,True,3,7,2,38,24,2
155601,closed,[AArch64] Update cost model for extracting halves from 128+ bit vectors,gbossu,"Previously, only 128-bit ""NEON"" vectors were given sensible costs.
Cores with vscale>1 can use SVE's EXT instruction to perform a
fixed-length subvector extract.

This is a follow-up from the codegen patches at #152554. They show that with the help of MOVPRFX, we can do subvector extract with roughly one instruction. We now at least give sensible costs for extracting 128-bit halves from a 256-bit vector.",2025-08-27T11:59:00Z,2025-09-03T11:00:22Z,2025-09-03T11:00:18Z,2025-09-03T11:00:17Z,True,1,11,6,349,4,3
155600,closed,[X86] canCreateUndefOrPoisonForTargetNode - add SSE bit logic + VPTERNLOG handling,RKSimon,"Basic bitlogic operations don't create undef/poison.

Its proving really annoying to create proper test coverage for these specific opcodes as they tend to appear in later stages - their presence does help in some upcoming patches (e.g. #152107) and I'd prefer to get them committed early.",2025-08-27T11:37:30Z,2025-08-27T12:59:38Z,2025-08-27T12:59:31Z,2025-08-27T12:59:31Z,True,1,0,1,8,0,1
155597,closed,[clang][bytecode] Reject vectors with non-primitive element types,tbaederr,This happens for e.g. arm's float8 types.,2025-08-27T11:30:11Z,2025-08-28T01:28:09Z,2025-08-27T12:09:54Z,2025-08-27T12:09:54Z,True,2,0,1,16,4,2
155595,closed,AMDGPU: Fix DPP combiner using isOperandLegal on incomplete inst,arsenm,"It is not safe to use isOperandLegal on an instruction that does
not have a complete set of operands. Unforunately the APIs are
not set up in a convenient way to speculatively check if an instruction
will be legal in a hypothetical instruction. Build all the operands
and then verify they are legal after. This is clumsy, we should have
a more direct check for will these operands give a legal instruction.

This seems to fix a missed optimization in the gfx11 test. The
fold was firing for gfx1150, but not gfx1100. Both should support
vop3 literals so I'm not sure why it wasn't working before.",2025-08-27T11:20:09Z,2025-09-02T16:19:04Z,2025-09-02T16:19:01Z,2025-09-02T16:19:01Z,True,2,7,6,149,86,7
155594,closed,release/21.x: [clang] Make sure EvalInfo pointer isn't null (#155563),llvmbot,"Backport 60cdc3ddeacd1310e8a014b076572c27e4886015

Requested by: @tbaederr",2025-08-27T11:03:00Z,2025-09-03T10:22:36Z,2025-09-03T10:22:02Z,2025-09-03T10:22:02Z,True,3,0,1,13,4,2
155589,closed,"Reapply ""[llvm-exegesis] Implement the loop repetition mode for AArch64"" (#155423)",sjoerdmeijer,"This includes two minor fixes:
- ""Codegen"" has been added to the LLVM_LINK_COMPONENTS for AArch64 to prevent a link error,
- the test case has been made less strict or fragile by not checking the addresses.",2025-08-27T10:15:03Z,2025-08-27T12:27:20Z,2025-08-27T11:40:56Z,2025-08-27T11:40:56Z,True,3,0,1,48,0,3
155587,closed,[mlir][amx] Prevent crash on invalid tile element type,adam-smnk,Fixes AMX tile type parser to prevent crashes on invalid element type.,2025-08-27T10:12:18Z,2025-08-27T13:59:46Z,2025-08-27T13:59:46Z,2025-08-27T13:59:46Z,True,2,0,1,23,5,2
155588,closed,[AArch64][SME] Address post-commit comments on the MachineSMEABIPass (NFC),MacDue,,2025-08-27T10:14:49Z,2025-08-27T12:32:15Z,2025-08-27T12:32:11Z,2025-08-27T12:32:11Z,True,1,0,1,4,4,1
155586,closed,[X86][APX] Remove redundant TEST*ri instructions,phoebewang,"The goal is to remove redundant TEST*ri instructions, especially with NF feature. Other tests are side effects due to longer live range of EFLAGS. https://godbolt.org/z/PbaTj1oa3",2025-08-27T10:09:13Z,2025-08-29T10:08:32Z,2025-08-28T00:46:58Z,2025-08-28T00:46:58Z,True,8,4,1,74,49,6
155583,closed,[GISel] Combine shift + trunc + shift pattern,jyli0116,Folds shift(trunc(shift(...))) pattern into trunc(shift(...)) by combining the two shift instructions,2025-08-27T09:40:51Z,2025-09-10T14:01:56Z,2025-09-10T14:01:55Z,2025-09-10T14:01:55Z,True,3,9,8,699,523,13
155581,closed,[Bazel] Add missing SCFTransforms dep to TestDialect,WillFroom,,2025-08-27T09:20:59Z,2025-08-27T09:30:19Z,2025-08-27T09:30:19Z,2025-08-27T09:30:19Z,True,0,0,1,1,0,1
155580,closed,[TableGen][DecoderEmitter] Add OPC_Scope opcode,s-barannikov,"This change introduces OPC_Scope opcode, whose only purpose is to record a continuation point to resume at if a subsequent opcode fails.

Each OPC_Scope pushes an entry onto the scope stack; an entry is popped if an opcode in the scope fails.

Previously, we recorded this information on several opcodes, it has been removed. A series of such opcodes often referred to the same continuation point; this information is now recorded in one place, reducing table sizes in most cases. Average reduction is 1.1%, some table observe up to 7% reduction in size.

The new behavior of those opcodes is ""check or leave scope"". If we're in the outermost scope (scope stack is empty), they act as ""check or fail"".

There is one opcode, OPC_FilterValueOrSkip that behaves like the old OPC_FilterValue. It is special because it acts as a case of a switch statement and has nothing to do with scopes. (If a case fails, we should try the next case instead of leaving the current scope.)
",2025-08-27T09:15:20Z,2025-09-06T08:07:45Z,2025-09-06T08:07:42Z,2025-09-06T08:07:42Z,True,4,1,2,201,256,10
155577,closed,[Docs][AMDGPU] Add gfx1200/gfx1201 product names,jplehr,I took the liberty to add the product names according to Wikipedia.,2025-08-27T09:02:07Z,2025-08-27T12:03:32Z,2025-08-27T12:03:26Z,2025-08-27T12:03:26Z,True,1,0,1,10,10,1
155578,closed,[AMDGPU] Remove `ApproxFuncFPMath` uses,paperchalice,"One of options in `resetTargetOptions`, this removes `ApproxFuncFPMath` in AMDGPU part.",2025-08-27T09:09:58Z,2025-08-28T03:23:23Z,2025-08-28T03:09:02Z,2025-08-28T03:09:02Z,True,1,0,2,8,385,7
155576,closed,[Bazel] Add missing Support dep to VectorToAMX,WillFroom,,2025-08-27T08:53:56Z,2025-08-27T08:56:27Z,2025-08-27T08:56:27Z,2025-08-27T08:56:27Z,True,0,0,1,1,0,1
155575,closed,[libc][math][c++23] Add fmodbf16 math function,krishna2803,This PR adds fmodbf16 basic math function for BFloat16 type along with the tests.,2025-08-27T08:43:56Z,2025-09-03T18:41:59Z,2025-09-03T16:50:08Z,2025-09-03T16:50:08Z,True,6,8,24,193,25,22
155574,closed,[InstCombine] Update contributor guide for commuted tests (NFC),nikic,"As we have removed complexity-based canonicalization, the ""thwart"" pattern is no longer relevant.

Also clarify that we do not expect commuted tests for constant operands.",2025-08-27T08:38:37Z,2025-08-27T13:03:13Z,2025-08-27T13:03:11Z,2025-08-27T13:03:11Z,True,0,0,1,3,16,1
155573,closed,[clang][bytecode] Handle vector assignments,tbaederr,,2025-08-27T08:31:46Z,2025-08-28T01:31:14Z,2025-08-27T09:55:37Z,2025-08-27T09:55:37Z,True,3,0,1,41,1,2
155572,closed,[LLVM][MLIR] Move LSP server support library from MLIR into LLVM,Bertik23,"This PR moves the generic Language Server Protocol (LSP) server support code that was copied from clangd into MLIR, into the LLVM tree so it can be reused by multiple subprojects.

Centralizing the generic LSP support in LLVM lowers the barrier to building new LSP servers across the LLVM ecosystem and avoids each subproject maintaining its own copy.

The code originated in clangd and was copied into MLIR for its LSP server. MLIR had this code seperate to be reused by all of their LSP server. This PR relocates the MLIR copy into LLVM as a shared component into `LLVM/Support`. If this is not a suitable place, please suggest a better one.

A follow up to this move could be deduplication with the original clangd implementation and converge on a single shared LSP support library used by clangd, MLIR, and future servers.

### What changes
* `mlir/include/mlir/Tools/lsp-server-support/{Logging, Protocol, Transport}.h` moved to `llvm/include/llvm/Support/LSP`
* `mlir/lib/Tools/lsp-server-support/{Logging, Protocol, Transport}.cpp` moved to `llvm/lib/Support/LSP`

and their namespace was changed from `mlir` to `llvm`

I ran clang-tidy --fix and clang-format on the whole moved files (last two commits), as they are basically new files and should hold up to the code style used by LLVM.

MLIR LSP servers where updated to include these files from their new location and account for the namespace change.

This PR is made as part of the LLVM IR LSP project ([RFC](https://discourse.llvm.org/t/rfc-ir-visualization-with-vs-code-extension-using-an-lsp-server/87773))",2025-08-27T07:58:30Z,2025-09-09T15:46:48Z,2025-09-09T10:02:45Z,2025-09-09T10:02:45Z,True,11,32,16,2408,2231,46
155569,closed,"[libc][math][c++23] Add scalb{,l}nbf16 math functions",krishna2803,"This PR adds the following basic math functions for BFloat16 type along with the tests:
- scalbnbf16
- scalblnbf16

",2025-08-27T07:35:00Z,2025-08-28T14:59:06Z,2025-08-28T14:59:03Z,2025-08-28T14:59:03Z,True,2,4,16,222,2,24
155571,closed,"[libc++][C++03] Backport #111127, #112843 and #121620",philnik777,,2025-08-27T07:50:39Z,2025-09-03T06:45:10Z,2025-09-03T06:45:08Z,2025-09-03T06:45:08Z,True,2,0,2,176,180,7
155565,closed,"Reapply ""[libc++] Refactor key extraction for __hash_table and __tree (#154512)""",philnik777,"The original PR has been reverted because of an LLDB test failure. This patch now works around the test failure by simply allowing the new symbols to show up in a stack trace.

This reverts commit 72c04bb882ad70230bce309c3013d9cc2c99e9a7.

Original commit message:

This patch replaces `__can_extract_key` with an overload set to try to extract the key. This simplifies the code, since we don't need to have separate overload sets for the unordered and associative containers. It also allows extending the set of extraction cases more easily, since we have a single place to define how the key is extracted.
",2025-08-27T07:00:25Z,2025-08-27T16:44:01Z,2025-08-27T12:38:14Z,2025-08-27T12:38:14Z,True,2,0,1,309,352,16
155567,closed,"[libc][math][c++23] Add {canonicalize,iscanonical,fdim,copysign,issignaling}bf16 math functions",krishna2803,"This PR adds the following basic math functions for BFloat16 type along with the tests:
- canonicalizebf16
- iscanonicalbf16
- fdimbf16
- copysignbf16
- issignalingbf16",2025-08-27T07:31:32Z,2025-08-27T17:01:20Z,2025-08-27T17:01:18Z,2025-08-27T17:01:18Z,True,1,0,7,496,6,32
155568,closed,"[libc][math][c++23] Add totalorder{,mag}bf16 math functions",krishna2803,"This PR adds the following basic math functions for BFloat16 type along with the tests:
- totalorderbf16
- totalordermagbf16",2025-08-27T07:33:47Z,2025-08-28T14:07:11Z,2025-08-28T14:07:08Z,2025-08-28T14:07:08Z,True,1,1,12,761,32,40
155564,closed,[RISCV] Add SRAW to ComputeNumSignBitsForTargetNode.,topperc,,2025-08-27T06:42:39Z,2025-08-27T16:25:17Z,2025-08-27T16:25:13Z,2025-08-27T16:25:13Z,True,1,4,4,25,4,2
155563,closed,[clang] Make sure EvalInfo pointer isn't null,tbaederr,"It can be null, when called via CheckICE().
Accidentally introduced via #119366

Fixes #155507",2025-08-27T06:32:38Z,2025-08-27T17:07:26Z,2025-08-27T10:55:57Z,2025-08-27T10:55:57Z,True,3,3,1,13,4,2
155560,closed,AMDGPU: Add version of isImmOperandLegal for MCInstrDesc,arsenm,"This avoids the need for a pre-constructed instruction, at least
for the first argument.",2025-08-27T06:19:20Z,2025-09-02T16:18:43Z,2025-09-02T16:18:41Z,2025-09-02T16:18:41Z,True,2,0,4,117,59,5
155559,closed,AMDGPU: Stop special casing aligned VGPR targets in operand folding,arsenm,Perform a register class constraint check when performing the fold,2025-08-27T06:19:18Z,2025-09-02T16:15:27Z,2025-09-02T16:15:25Z,2025-09-02T16:15:25Z,True,2,0,3,96,42,3
155561,closed,Add error check for HeuristicResolver,MythreyaK,"Fixes #155545.

Is probably a bit rough and could use improvements, happy to address any feedback! ",2025-08-27T06:20:07Z,2025-09-02T06:47:10Z,2025-09-02T05:12:08Z,2025-09-02T05:12:08Z,True,7,16,4,39,6,4
155557,closed,"[orc-rt] Add bind_front, a pre-c++-20 std::bind_front substitute.",lhames,"This can be used until the ORC runtime is able to move to c++-20.

Also adds a CommonTestUtils header with a utility class, OpCounter, that counts the number of default constructions, copy constructions and assignments, move constructions and assignments, and destructions. This is used to test that orc_rt::bind_front doesn't introduce unnecessary copies / moves.",2025-08-27T06:00:53Z,2025-08-27T06:06:06Z,2025-08-27T06:05:56Z,2025-08-27T06:05:56Z,True,0,0,1,224,0,6
155556,closed,[clangd] Use HeuristicResolver to try to resolve dependent 'auto',HighCommander4,,2025-08-27T05:29:29Z,2025-09-01T06:23:28Z,2025-09-01T06:23:28Z,,False,2,0,3,221,137,13
155554,closed,AMDGPU: Remove unused argument from adjustAllocatableRegClass,arsenm,,2025-08-27T05:19:34Z,2025-08-27T06:00:36Z,2025-08-27T06:00:35Z,2025-08-27T06:00:35Z,True,2,0,1,6,6,1
155553,closed,[llvm] Proofread AliasAnalysis.rst,kazutakahirata,,2025-08-27T05:18:17Z,2025-08-27T15:29:36Z,2025-08-27T15:28:47Z,2025-08-27T15:28:47Z,True,0,0,1,20,20,1
155555,closed,[RISCV] Group Zcf and Zcd instructions and CompressPats together. NFC,topperc,Instead of repeatedly changing Predicates for each instruction.,2025-08-27T05:21:31Z,2025-08-27T06:13:57Z,2025-08-27T06:13:54Z,2025-08-27T06:13:54Z,True,1,0,1,89,103,1
155552,closed,[ARM] Remove an unnecessary cast (NFC),kazutakahirata,"getSUnit() already returns SUnit *.
",2025-08-27T05:18:00Z,2025-08-27T15:29:16Z,2025-08-27T15:28:40Z,2025-08-27T15:28:39Z,True,1,0,1,1,1,1
155551,closed,[ADT] Implement DenseSetImpl::contains in terms of DenseMap::contains (NFC),kazutakahirata,"DenseSetImpl::contains can directly use DenseMap::contains.

While I am at it, this patch moves count() immediately after
contains() and annotates both functions with [[nodiscard].
",2025-08-27T05:17:41Z,2025-08-27T15:28:57Z,2025-08-27T15:28:32Z,2025-08-27T15:28:32Z,True,1,0,1,7,5,1
155549,closed,[ADT] Refactor DenseMapInfo for integer types (NFC),kazutakahirata,"This patch consolidates DenseMapInfo<T> for integer types T with a
common templated implementation.  DenseMapInfo<char> is excluded
because it uses ~0 for the empty key despite char being a signed type.
Also, we preserve the tombstone key value for long, which is:

  std::numeric_limits<long>::max() - 1
",2025-08-27T05:16:49Z,2025-08-29T13:08:12Z,2025-08-28T00:06:51Z,2025-08-28T00:06:51Z,True,7,6,2,22,111,1
155550,closed,[ADT] Inline InsertIntoBucket and InsertIntoBucketWithLookup into their callers (NFC),kazutakahirata,"InsertIntoBucket and InsertIntoBucketWithLookup each has exactly one
caller.  This patch inlines them into their respective sole callers,
reducing the line count.

While we are at it, this patch renames InsertIntoBucketImpl to
findBucketForInsertion to better reflect its purpose now that
InsertIntoBucket is being removed.
",2025-08-27T05:17:21Z,2025-08-27T15:28:45Z,2025-08-27T15:28:23Z,2025-08-27T15:28:23Z,True,1,0,1,8,25,1
155548,closed,[clang][Sema] Shard out SemaTests into their own binary,HighCommander4,,2025-08-27T04:29:20Z,2025-08-29T06:13:17Z,2025-08-29T06:13:17Z,2025-08-29T06:13:17Z,True,4,2,2,5,1,1
155541,closed,"[RISCV] Lower (setugt X, 2047) as (setne (srl X, 11), 0)",topperc,"This matches 4095 and other pow2-1 constants larger simm12. We normally do this through a DAGCombine controlled by isLegalICmpImmediate. 2047 is considered a legal immediate because we have a setult instruction. In this case we have setugt which isn't natively supported.

I added tests for 4095 for comparison.",2025-08-27T02:20:12Z,2025-08-27T06:05:45Z,2025-08-27T06:05:42Z,2025-08-27T06:05:42Z,True,1,0,1,49,14,3
155546,closed,[LV][AArch64] Prefer epilogue with fixed-width over scalable VF in case of equal costs.,hassnaaHamdi,"For cases like post-LTO vectorization, epilogue with fixed-width VF 
can be removed when we eventually know that the trip count is less 
than the epilogue iterations.
",2025-08-27T04:17:25Z,2025-09-04T18:31:31Z,2025-09-04T18:31:31Z,2025-09-04T18:31:31Z,True,1,11,4,492,381,12
155542,closed,[Headers][X86] VisitCallExpr constexpr immediate shifts (#154293),Arghnews,"Fixes #154293 

Implement VectorExprEvaluator::VisitCallExpr constexpr support for left, right, arithmetic shift for MMX/SSE/AVX2/AVX512 intrinsics

_mm*_slli_epi*
_mm*_srli_epi*
_mm*_srai_epi*
_mm*_mask_slli_epi*
_mm*_maskz_slli_epi*

NOTE: not all intrinsics have all widths i.e.
_mm_srli_pi32 doesn't have pi64 etc.

Let me know any other feedback as it stands, thanks

Implements (full list):
```
_mm256_mask_slli_epi16
_mm256_mask_slli_epi32
_mm256_mask_slli_epi64
_mm256_mask_srai_epi16
_mm256_mask_srai_epi32
_mm256_mask_srai_epi64
_mm256_mask_srli_epi16
_mm256_mask_srli_epi32
_mm256_mask_srli_epi64
_mm256_maskz_slli_epi16
_mm256_maskz_slli_epi32
_mm256_maskz_slli_epi64
_mm256_maskz_srai_epi16
_mm256_maskz_srai_epi32
_mm256_maskz_srai_epi64
_mm256_maskz_srli_epi16
_mm256_maskz_srli_epi32
_mm256_maskz_srli_epi64
_mm256_slli_epi16
_mm256_slli_epi32
_mm256_slli_epi64
_mm256_srai_epi16
_mm256_srai_epi32
_mm256_srai_epi64
_mm256_srli_epi16
_mm256_srli_epi32
_mm256_srli_epi64
_mm512_mask_slli_epi16
_mm512_mask_slli_epi32
_mm512_mask_slli_epi64
_mm512_mask_srai_epi16
_mm512_mask_srai_epi32
_mm512_mask_srai_epi64
_mm512_mask_srli_epi16
_mm512_mask_srli_epi32
_mm512_mask_srli_epi64
_mm512_maskz_slli_epi16
_mm512_maskz_slli_epi32
_mm512_maskz_slli_epi64
_mm512_maskz_srai_epi16
_mm512_maskz_srai_epi32
_mm512_maskz_srai_epi64
_mm512_maskz_srli_epi16
_mm512_maskz_srli_epi32
_mm512_maskz_srli_epi64
_mm512_slli_epi16
_mm512_slli_epi32
_mm512_slli_epi64
_mm512_srai_epi16
_mm512_srai_epi32
_mm512_srai_epi64
_mm512_srli_epi16
_mm512_srli_epi32
_mm512_srli_epi64
_mm_slli_epi16
_mm_slli_epi32
_mm_slli_epi64
_mm_slli_pi16
_mm_slli_pi32
_mm_srai_epi16
_mm_srai_epi32
_mm_srai_epi64
_mm_srai_pi16
_mm_srai_pi32
_mm_srli_epi16
_mm_srli_epi32
_mm_srli_epi64
_mm_srli_pi16
```",2025-08-27T02:54:03Z,2025-08-29T15:01:51Z,2025-08-29T15:01:51Z,2025-08-29T15:01:51Z,True,12,19,2,540,282,18
155539,closed,Emit DW_OP_lit0/1 for constant boolean values,laxmansole,"Backends like NVPTX use -1 to indicate `true` and 0 to indicate `false` for boolean values. Machine instruction `#DBG_VALUE` also uses -1 to indicate a `true` boolean constant.

However, during the DWARF generation, booleans are treated as unsigned variables, and the debug_loc expression, like `DW_OP_lit0; DW_OP_not` is emitted for the `true` value.

This leads to the debugger printing `255` instead of `true` for constant boolean variables.

This change emits `DW_OP_lit1` instead of `DW_OP_lot0; DW_OP_not`.",2025-08-27T02:05:45Z,2025-09-05T16:53:36Z,2025-08-30T09:07:14Z,2025-08-30T09:07:14Z,True,15,0,1,64,2,4
155535,closed,"Revert ""[RISCV][TTI] Implement getAddressComputationCost() in RISCV TTI.""",ElvisWang123,Reverts llvm/llvm-project#149955,2025-08-27T01:11:49Z,2025-08-27T01:54:20Z,2025-08-27T01:54:19Z,2025-08-27T01:54:19Z,True,1,0,1,200,37,5
155534,closed,[CIR] Add initial support for virtual base classes,andykaylor,This adds support for declaring a class with a virtual base class and initializing the vptr in the constructor. This does not yet handle constructors that require a virtual table table (VTT) implicit argument.,2025-08-27T01:11:03Z,2025-08-27T22:40:43Z,2025-08-27T22:40:40Z,2025-08-27T22:40:40Z,True,3,9,4,284,72,8
155536,closed,[flang][acc] Fix the indexing of the reduction combiner for multidimensional static arrays,khaki3,"In the following example of reducing a static 2D array, we have incorrect coordinates for array access in the reduction combiner. This PR reverses the order of the induction variables used for such array indexing. For other cases of static arrays, we reverse the loop order as well so that the innermost loop can handle the innermost dimension.

```Fortran
program main
  implicit none
  integer, parameter :: m = 2
  integer, parameter :: n = 10
  integer :: r(n,m), i

  r = 0

  !$acc parallel loop reduction(+:r(:n,:m))
  do i = 1, n
     r(i, 1) = i
  enddo

  print *, r
end program main
```

Currently, we have:
```mlir
fir.do_loop %arg2 = %c0 to %c1 step %c1 {
  fir.do_loop %arg3 = %c0 to %c9 step %c1 {
    %0 = fir.coordinate_of %arg0, %arg2, %arg3 : (!fir.ref<!fir.array<10x2xi32>>, index, index) -> !fir.ref<i32>
    %1 = fir.coordinate_of %arg1, %arg2, %arg3 : (!fir.ref<!fir.array<10x2xi32>>, index, index) -> !fir.ref<i32>
```

We'll obtain:
```mlir
fir.do_loop %arg2 = %c0 to %c1 step %c1 {
  fir.do_loop %arg3 = %c0 to %c9 step %c1 {
    %0 = fir.coordinate_of %arg0, %arg3, %arg2 : (!fir.ref<!fir.array<10x2xi32>>, index, index) -> !fir.ref<i32>
    %1 = fir.coordinate_of %arg1, %arg3, %arg2 : (!fir.ref<!fir.array<10x2xi32>>, index, index) -> !fir.ref<i32>
```",2025-08-27T01:27:40Z,2025-08-27T04:26:59Z,2025-08-27T04:26:58Z,2025-08-27T04:26:58Z,True,2,0,1,32,30,3
155533,closed,"Revert ""[SimplifyCFG] Avoid threading for loop headers""",alexfh,"Reverts llvm/llvm-project#151142

#151142  triggers a crash in the `vector-combine` pass - https://github.com/llvm/llvm-project/pull/151142#issuecomment-3225370210.",2025-08-27T01:04:16Z,2025-08-27T14:28:34Z,2025-08-27T14:28:33Z,,False,3,0,1,14,80,7
155524,closed,[RISCV] Improve some debug messages from RISCVVLOptimizer. NFC,topperc,Add a MI instruction to the unsupported message. Add message for VL not dominating. Making identation more consistent for the abort messages in this function. Remove new line since printing a MachineInstr already adds a new line.,2025-08-27T00:07:00Z,2025-08-28T03:11:14Z,2025-08-28T03:11:11Z,2025-08-28T03:11:11Z,True,2,0,2,11,8,1
155526,closed,[MLIR][diag] Add PassManager option to emit failed pass name,Cubevoid,This patch adds an option to `PassManager` which simply controls whether an error will be emitted when a pass in the pipeline fails. This error includes the name of the pass that failed which could be very helpful for debugging.,2025-08-27T00:10:02Z,2025-09-03T16:36:10Z,2025-09-03T16:36:10Z,,False,12,0,1,74,22,6
155525,closed,[BOLT][test] Fix 'veneer-lld-abs' test execution on Windows host,vvereschaka,The `\$d` escaping sequence is not working properly on the Windows host. Replacing it with `'$d'` fixes the problem and works fine on both Windows and Linux hosts.,2025-08-27T00:07:04Z,2025-08-27T21:03:50Z,2025-08-27T18:50:37Z,2025-08-27T18:50:37Z,True,1,0,1,1,1,1
155522,closed,[BOLT][test] Fix 'dump-dot-func' test execution on Windows host,vvereschaka,"Replaced non-existent %clang++ substitute with %clangxx. %clang++ gets became `clang.exe++` on the Windows host that failures the test execution.

",2025-08-26T23:57:51Z,2025-08-27T21:04:00Z,2025-08-27T18:50:27Z,2025-08-27T18:50:27Z,True,1,0,1,1,1,1
155519,closed,[CI] Strip strings from filenames in compute_projects.py,boomanaiden154,"This can otherwise mess up some of the path detection logic, particularly around ensuring the premerge checks are run when the workflow YAML file is changed.",2025-08-26T23:40:12Z,2025-08-27T00:36:08Z,2025-08-27T00:36:05Z,2025-08-27T00:36:05Z,True,0,0,1,2,1,1
155521,closed,[DirectX][ObectYAML] Make `RootParameterOffset` and `StaticSamplersOffset` behaviour consistent,inbelic,"This pr fixes some inconsistencies in behaviour of how we handle `StaticSamplersOffset` with respect to DXC and `RootParameterOffset`. Namely:

1. Make codegen of `RTS0` always compute the `StaticSamplersOffset` regardless if there are any `StaticSampler`s. This is to be consistent and produce an identical `DXContainer` as DXC.
2. Make the `StaticSamplersOffset` and `RootParametersOffset` optional parameters in the yaml description. This means it will be used when it is specified (which was not necassarily the case before).
3. Enforce that the provided `StaticSamplersOffset` and `RootParametersOffset` in a yaml description match the computed value.

For more context see: https://github.com/llvm/llvm-project/issues/155299.

Description of existing test updates updates:
- `CodeGen/DirectX/ContainerData`: Updated to codegen computed values (previously unspecified)
- `llvm-objcopy/DXContainer`: Updated to `yaml2obj` computed values (previously unspecified)
- `ObjectYAML/DXContainer`: Updated to `yaml2obj` computed values (previously incorrect)
- `ObjectYAML/DXContainerYAMLTest`: Updated to `yaml2obj` computed values (previously incorrect)

See newly added tests for testing of optional parameter functionality and `StaticSamplersOffset` computation.

Resolves: https://github.com/llvm/llvm-project/issues/155299",2025-08-26T23:43:36Z,2025-08-29T06:56:25Z,2025-08-27T18:53:37Z,2025-08-27T18:53:37Z,True,4,4,12,349,89,28
155520,closed,"Reapply ""[CI] Save sccache logs (#155444)""",boomanaiden154,"This reverts commit b90f4ff3020c6fe018ec22b22a7faa5541ed5372.

Relands the change after making the relevant fixes (not missing the `artifacts` directory).",2025-08-26T23:42:04Z,2025-08-27T02:06:02Z,2025-08-27T02:05:59Z,2025-08-27T02:05:59Z,True,1,0,3,3,2,1
155518,closed,AMDGPU: Remove special case of SGPR_LO class in imm folding,arsenm,"Previous change accidentally broke this which shows it's not
doing anything.",2025-08-26T23:28:06Z,2025-08-27T06:08:39Z,2025-08-27T06:08:38Z,2025-08-27T06:08:38Z,True,2,0,1,0,8,1
155516,closed,[NFC][IR2Vec] Add usage documentation for obtaining embeddings,svkeerthy,,2025-08-26T23:26:40Z,2025-09-04T19:42:13Z,2025-09-04T19:42:11Z,2025-09-04T19:42:11Z,True,4,1,1,6,0,1
155515,closed,"Reapply ""[AMDGPU] gfx1250 trans instructions bf16 codegen tests update. NFC (#155310)""",arsenm,"This reverts commit 665da0a1649814471739c41a702e0e9447316b20.

Regenerate checks after 445415219708f9539801018e03282049ca33e0e2 landed
after adding these tests.",2025-08-26T23:24:43Z,2025-08-27T00:13:36Z,2025-08-27T00:13:34Z,2025-08-27T00:13:34Z,True,3,0,1,100,0,3
155514,closed,[fuzzer][Fuchsia] Forward fix for undefined StartRssThread,PiJoules,The declaration was static when it shouldn't be since it can be defined in FuzzerUtilFuchsia.cpp,2025-08-26T23:01:46Z,2025-08-26T23:09:02Z,2025-08-26T23:08:55Z,2025-08-26T23:08:55Z,True,1,0,1,2,2,1
155513,closed,release/21.x: [clang][PAC] Fix builtins that claim address discriminated types are bitwise compatible (#154490) ,ojhunt,"Backporting https://github.com/llvm/llvm-project/commit/d66b53738a29fb3a0551167efcb8d35320a539b7

Cherry-picked d66b53 with fixes to avoid ABI breakage.

A number of builtins report some variation of ""this type is compatibile with some bitwise equivalent operation"", but this is not true for address discriminated values. We had address a number of cases, but not all of them. This PR corrects the remaining builtins.

Fixes #154394",2025-08-26T23:01:33Z,2025-09-03T10:24:07Z,2025-09-03T10:24:06Z,2025-09-03T10:24:06Z,True,1,0,1,440,9,9
155510,closed,[clang] Fix clang module build by declaring new textual header,cachemeifyoucan,"Add `clang/Basic/ABIVersions.def` introduced in #151995 to textual header
to fix clang module build.
",2025-08-26T22:29:45Z,2025-08-26T22:51:45Z,2025-08-26T22:51:44Z,2025-08-26T22:51:44Z,True,1,0,1,1,0,1
155511,closed,[clang-doc] lower filename length limit by 5,evelez7,"The previous limit did not take into account filename extensions. Since
the extensions we use (.yaml, .json, .html, .md) are at most 5
characters, we can lower the limit by 5.

Also add some tests to make sure the rules are observed and don't
explicitly crash clang-doc.",2025-08-26T22:33:12Z,2025-08-27T15:01:48Z,2025-08-27T15:01:46Z,2025-08-27T15:01:46Z,True,4,1,1,17,1,2
155508,closed,[Flang] Fix symbol name clash when dummy procedure name is the same as common-block-name,ceseo,"Dummy procedures in interface blocks are not external procedures that need to be linked. Do not externalize those.

Fixes #122822",2025-08-26T22:13:13Z,2025-09-03T18:51:24Z,2025-09-03T18:51:24Z,2025-09-03T18:51:24Z,True,6,10,1,49,0,2
155509,closed,[Offload] Update LIBOMPTARGET_INFO text for `attach` map-type.,abhinavgaba,Also adds two debug dumps regarding pointer-attachment.,2025-08-26T22:16:50Z,2025-08-28T13:48:52Z,2025-08-28T13:48:43Z,2025-08-28T13:48:43Z,True,1,0,1,14,1,2
155506,closed,[clang] Fix crash when `__builtin_function_start` is given an invalid first parameter,Mr-Anyone,"Prevent a crash in `__builtin_function_start` by adding a check for an invalid first parameter.

fixes #113323",2025-08-26T21:53:42Z,2025-08-28T20:25:56Z,2025-08-28T20:25:55Z,2025-08-28T20:25:55Z,True,3,1,2,11,0,3
155505,closed,[ASAN][AArch64] Asan crash fix for scalable types.,DanielKristofKiss,Asan doesn't support scalable types yet. Compiler crashes when alloca's size comes from a scalable type.,2025-08-26T21:44:48Z,2025-08-27T12:02:39Z,2025-08-27T12:02:28Z,,False,5,0,1,14,0,2
155504,closed,[flang][openacc] Only generate acc.terminator in compute construct,clementval,"When the end of a block is inside a data region (not a compute region), generating an `acc.terminator` will lead to a missing terminator when translating to LLVM.

Only generate acc.terminator instead of fir.unreachable when nested in acc compute region. ",2025-08-26T21:42:04Z,2025-08-27T06:31:04Z,2025-08-26T22:04:47Z,2025-08-26T22:04:47Z,True,1,0,1,54,2,2
155502,closed,[ProfCheck] Exclude new LoopVectorize Test,boomanaiden154,,2025-08-26T21:37:22Z,2025-08-26T22:11:30Z,2025-08-26T22:11:30Z,2025-08-26T22:11:30Z,True,0,0,1,1,0,1
155498,closed,[AMDGPU] Do not assert on non-zero COMPUTE_PGM_RSRC3 on gfx1250. NFCI,rampitec,"COMPUTE_PGM_RSRC3 does exist on gfx1250, we are just not using it yet.",2025-08-26T21:02:18Z,2025-08-26T21:42:50Z,2025-08-26T21:42:49Z,2025-08-26T21:42:49Z,True,2,0,1,2,2,1
155496,closed,Parse CFI instructions to create SFrame FREs,Sterling-Augustine,"This PR parses CFI instructions to generate FREs. 

Unfortunately, actually emitting the FREs into the object file is somewhat involved and would make this PR quite a bit harder to review. And the dumper itself properly errors if the FRE count is included in the header or FDEs, but they are not actually emitted. So actually testing that the proper FREs are generated will have to wait for a subsequent PR.

For now, just check for common issues with CFI that sframe doesn't support, and that proper error handling is done.",2025-08-26T20:53:54Z,2025-09-08T21:21:17Z,2025-09-08T21:20:56Z,2025-09-08T21:20:56Z,True,2,25,12,237,10,3
155495,closed,[libc][NFC] Clean up utimes and setsid,michaelrj-google,"Simplify utims a bit and add proper error handling to setsid as
described in the standard
",2025-08-26T20:53:40Z,2025-08-26T23:32:18Z,2025-08-26T23:31:10Z,2025-08-26T23:31:10Z,True,1,0,1,18,12,2
155503,closed,"Revert ""[AArch64] AArch64TargetLowering::computeKnownBitsForTargetNode - add support for AArch64ISD::MOV/MVN constants""",vitalybuka,"Reverts llvm/llvm-project#154039, as it breaks bots.
",2025-08-26T21:40:11Z,2025-08-26T22:09:22Z,2025-08-26T22:09:21Z,2025-08-26T22:09:21Z,True,1,0,1,0,150,2
155493,closed,[AMDGPU] wmma_scale* IR verification,rampitec,,2025-08-26T20:26:17Z,2025-08-26T21:10:22Z,2025-08-26T21:10:20Z,2025-08-26T21:10:20Z,True,2,0,1,127,1,2
155494,closed,[X86] SimplifyDemandedBitsForTargetNode - add handling for VPMADD52L/VPMADD52H,XChy,"Resolves #155387.
The X86ISD::VPMADD52L/VPMADD52H nodes only demand the lower 52 bits of operands 0 / 1.",2025-08-26T20:38:37Z,2025-08-27T11:00:02Z,2025-08-27T10:56:03Z,2025-08-27T10:56:03Z,True,5,7,2,139,0,2
155492,closed,release/21.x: [clang][PAC] Fix builtins that claim address discriminated types are bitwise compatible (#154490),llvmbot,"Backport d66b537

Requested by: @ojhunt",2025-08-26T20:24:55Z,2025-08-26T23:01:54Z,2025-08-26T23:01:54Z,,False,3,6,1,448,16,9
155489,closed,[NVPTX] Auto-upgrade nvvm.grid_constant to param attribute,AlexMaclean,"Upgrade the !""grid_constant"" !nvvm.annotation to a ""nvvm.grid_constant"" attribute. This attribute is much simpler for front-ends to apply and faster and simpler to query.",2025-08-26T20:14:13Z,2025-08-27T23:50:59Z,2025-08-27T23:32:28Z,2025-08-27T23:32:28Z,True,2,0,1,91,240,9
155487,closed,[llvm][CI] Fix libc++ premerge testing metrics collection issue.,cmtice,WIP -- DO NOT REVIEW! DO NOT MERGE!,2025-08-26T20:12:00Z,2025-08-26T20:56:59Z,2025-08-26T20:56:59Z,,False,0,0,3,0,0,0
155486,closed,[CIR] Complex Unary plus and minus with promoted type,AmrDeveloper,"This change adds support for Complex unary plus and minus expressions with promoted type

Issue: https://github.com/llvm/llvm-project/issues/141365",2025-08-26T19:53:27Z,2025-08-29T18:34:13Z,2025-08-29T18:34:13Z,2025-08-29T18:34:13Z,True,2,2,2,139,8,2
155485,closed,[clang][Mangle] Inject structor type into mangled name when mangling for LLDB JIT expressions,Michael137,"Part of https://github.com/llvm/llvm-project/pull/149827

This patch adds special handling for `AsmLabel`s created by LLDB. LLDB uses `AsmLabel`s to encode information about a function declaration to make it easier to locate function symbols when JITing C++ expressions. For constructors/destructors LLDB doesn't know at the time of creating the `AsmLabelAttr` which structor variant the expression evaluator will need to call (this is decided when compiling the expression). So we make the Clang mangler inject this information into our custom label when we're JITting the expression.",2025-08-26T19:53:07Z,2025-09-09T08:08:53Z,2025-09-09T08:08:50Z,2025-09-09T08:08:50Z,True,4,0,4,160,5,3
155482,closed,Remove trailing whitespace in DiagnosticSemaKinds.td. NFC,rampitec,,2025-08-26T19:46:39Z,2025-08-26T20:10:39Z,2025-08-26T20:10:37Z,2025-08-26T20:10:37Z,True,2,0,1,1,1,1
155483,closed,[lldb][CPlusPlusLanguage] Expose ManglingSubstitutor as static helpers,Michael137,"Part of https://github.com/llvm/llvm-project/pull/149827

Allows us to use the mangling substitution facilities in CPlusPlusLanguage but also SymbolFileDWARF.

Added tests now that they're ""public"".",2025-08-26T19:48:48Z,2025-08-27T13:55:27Z,2025-08-27T12:46:39Z,2025-08-27T12:46:39Z,True,1,0,3,434,134,4
155480,closed,[mlir][acc] Add destroy region to reduction recipes,razvanlupusoru,"Reduction recipes capture how a private copy is created. In some languages, like C++ class variables with destructors - that private copy also must be properly destroyed. Thus update the reduction recipe to contain a `destroy` region similarly to the private recipes.",2025-08-26T19:43:52Z,2025-08-26T20:17:46Z,2025-08-26T20:17:46Z,2025-08-26T20:17:46Z,True,3,2,2,74,2,2
155479,closed,[gn build] Disable objc rewriter,aeubanks,This is off by default in the CMake build: https://github.com/llvm/llvm-project/blob/b90f4ff3020c6fe018ec22b22a7faa5541ed5372/clang/CMakeLists.txt#L441,2025-08-26T19:43:31Z,2025-08-26T19:55:34Z,2025-08-26T19:47:20Z,2025-08-26T19:47:20Z,True,0,0,1,2,2,2
155477,closed,[Frontend][OpenMP] Move isPrivatizingConstruct from flang,kparzysz,"The check of whether a construct can privatize is a general utility, not dependent on language-specific definitions.",2025-08-26T19:34:29Z,2025-08-27T13:22:00Z,2025-08-27T13:21:58Z,2025-08-27T13:21:58Z,True,1,0,2,41,39,3
155478,closed,[AMDGCN] Add missing gfx1250 clang tests. NFC.,rampitec,,2025-08-26T19:41:08Z,2025-08-26T20:10:15Z,2025-08-26T20:10:13Z,2025-08-26T20:10:13Z,True,3,0,1,239,1,5
155476,closed,[libc++] Fix broken precondition of __bit_log2,ldionne,"In #135303, we started using `__bit_log2` instead of `__log2i` inside `std::sort`. However, `__bit_log2` has a precondition that `__log2i` didn't have, which is that the input is non-zero. While it technically makes no sense to request the logarithm of 0, `__log2i` handled that case and returned 0 without issues.

After switching to `__bit_log2`, passing 0 as an input results in an unsigned integer overflow which can trigger `-fsanitize=unsigned-integer-overflow`. While not technically UB in itself, it's clearly not intended either.

To fix this, we add an internal assertion to `__bit_log2` which catches the issue in our test suite, and we make sure not to violate `__bit_log2`'s preconditions before we call it from `std::sort`.",2025-08-26T19:33:14Z,2025-08-29T07:46:31Z,2025-08-28T22:07:59Z,2025-08-28T22:07:59Z,True,6,2,3,8,0,3
155473,closed,[flang] Extend error checking for implicit interfaces,klausler,"When an external procedure is called by means of an implicit interface that turns out to be different in a significant way from the actual interface in its definition elsewhere in the source file, we emit an error message.  This works for differences in actual vs dummy arguments, and for the result types of previously declared functions. This patch adds checking for differences between implicitly typed external function references and their actual declared types when the function's definition appears later.",2025-08-26T19:17:29Z,2025-08-29T14:49:15Z,2025-08-29T14:49:10Z,2025-08-29T14:49:09Z,True,1,0,1,81,17,2
155474,closed,[mlir] Consistently add TableGen generated files as deps to `mlir-headers`/`mlir-generic-headers` CMake targets,Technius,"Tool targets like `mlir-opt` rely on the `mlir-headers` or
`mlir-generic-headers` targets to run first to generate headers. However, many
of the `IncGen` targets are not specified as dependencies of the header targets
in CMake, which causes spurious build failures when using a high number of
parallel build jobs.

Thus, this commit introduces a pair of new CMake macros
`add_mlir_dialect_tablegen_target` and `add_mlir_generic_tablegen_target` to
`AddMLIR.cmake`, which can be used in place of `add_public_tablegen_target` to
ensure (by convention) that `IncGen` targets are added to the `mlir-headers`
(resp. `mlir-generic-headers`) target dependencies.

Most uses of `add_public_tablegen_target` in the dialects have been refactored
to use the new macros.",2025-08-26T19:30:39Z,2025-08-31T19:24:27Z,2025-08-27T08:40:48Z,2025-08-27T08:40:48Z,True,14,4,3,177,222,89
155471,closed,[RISCV] Account for ADDI immediate range in select of two constants w/ zicond,preames,"When choosing to materialize a select of two constants using zicond, we have a choice of which direction to compute the delta.  The prior cost was looking only at the cost of the values without accounting for the fact it's actually the delta which is the highest cost and that sometimes the addend can fold into an addi.",2025-08-26T19:10:33Z,2025-08-27T13:58:31Z,2025-08-27T13:58:27Z,2025-08-27T13:58:27Z,True,1,4,4,18,13,2
155469,closed,[CIR][NFC] Add errors for unhandled AggExprEmitter visitors,andykaylor,"There are a lot of required handlers in AggExprEmitter that are currently missing. Because the ASTVisitor has fallbacks, this means we just silently ignore whatever expressions are not explicitly handled. This patch adds handlers where we know they will be needed and just issues a diagnostic.

This exposed failures in a few tests. In one case, we should have handled constant initialization earlier, which would have avoided going to the AggExprEmitter at all. I added a stub with a missing feature marker to allow that case to work as it had. Another test required us to ignore cast expressions that should be ignored, so I partially implemented the cast visitor. Finally, there's a case where the test was just accepting a bad result. I changed that case to XFAIL until it can be properly fixed.",2025-08-26T18:40:52Z,2025-08-27T19:54:11Z,2025-08-27T19:54:08Z,2025-08-27T19:54:08Z,True,2,0,2,207,1,4
155467,closed,[RISCV][VLOPT] Support segmented store instructions,mshockwave,"Add RISCVVLOptimizer supported for unit-stride, strided, and indexed strided segmented stores. The biggest change was adding the capability to look through INSERT_SUBREG, which was used for composing segmented register class values.

Fix #149350 

-----

I was going to roll out the segmented load support -- reducing segmented load's VL from its users -- first. But Craig pointed out that it's less likely for vectorizer to generate sub-optimal VL on loads since memory operations should generally be the source of truth when it comes to VL. That being said, if anyone saw cases like that for segmented load please let me know. ",2025-08-26T18:31:08Z,2025-09-04T20:07:19Z,2025-09-04T19:35:36Z,2025-09-04T19:35:36Z,True,2,26,9,390,13,6
155464,closed,[NFC][ARM][MC] Rearrange decoder functions 2/N,jurahul,"Move some of the non-static-decode functions to the end of the file. Note: moving `ARMDisassembler::AddThumbPredicate` the same way causes the diff to be non-trivial, so not doing that here. ",2025-08-26T18:13:14Z,2025-08-31T12:23:08Z,2025-08-31T12:20:41Z,2025-08-31T12:20:41Z,True,8,0,2,254,254,1
155466,closed,release/21.x: [clang-format] Use proper flags for git diff-tree (#155247),llvmbot,"Backport f09986aab575b41e2e210d937a46dfce82eceebc

Requested by: @boomanaiden154",2025-08-26T18:22:53Z,2025-09-03T10:25:15Z,2025-09-03T10:24:39Z,2025-09-03T10:24:39Z,True,3,0,1,1,1,1
155462,closed,[llvm-lto2] Added llvm-lto2 -unified-lto descriptions (revised),fnriv,"This is a revised PR of #148309 (closed due to some git issues). The changes do the following:

- Adds description for the modes of `-unified-lto=mode` option
- Changes parsing of `unified-lto` descriptions from string to cEnumValN for continuity of description formatting
- Adds testing of error output in `unified-lto-check.ll`

",2025-08-26T18:04:43Z,2025-09-10T16:00:40Z,2025-09-10T16:00:14Z,2025-09-10T16:00:14Z,True,7,0,5,25,16,2
155461,closed,[flang] Lower hlfir.cmpchar into inline implementation in simplify-hlfir-intrinsics,valerydmit,,2025-08-26T18:01:41Z,2025-09-08T23:00:14Z,2025-08-27T17:58:48Z,2025-08-27T17:58:48Z,True,4,2,2,817,1,2
155460,closed,[lldb] Adding structured types for existing MCP calls.,ashgti,"This adds or renames existing types to match the names of the types on https://modelcontextprotocol.io/specification/2025-06-18/schema for the existing calls.

The new types are used in the unit tests and server implementation to remove the need for crafting various `llvm::json::Object` values by hand.",2025-08-26T17:59:18Z,2025-08-26T22:09:44Z,2025-08-26T22:09:37Z,2025-08-26T22:09:37Z,True,2,4,4,529,261,13
155463,closed,"[clang] NFC: introduce Type::getAsEnumDecl, and cast variants for all TagDecls",mizvekov,"And make use of those.

These changes are split from prior PR #155028, in order to decrease the size of that PR and facilitate review.",2025-08-26T18:10:17Z,2025-08-26T19:06:02Z,2025-08-26T19:06:00Z,2025-08-26T19:05:59Z,True,7,0,1,430,820,91
155457,closed,[flang] Add definition of hlfir.cmpchar operation.,valerydmit,"Fortran character comparison now lowered early into a runtime call. It is going to be lowered into the operation, so that later it could be optimized as inline code or end up into a runtime call.",2025-08-26T17:53:09Z,2025-09-08T23:00:06Z,2025-08-27T17:08:49Z,2025-08-27T17:08:49Z,True,3,5,3,65,0,3
155455,closed,[DAG] ComputeNumSignBits - ISD::EXTRACT_ELEMENT needs to return at least 1,Saldivarcher,"When going through the ISD::EXTRACT_ELEMENT case, `KnownSign - rIndex * BitWidth`
could produce a negative. When a negative is produced, the lower bound
of the `std::clamp` is returned. Change that lower bound to one to avoid
potential underflows, because the expectation is that `ComputeNumSignBits`
should always return at least 1.

Fixes #155452.",2025-08-26T17:49:23Z,2025-08-26T21:28:02Z,2025-08-26T21:28:02Z,2025-08-26T21:28:02Z,True,4,0,1,85,1,2
155456,closed,[NFC][MC][XCore] Eliminate forward decls by rearranging functions,jurahul,,2025-08-26T17:49:35Z,2025-08-26T23:36:29Z,2025-08-26T23:36:26Z,2025-08-26T23:36:26Z,True,2,0,1,110,140,1
155458,closed,[flang] Replace lowering of character compare.,valerydmit,"Lower character comparison into hlfir.cmpchar operation and
then lower the operation into a runtime call at intrinsic lowering.
",2025-08-26T17:56:53Z,2025-09-08T23:00:11Z,2025-08-27T17:55:42Z,2025-08-27T17:55:42Z,True,4,1,2,292,37,7
155454,closed,[NFC][WPD] code style fixes,mtrofin,,2025-08-26T17:47:46Z,2025-08-26T19:37:14Z,2025-08-26T19:37:11Z,2025-08-26T19:37:11Z,True,3,0,1,48,48,1
155448,closed,[CodeGen] Optimize/simplify finalizeBundle. NFC,bjope,"When tracking defs in finalizeBundle two sets are used. LocalDefs is used to track defined virtual and physical registers, while LocalDefsP is used to track defined register units for the physical registers.

This patch moves the updates of LocalDefsP to only iterate over regunits when a new physical register is added to LocalDefs. When the physical register already is present in LocalDefs, then the corresponding register units are present in LocalDefsP. So it was a waste of time to add them to the set again.",2025-08-26T17:12:41Z,2025-08-27T07:06:32Z,2025-08-27T06:54:03Z,2025-08-27T06:54:03Z,True,1,0,1,3,5,1
155447,closed,[NFC][Asan] Fix warning in test,vitalybuka,"After #150028.

Warning:
```
asan_test.cpp:398:27: error: allocation of insufficient size '0' for type 'int' with size '4'
```",2025-08-26T16:53:23Z,2025-08-26T18:04:00Z,2025-08-26T18:03:59Z,2025-08-26T18:03:59Z,True,3,0,5,2,4,1
155445,closed,[NFC][DirectX] Fix variable set but not used warning,jurahul,,2025-08-26T16:34:18Z,2025-08-26T17:25:10Z,2025-08-26T17:25:06Z,2025-08-26T17:25:06Z,True,1,0,1,1,1,1
155444,closed,[CI] Save sccache logs,boomanaiden154,"This patch saves the sccache logs to the artifacts. If sccache dies and the server prints logs, we currently do not collect them anywhere and they do not get dumped to STDOUT/STDERR. If the process is directly getting killed (SIGTERM), it seems like it doesn't dump anything, but in most other cases we should be able to see something.

Related to #155442.",2025-08-26T16:15:18Z,2025-08-26T18:05:35Z,2025-08-26T18:05:32Z,2025-08-26T18:05:32Z,True,1,0,1,2,2,1
155437,closed,[LV] Always emit branch weights for vector epilogue,david-arm,"We currently only emit the branch weights for the epilogue
iteration count check if there was already branch weight
data for the scalar loop. However, the code makes no use
of the existing branch weight when estimating the
likelihood of taking a particular branch and so we can
just always add the branch weights regardless. These
hints should hopefully improve code generation.",2025-08-26T15:46:27Z,2025-09-02T09:15:21Z,2025-09-02T09:15:21Z,2025-09-02T09:15:21Z,True,9,0,2,127,15,2
155440,closed,[Flang-RT][OpenMP] Define _GLIBCXX_NO_ASSERTIONS,Meinersbur,"Since GCC 15.1, libstdc++ enabled assertions/hardening by default in non-optimized (-O0) builds [1]. That is, _GLIBCXX_ASSERTIONS is defined in the libstdc++ headers itself so defining/undefining it on the compiler command line no longer has an effect in non-optimized builds. As the commit message[2] suggests, define _GLIBCXX_NO_ASSERTIONS instead.

For libstdc++ headers before 15.1, -U_GLIBCXX_ASSERTIONS still has to be on the command line as well.

Defining _GLIBCXX_NO_ASSERTIONS was previously proposed in #152223

[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=112808
[2] https://github.com/gcc-mirror/gcc/commit/361d230fd7800a7e749aba8ed020f54f5c26d504",2025-08-26T15:58:12Z,2025-08-27T08:10:49Z,2025-08-27T08:10:49Z,2025-08-27T08:10:48Z,True,0,2,1,2,0,2
155441,closed,[NFC][DirectX] Fix build failure,jurahul,"Add `BinaryFormat` to `LINK_COMPONENTS` to fix the following linker error:

```
ld.lld: error: undefined symbol: llvm::dxbc::getRootParameterTypes()
>>> referenced by DXILRootSignature.cpp
>>>               lib/Target/DirectX/CMakeFiles/LLVMDirectXCodeGen.dir/DXILRootSignature.cpp.o:(llvm::dxil::RootSignatureAnalysisPrinter::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&))

ld.lld: error: undefined symbol: llvm::dxbc::getShaderVisibility()
>>> referenced by DXILRootSignature.cpp
>>>               lib/Target/DirectX/CMakeFiles/LLVMDirectXCodeGen.dir/DXILRootSignature.cpp.o:(llvm::dxil::RootSignatureAnalysisPrinter::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&))
>>> referenced by DXILRootSignature.cpp
>>>               lib/Target/DirectX/CMakeFiles/LLVMDirectXCodeGen.dir/DXILRootSignature.cpp.o:(llvm::dxil::RootSignatureAnalysisPrinter::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&))
```

Root cause: https://github.com/llvm/llvm-project/pull/154249 changed a header-only dependency to a real dependency without noticing that the dependency was missing in CMakeLists.txt",2025-08-26T16:00:33Z,2025-08-26T18:15:30Z,2025-08-26T18:15:25Z,2025-08-26T18:15:25Z,True,4,0,1,1,0,1
155435,closed,[MLIR][NVVM] Update TMA Store Op,durga4github,"This patch includes im2col and scatter mode
support to the TMA Store Op. The lowering is
also updated to intrinsics except when Predicate
is given. This completes the Blackwell additions
on this Op.

* lit tests are added for all combinations.
* Move the TMA reduce invalid tests to their own file.",2025-08-26T15:30:02Z,2025-08-29T05:57:23Z,2025-08-29T05:57:18Z,2025-08-29T05:57:18Z,True,2,3,1,301,59,8
155433,closed,[OpenMP][ompTest] Guard installation of all components,mhalk,"Make installation of ompTest optional via:
-DLIBOMPTEST_INSTALL_COMPONENTS=ON (default: OFF)",2025-08-26T15:16:26Z,2025-08-28T11:28:55Z,2025-08-27T12:09:17Z,2025-08-27T12:09:17Z,True,2,2,1,33,25,1
155434,closed,[X86][NFC] Moved/Updated llvm.set.rounding testcases,JaydeepChauhan14,"- Moved **llvm.set.rounding** testcases from **llvm/test/CodeGen/X86/fpenv.ll** to **llvm/test/CodeGen/X86/isel-llvm.set.rounding.ll**.
- Added GlobalIsel RUNs as precommit test and will add llvm.set.rounding GISEL implementation PR after this merge.",2025-08-26T15:19:27Z,2025-09-03T04:32:16Z,2025-09-02T16:54:34Z,2025-09-02T16:54:34Z,True,3,5,6,294,238,2
155429,closed,[flang] optimize `sind` precision,c8ef,Part of https://github.com/llvm/llvm-project/issues/150452.,2025-08-26T14:54:29Z,2025-08-26T17:52:24Z,2025-08-26T17:52:21Z,2025-08-26T17:52:21Z,True,1,0,1,17,6,2
155428,closed,AMDGPU: Fold mov imm to copy to av_32 class,arsenm,"Previously we had special case folding into copies to AGPR_32,
ignoring AV_32. Try folding into the pseudos.

Not sure why the true16 case regressed.",2025-08-26T14:52:19Z,2025-08-27T02:13:16Z,2025-08-27T02:13:14Z,2025-08-27T02:13:14Z,True,2,2,3,411,134,7
155427,closed,[DAGCombiner] Avoid double deletion when replacing multiple frozen/unfrozen uses,dtcxzyw,"Closes https://github.com/llvm/llvm-project/issues/155345.
In the original case, we have one frozen use and two unfrozen uses:
```
t73: i8 = select t81, Constant:i8<0>, t18
t75: i8 = select t10, t18, t73
t59: i8 = freeze t18 (combining)

t80: i8 = freeze t59 (another user of t59)
```

In `DAGCombiner::visitFREEZE`, we replace all uses of `t18` with `t59`.
After updating the uses, `t59: i8 = freeze t18` will be updated to `t59: i8 = freeze t59` (`AddModifiedNodeToCSEMaps`) and CSEed into `t80: i8 = freeze t59` (`ReplaceAllUsesWith`). As the previous call to `AddModifiedNodeToCSEMaps` already removed `t59` from the CSE map, `ReplaceAllUsesWith` cannot remove `t59` again.

For clarity, see the following call graph:
```
ReplaceAllUsesOfValueWith(t18, t59)
  ReplaceAllUsesWith(t18, t59)
    RemoveNodeFromCSEMaps(t73)
    update t73
    AddModifiedNodeToCSEMaps(t73)
    RemoveNodeFromCSEMaps(t75)
    update t75
    AddModifiedNodeToCSEMaps(t75)
    RemoveNodeFromCSEMaps(t59) <- first delection
    update t59
    AddModifiedNodeToCSEMaps(t59)
        ReplaceAllUsesWith(t59, t80)
            RemoveNodeFromCSEMaps(t59) <- second delection
                Boom!
```

This patch unfreezes all the uses first to avoid triggering CSE when introducing cycles.
I once attempted to avoid introducing cycles by temporarily setting the operand of N to a fake SDValue (e.g., poison). But I find it hard to bypass CSE as these SelectionDAG APIs are private.

",2025-08-26T14:48:32Z,2025-08-27T03:21:24Z,2025-08-27T03:21:23Z,2025-08-27T03:21:23Z,True,3,0,1,185,138,3
155426,closed,[openmp][NFC] Fix a warning when built with clang,c8ef,"```
/root/llvm-project/openmp/tools/omptest/src/OmptAssertEvent.cpp:27:3: warning: default label in switch which covers all enumeration values [-Wcovered-switch-default]
   27 |   default:
      |   ^
1 warning generated.
```",2025-08-26T14:45:05Z,2025-08-26T15:04:46Z,2025-08-26T15:04:40Z,,False,2,0,1,0,3,1
155424,closed,[flang][OpenMP] Analyze objects in OmpObjectList on clauses,kparzysz,"This is intended to diagnose errors such as incorrect uses of assumed-size arrays, for example.

Fixes https://github.com/llvm/llvm-project/issues/151990",2025-08-26T14:29:55Z,2025-08-27T12:32:32Z,2025-08-27T12:32:22Z,2025-08-27T12:32:22Z,True,1,0,1,77,7,7
155422,closed,[Flang] Fix BUILD_SHARED_LIBS build,Meinersbur,"In contrast to linking a static library, when linking a shared library all referenced symbols must be available in either the objects files, static libraries, or shared libraries passed to the linker command line and cannot be deferred to when building the executable.

We have buildbots that build with BUILD_SHARED_LIBS=ON such that new link symbol dependencies (e.g. by a new call of a non-inlined function from a header of another component) are detected post-commit, but we don't seem to have any for Flang, which means such build breakages may go unnoticed.

Fixes #150027

Same fix as included in #152223, but with only the changes necessary to fix #150027 (which is unrelated with GCC 15)",2025-08-26T14:26:21Z,2025-08-28T13:06:01Z,2025-08-26T19:09:34Z,2025-08-26T19:09:34Z,True,4,0,1,3,0,2
155423,closed,"Revert ""[llvm-exegesis] Implement the loop repetition mode for AArch64""",sjoerdmeijer,"I see some build bot failures:
- https://lab.llvm.org/buildbot/#/builders/76/builds/12434/steps/4/logs/stdio
- https://lab.llvm.org/buildbot/#/builders/55/builds/16251

Reverts llvm/llvm-project#154751 while I investigate this.",2025-08-26T14:26:46Z,2025-08-26T14:30:32Z,2025-08-26T14:30:30Z,2025-08-26T14:30:30Z,True,1,0,1,0,47,2
155419,closed,[libc++] Remove zero size branch from memmove,philnik777,"This can significantly reduce the generated code, since it avoids a branch the optimizer has to see through. At least with our benchmarks there isn't a significant change in performance. There might be a bit of an improvement, but it's inconclusive IMO:
```
--------------------------------------------------------------------------------------------
Benchmark                                                                old             new
--------------------------------------------------------------------------------------------
BM_StringFindNoMatch/10                                              1.48 ns         1.46 ns
BM_StringFindNoMatch/64                                              2.30 ns         2.19 ns
BM_StringFindNoMatch/512                                             9.80 ns         9.62 ns
BM_StringFindNoMatch/4096                                            76.3 ns         74.0 ns
BM_StringFindNoMatch/32768                                            509 ns          496 ns
BM_StringFindNoMatch/131072                                          2038 ns         1998 ns
BM_StringFindAllMatch/1                                              3.51 ns         3.16 ns
BM_StringFindAllMatch/8                                              3.09 ns         2.87 ns
BM_StringFindAllMatch/64                                             3.25 ns         2.97 ns
BM_StringFindAllMatch/512                                            11.7 ns         10.6 ns
BM_StringFindAllMatch/4096                                           83.6 ns         85.0 ns
BM_StringFindAllMatch/32768                                           566 ns          583 ns
BM_StringFindAllMatch/131072                                         2327 ns         2312 ns
BM_StringFindMatch1/1                                                1001 ns          981 ns
BM_StringFindMatch1/8                                                1002 ns          980 ns
BM_StringFindMatch1/64                                               1004 ns          981 ns
BM_StringFindMatch1/512                                              1012 ns          989 ns
BM_StringFindMatch1/4096                                             1088 ns         1058 ns
BM_StringFindMatch1/32768                                            1637 ns         1577 ns
BM_StringFindMatch2/1                                                1006 ns          984 ns
BM_StringFindMatch2/8                                                1007 ns          988 ns
BM_StringFindMatch2/64                                               1005 ns          989 ns
BM_StringFindMatch2/512                                              1015 ns          996 ns
BM_StringFindMatch2/4096                                             1087 ns         1067 ns
BM_StringFindMatch2/32768                                            1612 ns         1593 ns
BM_StringCtorDefault                                                0.373 ns        0.340 ns
BM_StringConstructDestroyCStr_Empty_Opaque                           1.84 ns         2.66 ns
BM_StringConstructDestroyCStr_Empty_Transparent                     0.456 ns        0.248 ns
BM_StringConstructDestroyCStr_Small_Opaque                           3.13 ns         2.80 ns
BM_StringConstructDestroyCStr_Small_Transparent                     0.388 ns        0.388 ns
BM_StringConstructDestroyCStr_Large_Opaque                           18.1 ns         17.9 ns
BM_StringConstructDestroyCStr_Large_Transparent                      12.5 ns         12.1 ns
BM_StringConstructDestroyCStr_Huge_Opaque                             155 ns          151 ns
BM_StringConstructDestroyCStr_Huge_Transparent                       61.6 ns         61.3 ns
BM_StringAssignStr_Empty_Opaque                                     0.729 ns        0.719 ns
BM_StringAssignStr_Empty_Transparent                                0.555 ns        0.532 ns
BM_StringAssignStr_Small_Opaque                                     0.766 ns        0.754 ns
BM_StringAssignStr_Small_Transparent                                0.539 ns        0.531 ns
BM_StringAssignStr_Large_Opaque                                      11.4 ns         11.6 ns
BM_StringAssignStr_Large_Transparent                                 11.6 ns         11.9 ns
BM_StringAssignStr_Huge_Opaque                                        248 ns          242 ns
BM_StringAssignStr_Huge_Transparent                                   247 ns          243 ns
BM_StringAssignAsciiz_Empty_Opaque                                   2.82 ns         3.50 ns
BM_StringAssignAsciiz_Empty_Transparent                             0.375 ns        0.369 ns
BM_StringAssignAsciiz_Small_Opaque                                   3.81 ns         3.54 ns
BM_StringAssignAsciiz_Small_Transparent                             0.488 ns        0.487 ns
BM_StringAssignAsciiz_Large_Opaque                                   13.9 ns         13.5 ns
BM_StringAssignAsciiz_Large_Transparent                              13.7 ns         13.5 ns
BM_StringAssignAsciiz_Huge_Opaque                                     298 ns          291 ns
BM_StringAssignAsciiz_Huge_Transparent                                289 ns          282 ns
BM_StringAssignAsciizMix_Opaque                                      6.25 ns         5.90 ns
BM_StringAssignAsciizMix_Transparent                                 3.50 ns         3.55 ns
BM_StringCopy_Empty                                                 0.649 ns        0.632 ns
BM_StringCopy_Small                                                 0.658 ns        0.633 ns
BM_StringCopy_Large                                                  8.14 ns         8.00 ns
BM_StringCopy_Huge                                                    109 ns          112 ns
BM_StringMove_Empty                                                  1.31 ns         1.28 ns
BM_StringMove_Small                                                  1.31 ns         1.28 ns
BM_StringMove_Large                                                  1.31 ns         1.28 ns
BM_StringMove_Huge                                                   1.31 ns         1.28 ns
BM_StringDestroy_Empty                                              0.854 ns        0.739 ns
BM_StringDestroy_Small                                              0.863 ns        0.742 ns
BM_StringDestroy_Large                                               9.62 ns         9.62 ns
BM_StringDestroy_Huge                                                15.3 ns         15.0 ns
BM_StringEraseToEnd_Empty_Opaque                                     1.05 ns         1.04 ns
BM_StringEraseToEnd_Empty_Transparent                               0.377 ns        0.373 ns
BM_StringEraseToEnd_Small_Opaque                                     1.04 ns         1.03 ns
BM_StringEraseToEnd_Small_Transparent                               0.458 ns        0.451 ns
BM_StringEraseToEnd_Large_Opaque                                     1.26 ns         1.22 ns
BM_StringEraseToEnd_Large_Transparent                                1.04 ns         1.00 ns
BM_StringEraseToEnd_Huge_Opaque                                      1.36 ns         1.36 ns
BM_StringEraseToEnd_Huge_Transparent                                 1.14 ns         1.14 ns
BM_StringEraseWithMove_Empty_Opaque                                  1.33 ns         1.31 ns
BM_StringEraseWithMove_Empty_Transparent                             1.05 ns         1.03 ns
BM_StringEraseWithMove_Small_Opaque                                  3.35 ns         3.33 ns
BM_StringEraseWithMove_Small_Transparent                             3.75 ns         3.51 ns
BM_StringEraseWithMove_Large_Opaque                                  3.15 ns         3.17 ns
BM_StringEraseWithMove_Large_Transparent                             2.94 ns         2.96 ns
BM_StringEraseWithMove_Huge_Opaque                                   42.4 ns         41.9 ns
BM_StringEraseWithMove_Huge_Transparent                              39.2 ns         39.0 ns
BM_StringRelational_Eq_Empty_Empty_Control                           2.35 ns         2.13 ns
BM_StringRelational_Eq_Empty_Small_Control                          0.511 ns        0.516 ns
BM_StringRelational_Eq_Empty_Large_Control                          0.516 ns        0.504 ns
BM_StringRelational_Eq_Empty_Huge_Control                           0.500 ns        0.499 ns
BM_StringRelational_Eq_Small_Small_Control                           2.43 ns         2.47 ns
BM_StringRelational_Eq_Small_Small_ChangeFirst                       1.78 ns         1.89 ns
BM_StringRelational_Eq_Small_Small_ChangeMiddle                      1.98 ns         1.84 ns
BM_StringRelational_Eq_Small_Small_ChangeLast                        2.64 ns         2.54 ns
BM_StringRelational_Eq_Small_Large_Control                          0.502 ns        0.502 ns
BM_StringRelational_Eq_Small_Huge_Control                           0.513 ns        0.509 ns
BM_StringRelational_Eq_Large_Large_Control                           2.19 ns         2.17 ns
BM_StringRelational_Eq_Large_Large_ChangeFirst                       1.66 ns         1.74 ns
BM_StringRelational_Eq_Large_Large_ChangeMiddle                      1.86 ns         1.87 ns
BM_StringRelational_Eq_Large_Large_ChangeLast                        2.14 ns         2.13 ns
BM_StringRelational_Eq_Large_Huge_Control                           0.510 ns        0.514 ns
BM_StringRelational_Eq_Huge_Huge_Control                              101 ns          101 ns
BM_StringRelational_Eq_Huge_Huge_ChangeFirst                         1.73 ns         1.67 ns
BM_StringRelational_Eq_Huge_Huge_ChangeMiddle                        58.3 ns         57.5 ns
BM_StringRelational_Eq_Huge_Huge_ChangeLast                           102 ns          102 ns
BM_StringRelational_Less_Empty_Empty_Control                         2.42 ns         2.16 ns
BM_StringRelational_Less_Empty_Small_Control                         2.20 ns         2.09 ns
BM_StringRelational_Less_Empty_Large_Control                         2.43 ns         2.10 ns
BM_StringRelational_Less_Empty_Huge_Control                          2.43 ns         2.07 ns
BM_StringRelational_Less_Small_Empty_Control                         2.42 ns         2.20 ns
BM_StringRelational_Less_Small_Small_Control                         2.36 ns         2.35 ns
BM_StringRelational_Less_Small_Small_ChangeFirst                     1.73 ns         1.73 ns
BM_StringRelational_Less_Small_Small_ChangeMiddle                    1.73 ns         1.73 ns
BM_StringRelational_Less_Small_Small_ChangeLast                      2.47 ns         2.46 ns
BM_StringRelational_Less_Small_Large_Control                         2.39 ns         2.33 ns
BM_StringRelational_Less_Small_Huge_Control                          2.23 ns         2.34 ns
BM_StringRelational_Less_Large_Empty_Control                         2.16 ns         2.12 ns
BM_StringRelational_Less_Large_Small_Control                         2.33 ns         2.40 ns
BM_StringRelational_Less_Large_Large_Control                         2.37 ns         2.29 ns
BM_StringRelational_Less_Large_Large_ChangeFirst                     1.49 ns         1.49 ns
BM_StringRelational_Less_Large_Large_ChangeMiddle                    1.74 ns         1.74 ns
BM_StringRelational_Less_Large_Large_ChangeLast                      2.03 ns         2.11 ns
BM_StringRelational_Less_Large_Huge_Control                          2.21 ns         2.20 ns
BM_StringRelational_Less_Huge_Empty_Control                          2.27 ns         2.15 ns
BM_StringRelational_Less_Huge_Small_Control                          2.32 ns         2.43 ns
BM_StringRelational_Less_Huge_Large_Control                          2.24 ns         2.16 ns
BM_StringRelational_Less_Huge_Huge_Control                            101 ns         98.6 ns
BM_StringRelational_Less_Huge_Huge_ChangeFirst                       1.49 ns         1.49 ns
BM_StringRelational_Less_Huge_Huge_ChangeMiddle                      57.1 ns         58.8 ns
BM_StringRelational_Less_Huge_Huge_ChangeLast                         102 ns          102 ns
BM_StringRelational_Compare_Empty_Empty_Control                      2.16 ns         1.91 ns
BM_StringRelational_Compare_Empty_Small_Control                      1.80 ns         1.85 ns
BM_StringRelational_Compare_Empty_Large_Control                      1.81 ns         2.15 ns
BM_StringRelational_Compare_Empty_Huge_Control                       1.96 ns         1.82 ns
BM_StringRelational_Compare_Small_Empty_Control                      2.14 ns         1.86 ns
BM_StringRelational_Compare_Small_Small_Control                      1.98 ns         1.98 ns
BM_StringRelational_Compare_Small_Small_ChangeFirst                  1.73 ns         1.73 ns
BM_StringRelational_Compare_Small_Small_ChangeMiddle                 1.73 ns         1.73 ns
BM_StringRelational_Compare_Small_Small_ChangeLast                   2.24 ns         2.44 ns
BM_StringRelational_Compare_Small_Large_Control                      1.98 ns         1.98 ns
BM_StringRelational_Compare_Small_Huge_Control                       2.23 ns         1.98 ns
BM_StringRelational_Compare_Large_Empty_Control                      2.14 ns         2.05 ns
BM_StringRelational_Compare_Large_Small_Control                      2.23 ns         2.04 ns
BM_StringRelational_Compare_Large_Large_Control                      2.12 ns         1.95 ns
BM_StringRelational_Compare_Large_Large_ChangeFirst                  1.41 ns         1.49 ns
BM_StringRelational_Compare_Large_Large_ChangeMiddle                 1.74 ns         1.74 ns
BM_StringRelational_Compare_Large_Large_ChangeLast                   2.24 ns         2.04 ns
BM_StringRelational_Compare_Large_Huge_Control                       2.13 ns         2.12 ns
BM_StringRelational_Compare_Huge_Empty_Control                       1.85 ns         2.16 ns
BM_StringRelational_Compare_Huge_Small_Control                       2.23 ns         2.22 ns
BM_StringRelational_Compare_Huge_Large_Control                       2.08 ns         2.15 ns
BM_StringRelational_Compare_Huge_Huge_Control                        98.3 ns          101 ns
BM_StringRelational_Compare_Huge_Huge_ChangeFirst                    1.36 ns         1.49 ns
BM_StringRelational_Compare_Huge_Huge_ChangeMiddle                   57.6 ns         58.0 ns
BM_StringRelational_Compare_Huge_Huge_ChangeLast                      102 ns          111 ns
BM_StringRelationalLiteral_Eq_Empty_Empty_Control                   0.356 ns        0.351 ns
BM_StringRelationalLiteral_Eq_Empty_Empty_ChangeFirst               0.321 ns        0.319 ns
BM_StringRelationalLiteral_Eq_Empty_Empty_ChangeMiddle              0.321 ns        0.319 ns
BM_StringRelationalLiteral_Eq_Empty_Empty_ChangeLast                0.322 ns        0.319 ns
BM_StringRelationalLiteral_Eq_Empty_Small_Control                   0.651 ns        0.634 ns
BM_StringRelationalLiteral_Eq_Empty_Large_Control                   0.472 ns        0.464 ns
BM_StringRelationalLiteral_Eq_Small_Empty_Control                   0.389 ns        0.358 ns
BM_StringRelationalLiteral_Eq_Small_Small_Control                   0.604 ns        0.723 ns
BM_StringRelationalLiteral_Eq_Small_Small_ChangeFirst               0.696 ns        0.696 ns
BM_StringRelationalLiteral_Eq_Small_Small_ChangeMiddle              0.673 ns        0.598 ns
BM_StringRelationalLiteral_Eq_Small_Small_ChangeLast                0.735 ns        0.690 ns
BM_StringRelationalLiteral_Eq_Small_Large_Control                   0.469 ns        0.465 ns
BM_StringRelationalLiteral_Eq_Large_Empty_Control                   0.841 ns        0.858 ns
BM_StringRelationalLiteral_Eq_Large_Small_Control                   0.628 ns        0.613 ns
BM_StringRelationalLiteral_Eq_Large_Large_Control                   0.917 ns        0.911 ns
BM_StringRelationalLiteral_Eq_Large_Large_ChangeFirst               0.915 ns        0.903 ns
BM_StringRelationalLiteral_Eq_Large_Large_ChangeMiddle              0.909 ns        0.911 ns
BM_StringRelationalLiteral_Eq_Large_Large_ChangeLast                0.914 ns        0.911 ns
BM_StringRelationalLiteral_Less_Empty_Empty_Control                 0.457 ns        0.226 ns
BM_StringRelationalLiteral_Less_Empty_Empty_ChangeFirst             0.456 ns        0.226 ns
BM_StringRelationalLiteral_Less_Empty_Empty_ChangeMiddle            0.455 ns        0.225 ns
BM_StringRelationalLiteral_Less_Empty_Empty_ChangeLast              0.454 ns        0.224 ns
BM_StringRelationalLiteral_Less_Empty_Small_Control                  2.15 ns         2.13 ns
BM_StringRelationalLiteral_Less_Empty_Large_Control                  2.05 ns         2.11 ns
BM_StringRelationalLiteral_Less_Small_Empty_Control                 0.228 ns        0.225 ns
BM_StringRelationalLiteral_Less_Small_Small_Control                  2.46 ns         2.20 ns
BM_StringRelationalLiteral_Less_Small_Small_ChangeFirst              1.98 ns         1.88 ns
BM_StringRelationalLiteral_Less_Small_Small_ChangeMiddle             1.98 ns         1.86 ns
BM_StringRelationalLiteral_Less_Small_Small_ChangeLast               2.68 ns         2.53 ns
BM_StringRelationalLiteral_Less_Small_Large_Control                  2.44 ns         2.34 ns
BM_StringRelationalLiteral_Less_Large_Empty_Control                 0.228 ns        0.225 ns
BM_StringRelationalLiteral_Less_Large_Small_Control                  2.36 ns         2.32 ns
BM_StringRelationalLiteral_Less_Large_Large_Control                  2.21 ns         2.26 ns
BM_StringRelationalLiteral_Less_Large_Large_ChangeFirst              1.65 ns         1.69 ns
BM_StringRelationalLiteral_Less_Large_Large_ChangeMiddle             1.89 ns         1.89 ns
BM_StringRelationalLiteral_Less_Large_Large_ChangeLast               2.06 ns         1.98 ns
BM_StringRelationalLiteral_Compare_Empty_Empty_Control              0.396 ns        0.394 ns
BM_StringRelationalLiteral_Compare_Empty_Empty_ChangeFirst          0.399 ns        0.398 ns
BM_StringRelationalLiteral_Compare_Empty_Empty_ChangeMiddle         0.389 ns        0.394 ns
BM_StringRelationalLiteral_Compare_Empty_Empty_ChangeLast           0.397 ns        0.396 ns
BM_StringRelationalLiteral_Compare_Empty_Small_Control               1.87 ns         1.85 ns
BM_StringRelationalLiteral_Compare_Empty_Large_Control               1.83 ns         1.77 ns
BM_StringRelationalLiteral_Compare_Small_Empty_Control              0.396 ns        0.391 ns
BM_StringRelationalLiteral_Compare_Small_Small_Control               1.98 ns         1.98 ns
BM_StringRelationalLiteral_Compare_Small_Small_ChangeFirst           1.49 ns         1.48 ns
BM_StringRelationalLiteral_Compare_Small_Small_ChangeMiddle          1.48 ns         1.48 ns
BM_StringRelationalLiteral_Compare_Small_Small_ChangeLast            2.23 ns         2.19 ns
BM_StringRelationalLiteral_Compare_Small_Large_Control               1.98 ns         1.97 ns
BM_StringRelationalLiteral_Compare_Large_Empty_Control              0.391 ns        0.391 ns
BM_StringRelationalLiteral_Compare_Large_Small_Control               1.98 ns         1.97 ns
BM_StringRelationalLiteral_Compare_Large_Large_Control               1.89 ns         1.91 ns
BM_StringRelationalLiteral_Compare_Large_Large_ChangeFirst           1.49 ns         1.24 ns
BM_StringRelationalLiteral_Compare_Large_Large_ChangeMiddle          1.58 ns         1.68 ns
BM_StringRelationalLiteral_Compare_Large_Large_ChangeLast            1.93 ns         1.78 ns
BM_StringRead_Hot_Shallow_Empty                                     0.497 ns        0.496 ns
BM_StringRead_Hot_Shallow_Small                                     0.498 ns        0.500 ns
BM_StringRead_Hot_Shallow_Large                                     0.501 ns        0.742 ns
BM_StringRead_Hot_Deep_Empty                                        0.496 ns        0.503 ns
BM_StringRead_Hot_Deep_Small                                        0.497 ns        0.498 ns
BM_StringRead_Hot_Deep_Large                                        0.743 ns        0.976 ns
BM_StringRead_Cold_Shallow_Empty                                     1.32 ns         1.35 ns
BM_StringRead_Cold_Shallow_Small                                     1.35 ns         1.38 ns
BM_StringRead_Cold_Shallow_Large                                     2.03 ns         2.07 ns
BM_StringRead_Cold_Deep_Empty                                        1.40 ns         1.40 ns
BM_StringRead_Cold_Deep_Small                                        1.40 ns         1.41 ns
BM_StringRead_Cold_Deep_Large                                        2.16 ns         2.25 ns
```
",2025-08-26T14:16:45Z,2025-08-27T13:59:04Z,2025-08-27T13:59:01Z,2025-08-27T13:59:01Z,True,1,0,1,2,1,1
155425,closed,[MLIR][Vector] Add warp distribution for `vector.step` op,akroviakov,"This PR adds a distribution pattern for [`vector.step`](https://mlir.llvm.org/docs/Dialects/Vector/#vectorstep-vectorstepop) op.

The result of the step op is a vector containing a sequence `[0,1,...,N-1]`. For the warp distribution, we consider a vector with `N == warp_size` (think SIMD). Distributing it to SIMT, means that each lane is represented by a thread/lane id scalar.

More complex cases with the support for warp size multiples (e.g., `[0,1,...,2*N-1]`) require additional layout information to be handled properly. Such support may be added later.

The lane id scalar is wrapped into a `vector<1xindex>` to emulate the sequence distribution result. 
Other than that, the distribution is similar to that of `arith.constant`.",2025-08-26T14:42:17Z,2025-08-28T16:24:02Z,2025-08-28T16:24:02Z,2025-08-28T16:24:02Z,True,3,23,7,79,1,2
155415,closed,[InstCombine] Strip leading zero indices from GEP,nikic,"GEPs are often in the form `gep [N x %T], ptr %p, i64 0, i64 %idx`. Canonicalize these to `gep %T, ptr %p, i64 %idx`.

This enables transforms that only support one GEP index to work and improves CSE.

Various transforms were recently hardened to make sure they still work without the leading index. https://github.com/llvm/llvm-project/pull/155404 is the last problematic transform I'm aware of.",2025-08-26T13:37:41Z,2025-09-10T20:39:04Z,2025-09-01T07:58:12Z,2025-09-01T07:58:12Z,True,33,0,1,364,363,56
155414,closed,[TableGen][DecoderEmitter] Optimize single-case OPC_ExtractField,s-barannikov,"OPC_ExtractField followed by a single OPC_FilterValue is equivalent to
OPC_CheckField. Optimize this relatively common case.
",2025-08-26T13:34:24Z,2025-08-26T16:12:08Z,2025-08-26T16:12:05Z,2025-08-26T16:12:05Z,True,2,0,1,53,65,5
155409,closed,[X86] canCreateUndefOrPoisonForTargetNode - add GF2P8AFFINEINVQB / GF2P8AFFINEQB / GF2P8MULB handling,RKSimon,"All 3 instructions are well defined bit twiddling operations - they do not introduce undef/poison with well defined inputs.

Fixes regressions in #152107",2025-08-26T12:55:33Z,2025-08-26T14:07:39Z,2025-08-26T14:07:35Z,2025-08-26T14:07:35Z,True,1,0,1,8,6,2
155408,closed,[StructurizeCFG] nested-if zerocost hoist bugfix,VigneshwarJ,"When zero cost instructions are hoisted, the simplifyHoistedPhi function was setting incoming phi values which were not dominating the use causing runtime failure. This was set to poison by rebuildSSA function. This commit fixes the issue.",2025-08-26T12:54:56Z,2025-08-28T14:04:15Z,2025-08-28T14:04:14Z,2025-08-28T14:04:14Z,True,5,0,5,5,6,3
155404,closed,[RelLookupTableConverter] Make GEP type independent,nikic,"This makes the RelLookupTableConverter independent of the type used in the GEP. In particular, it removes the requirement to have a leading zero index.",2025-08-26T12:35:57Z,2025-09-01T07:27:14Z,2025-09-01T07:27:12Z,2025-09-01T07:27:12Z,True,1,0,2,158,44,2
155407,closed,"Remove some ""DeprecatedSmallSet is deprecated"" warnings from the build",david-arm,"After a rebase when building clang I noticed a significant increase in the number of build warnings, due to this:

warning: ‘template<class PointerType, unsigned int N> class llvm::DeprecatedSmallSet’ is deprecated: Use SmallPtrSet instead [-Wdeprecated-declarations]

I am seeing these build warnings even when the SmallSet class isn't used by any of the code that included the header. I've created a patch to either remove the SmallSet header when not required, or move it into the actual .cpp or .h file where it's used.",2025-08-26T12:46:34Z,2025-08-27T14:28:45Z,2025-08-27T14:28:45Z,,False,9,0,2,15,12,24
155401,closed,[clang][bytecode] Cleanup primitive descriptor ctor/dtor handling,tbaederr,Use switches instead of if statements and COMPOSITE_TYPE_SWITCH and remove some leftover move functions.,2025-08-26T12:19:55Z,2025-08-26T15:20:37Z,2025-08-26T15:20:36Z,2025-08-26T15:20:36Z,True,1,0,1,29,61,2
155403,closed,[mlir][amx] Add write side effect to AMX tile creation ops,arun-thmn,"Adds `MemWrite` side effect to `amx.tile_zero` and `amx.tile_load` ops.

Memory write models hardware populating AMX tiles with specified values through tile zero and load ops.
Making the side effect explicit allows to use multiple op instances as a compilation hint to use different AMX tile registers. This can prevent less efficient lowering through tile store-load copies compared to directly populating tiles with values.

To illustrate the trade off:
Without explicit side effects, `CSE` optimizes two `amx.tile_zero` into a single op which lowers to a copy for the second tile:
```
  tilezero        %tmm0
  tilestored      %tmm0, -2032(%rbp,%rbx) # 1024-byte Folded Spill
  tileloadd       -2032(%rbp,%rbx), %tmm1 # 1024-byte Folded Reload
```
By keeping the two `amx.tile_zero` ops and, thus, lowering to two separate intrinsic invocations, the two tile registers are zeroed out directly without the additional round trip through memory:
```
  tilezero        %tmm0
  tilezero        %tmm1
```
The same principle applies to `amx.tile_load` ops.",2025-08-26T12:31:21Z,2025-08-29T11:41:05Z,2025-08-29T11:41:05Z,2025-08-29T11:41:05Z,True,13,10,4,42,5,2
155396,closed,[clang][bytecode] Try to avoid dtor functions in Record descriptors,tbaederr,"We don't need to call the dtor fn of a record where all bases, fields and virtual bases have no dtor fn either.",2025-08-26T11:47:36Z,2025-08-26T12:17:24Z,2025-08-26T12:17:24Z,2025-08-26T12:17:24Z,True,1,0,1,22,3,1
155400,closed,[clang-repl] Put CompilerInstance from IncrementalAction to use for non-assert/assert builds,anutosh491,"See https://github.com/llvm/llvm-project/pull/137458#discussion_r2300649286

Context: So the CompilerInstance CI being used with the Incremental Action are tightly coupled in any case. Which means 
the  CI put to use while constructing the IncrementalAction
```
  Act = TSCtx->withContextDo([&](llvm::LLVMContext *Ctx) {
    return std::make_unique<IncrementalAction>(*CI, *Ctx, ErrOut, *this,
                                               std::move(Consumer));
  });                      
```

Is also the CI through which the we call `ExecuteAction` on `Act`
```
CI->ExecuteAction(*Act);
```

So we need to use CI as a member variable in IncrementalAction for assert builds for 
https://github.com/llvm/llvm-project/blob/bddac5eda9b7591e05ccdc86a5e86c592085f318/clang/lib/Interpreter/IncrementalAction.cpp#L97-L108

The same can be put to use for `CreateASTConsumer` too as all of these are referring to the same CI
```
std::unique_ptr<ASTConsumer>
IncrementalAction::CreateASTConsumer(CompilerInstance & /*CI*/, StringRef InFile) {
  std::unique_ptr<ASTConsumer> C =
      WrapperFrontendAction::CreateASTConsumer(this->CI, InFile);
      
```
",2025-08-26T12:13:54Z,2025-08-27T10:00:29Z,2025-08-27T10:00:24Z,2025-08-27T10:00:24Z,True,6,0,4,10,9,2
155393,closed,[mlir][vector] Fix crashes in `from_elements` folder + `broadcast` verifier,matthias-springer,"This PR fixes two crashes / failures.

1. The `vector.broadcast` verifier did not take into account `VectorElementTypeInterface` and was looking for int/index/float types.
2. The `vector.from_elements` folder attempted to create an invalid `DenseElementsAttr`. Only int/float/index/complex types are supported.
",2025-08-26T10:40:59Z,2025-08-26T10:49:24Z,2025-08-26T10:49:23Z,2025-08-26T10:49:23Z,True,1,0,1,23,3,3
155391,closed,[clang][bytecode][NFC] Use Pointer::initializeAllElements() in Program,tbaederr,"We just initialized the entire string, so use this function instead.",2025-08-26T10:20:34Z,2025-08-26T10:46:31Z,2025-08-26T10:46:30Z,2025-08-26T10:46:30Z,True,1,0,1,1,1,1
155389,closed,[RISCV][NFC] Fix typo v32 -> v31 in document,XChy,,2025-08-26T10:14:52Z,2025-08-26T11:16:39Z,2025-08-26T11:16:39Z,2025-08-26T11:16:39Z,True,1,0,1,1,1,1
155385,closed,[libc++][C++03] Fix test/libcxx-03/system_reserved_names.gen.py,philnik777,"This test only fails because it includes `<__config>`. Switch to using
`<__cxx03/__config>` instead to fix the issue.
",2025-08-26T09:43:20Z,2025-08-26T14:26:36Z,2025-08-26T14:26:18Z,2025-08-26T14:26:18Z,True,1,0,1,1,3,1
155384,closed,[libc++][C++03][NFC] Remove XFAILS from libcxx/test/libcxx,philnik777,"We've split the implementation-specific tests into `libcxx/test/libcxx-03`, so we don't need the annotations in `libcxx/test/libcxx` anymore.
",2025-08-26T09:35:05Z,2025-08-26T14:25:50Z,2025-08-26T14:25:20Z,2025-08-26T14:25:20Z,True,1,0,1,0,4,2
155381,closed,[clang][bytecode][NFC] Check hasTrivialDtor() in RunDestructors,tbaederr,We do this when calling Free() on dynamically allocated memory.,2025-08-26T09:08:46Z,2025-08-26T11:27:14Z,2025-08-26T11:03:18Z,2025-08-26T11:03:18Z,True,2,0,1,11,10,1
155383,closed,[VPlan] Reassociate (x & y) & z -> x & (y & z),lukel97,"This PR reassociates logical ands in order to enable more simplifications.

The driving motivation for this is that with tail folding all blocks inside the loop body will end up using the header mask. However this can end up nestled deep within a chain of logical ands from other edges.

Typically the header mask will be a leaf nested in the LHS, e.g. (headermask & y) & z. So pulling it out allows it to be simplified further, e.g. allows it to be optimised away to VP intrinsics with EVL tail folding.",2025-08-26T09:20:43Z,2025-09-04T10:17:44Z,2025-09-03T01:09:19Z,2025-09-03T01:09:19Z,True,6,19,8,47,44,6
155382,closed,[TableGen][DecoderEmitter] Remove no longer needed MaxFilterWidth (NFC),s-barannikov,"11c61581 made the variable redundant.
Also remove `Target`, which is apparently unused.",2025-08-26T09:20:25Z,2025-08-26T09:47:04Z,2025-08-26T09:46:27Z,2025-08-26T09:46:27Z,True,1,0,1,4,17,1
155380,closed,[llvm][release] Correct formatting field in release message,DavidSpickett,"Extra } needed removing.

Cherry-picked to 21.x from 6a81dac65c1c5ee891d0ee8530bd73a63c5fa204. For #153154.",2025-08-26T09:02:48Z,2025-08-26T09:34:46Z,2025-08-26T09:34:11Z,2025-08-26T09:34:11Z,True,1,0,1,1,1,1
155379,closed,[SimpleLoopUnswitch] Adjust cost multiplier accounting for parent loop size,antoniofrighetto,"When estimating the cost to avoid exponential unswitches of non-trivial invariant conditions, also consider the parent loop basic blocks size, ensuring this does not grow unexpectedly.

Alternative solution might involve adding a threshold on the number of times LoopRotate is allowed to rotate the same loop across invocations (https://github.com/llvm/llvm-project/issues/138509#issuecomment-3193855772), though I think this would require a per-loop count to be serialized/deserialized in a metadata each time, which seems far more invasive.

Fixes: https://github.com/llvm/llvm-project/issues/138509.",2025-08-26T09:01:44Z,2025-09-05T06:54:13Z,2025-09-05T06:54:12Z,2025-09-05T06:54:12Z,True,2,0,1,76,5,2
155378,closed,[clang][bytecode][NFC] Check InitializingBlocks in _within_lifetime,tbaederr,This kind of check is exactly why InterpState::InitializingBlocks exists.,2025-08-26T09:01:30Z,2025-08-26T09:25:47Z,2025-08-26T09:25:47Z,2025-08-26T09:25:47Z,True,1,0,1,2,6,1
155377,closed,s390x: pattern match saturated truncation,folkertdev,"fixes https://github.com/llvm/llvm-project/issues/153655

This does not yet work, but should make it easier to talk about.

After legalizing `smin` and `smax` (I'm still matching the older patterns below, not sure if that is really needed any more?), the DAG is 

```
Optimized legalized selection DAG: %bb.0 'i32_signed:bb2'
SelectionDAG has 17 nodes:
  t0: ch,glue = EntryToken
  t17: v4i32 = BUILD_VECTOR Constant:i32<-32768>, Constant:i32<-32768>, Constant:i32<-32768>, Constant:i32<-32768>
  t16: v4i32 = BUILD_VECTOR Constant:i32<32767>, Constant:i32<32767>, Constant:i32<32767>, Constant:i32<32767>
          t2: v4i32,ch = CopyFromReg t0, Register:v4i32 %0
        t18: v4i32 = smax t2, t17
      t20: v4i32 = smin t18, t16
          t4: v4i32,ch = CopyFromReg t0, Register:v4i32 %1
        t19: v4i32 = smax t4, t17
      t21: v4i32 = smin t19, t16
    t50: v8i16 = SystemZISD::PACK t20, t21
  t14: ch,glue = CopyToReg t0, Register:v8i16 $v24, t50
  t15: ch = SystemZISD::RET_GLUE t14, Register:v8i16 $v24, t14:1
```

However, the pattern still does not match. I'm now suspicious of those `BUILD_VECTOR`s, because the rest just looks like it should work.

I'm also aware that the order of the patterns matters, which is why the `VPKSF` pattern is now before `VPKF`.

cc @uweigand ",2025-08-26T08:57:55Z,2025-08-26T15:19:59Z,2025-08-26T15:19:59Z,2025-08-26T15:19:59Z,True,9,14,5,197,80,6
155375,closed,[clang] Fix of a crash 'Cannot get layout of forward declarations!' during CTU static analysis,balazske,"When a type is imported with `ASTImporter`, the ""original declaration"" of the type is imported. In some cases this is not the definition (of the class). Before the fix the definition was only imported if there was an other reference to it in the AST to import. This is not always the case (like in the added test case), if not the definition was missing in the ""To"" AST which can cause the assertion later.",2025-08-26T08:55:20Z,2025-08-29T16:27:19Z,2025-08-29T07:45:39Z,2025-08-29T07:45:39Z,True,9,2,3,55,1,2
155373,closed,[AArch64][PAC] Fix clobbering registers by BLRA and AUTH_TCRETURN,atrosinenko,"After `isX16X17Safer` predicate was introduced, it became possible for `emitPtrauthDiscriminator` function to return its `AddrDisc` argument when it is neither X16 nor X17 (which are declared as implicit-def'ed by `BLRA` and `AUTH_TCRETURN[_BTI]` pseudo instructions). This resulted in the above pseudos being able to accidentally clobber unexpected register.

As a quick fix for miscompilation possibility, this patch virtually restores the old behavior for the affected pseudo instructions. It should be possible to improve the efficiency via subsequent patches by accounting for `killed` flags and register masks.",2025-08-26T08:45:43Z,2025-08-28T16:12:33Z,2025-08-27T16:36:00Z,2025-08-27T16:36:00Z,True,4,0,2,120,9,2
155372,closed,[AArch64][PAC] Do not execute AUT instructions speculatively,atrosinenko,"A generic authentication instruction may crash the process on failure. Furthermore, it can be executed conditionally and/or its signing schema can be chosen dynamically. For this reason, while it may be beneficial to permit DCE to remove AUTx16x17 or AUTxMxN instructions unless their results have any uses (at least fake ones, if we just want to check the
signature), AUT instructions are not safe to be executed speculatively.

As a quick fix for miscompilation possibility, this patch marks AUTxMxN pseudo instruction as having unmodelled side effects.",2025-08-26T08:35:32Z,2025-08-28T16:03:29Z,2025-08-27T13:46:35Z,2025-08-27T13:46:35Z,True,3,0,2,124,1,2
155374,closed,[Triple] Add target triple support for CheriotRTOS.,resistor,"For context, CheriotRTOS is a custom RTOS co-designed for the CHERIoT
CHERI-enabled RISCV32E platform. It uses a custom ABI and linkage model,
necesitating representing it in the target triple.
",2025-08-26T08:52:38Z,2025-09-02T04:15:28Z,2025-09-02T02:54:34Z,2025-09-02T02:54:34Z,True,4,5,1,53,44,3
155370,closed,[AMDGPU] Reenable BackOffBarrier on GFX11/12,Pierre-vh,"Re-enable it by adding a wait on vm_vsrc before every barrier ""start"" instruction in GFX10/11/12 CU mode.

This is a less strong wait than what we do without BackOffBarrier, thus this shouldn't introduce
any new guarantees that can be abused, instead it relaxes the guarantees we have now to the bare
minimum needed to support the behavior users want (fence release + barrier works).

There is an exact memory model in the works which will be documented separately.",2025-08-26T08:15:26Z,2025-09-02T07:37:45Z,2025-09-02T07:37:44Z,2025-09-02T07:37:44Z,True,4,4,1,229,9,8
155371,closed,[sancov][LoongArch] Resolve pcaddu18i+jirl in evaluateBranch and teach sancov,zhaoqi5,"This commit overrides `updateState` and `resetState` hooks in `MCInstrAnalysis` in order to be able to analyze pcaddu18i+jirl pairs inside `evaluateBranch`.

After this commit, `llvm-objdump` is able to correctly analyze and print detailed information. `lld/test/ELF/loongarch-call36.s` shows the changes.

Besides, this commit also teaches sancov to resolve such call sequences. Without this commit, some tests in compiler-rt failed:

```
Failed Tests :
  SanitizerCommon-asan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard-dso.cpp
  SanitizerCommon-asan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard.cpp
  SanitizerCommon-lsan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard-dso.cpp
  SanitizerCommon-lsan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard.cpp
  SanitizerCommon-msan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard-dso.cpp
  SanitizerCommon-msan-loongarch64-Linux :: sanitizer_coverage_trace_pc_guard.cpp
```

The reason is that sancov could not resolve pcaddu18i+jirl call sequence correctly and caused mismatches between coverage points in the binary and the .sancov file:

```
ERROR: Coverage points in binary and .sancov file do not match.
```

NOTE: A similar issue might also occur on RISC-V when relaxation is disabled (not verified). This commit can also fix for it.",2025-08-26T08:24:59Z,2025-08-29T03:05:50Z,2025-08-28T01:25:31Z,2025-08-28T01:25:31Z,True,6,2,1,87,4,3
155368,closed,[clang] Create PointerToBoolean casts for C casts,tbaederr,"Don't create CK_BitCast casts from `nullptr_t` to `bool`.

Fixes #155126",2025-08-26T07:48:31Z,2025-08-28T04:35:30Z,2025-08-28T04:20:00Z,2025-08-28T04:20:00Z,True,2,2,3,26,1,3
155367,closed,[RISCV] Do not commute with shift if we might break a qc.shladd pattern,svs-quic,"Similar to what we do if might break a `sh{1,2,3}add` pattern.",2025-08-26T07:46:25Z,2025-08-27T11:31:06Z,2025-08-27T11:30:40Z,2025-08-27T11:30:40Z,True,2,0,3,117,3,2
155363,closed,[clang][test] Add a RUN line for the bytecode interpreter,tbaederr,"This test works with the bytecode interpreter, so add some additional testing.",2025-08-26T07:29:15Z,2025-08-26T07:53:07Z,2025-08-26T07:53:07Z,2025-08-26T07:53:06Z,True,1,0,1,1,0,1
155362,closed,release/21.x: [flang] Disable loop interchange by default (#155279),llvmbot,"Backport 8849750e998819903dc749411bc9a7cd508a5e8a

Requested by: @nikic",2025-08-26T07:21:11Z,2025-08-26T09:50:12Z,2025-08-26T09:35:22Z,2025-08-26T09:35:22Z,True,4,0,1,5,11,2
155366,closed,release/21.x: [lldb][DataFormatters] Support newer _LIBCPP_COMPRESSED_PAIR layout (#155153),llvmbot,"Backport 7b22660d2aa0a9906e85d2c25e8a6577c39b31e0 20dd053160f7d933037aacb69067ef4d77996ba1

Requested by: @nikic",2025-08-26T07:35:37Z,2025-08-26T09:35:33Z,2025-08-26T09:34:55Z,2025-08-26T09:34:55Z,True,4,0,2,199,143,12
155361,closed,release/21.x: [PowerPC] Indicate that PPC32PICGOT clobbers LR (#154654),llvmbot,"Backport e6ae4e689cd6511987aecd1d0678cad317ea3f33

Requested by: @nikic",2025-08-26T07:20:04Z,2025-08-26T12:35:59Z,2025-08-26T12:35:23Z,2025-08-26T12:35:23Z,True,3,0,1,33,1,2
155360,closed,[clangd] [C++20 Modules] Try to use prebuilt modules,ChuanqiXu9,"If there are already built module files (and we consume it), we can avoid rebuilding them.

The patch tries to use the ""-fmodule-file="" information from the compilation database to find the prebuilt module files, and it they are good, use them.

This patch also did some relevent refactoring for `ModuleFile`. Introducing `PrebuiltModuleFile` and `BuiltModuleFile` to make the ownership clear. And renamed some variables which was named ""ModuleFile"".",2025-08-26T06:33:51Z,2025-09-05T06:28:42Z,2025-09-05T06:28:42Z,2025-09-05T06:28:42Z,True,2,1,1,134,20,2
155359,closed,[libc++][NFC] Wrap lines in ReleaseNotes/22.rst,philnik777,"Some of the lines in `ReleaseNotes/22.rst` are (significantly) longer than our usual 120 column limit. This wraps all lines in the file so they are never more than our usual limit.
",2025-08-26T06:25:50Z,2025-08-26T07:10:58Z,2025-08-26T07:10:41Z,2025-08-26T07:10:41Z,True,1,0,1,9,3,1
155357,closed,[ASan] Prevent assert from scalable vectors in FunctionStackPoisoner.,davemgreen,This has recently started causing 'Invalid size request on a scalable vector.',2025-08-26T05:44:28Z,2025-08-27T12:54:38Z,2025-08-27T08:00:52Z,2025-08-27T08:00:52Z,True,5,5,1,30,1,2
155358,closed,[clang][bytecode] Support remaining add_sat like X86 builtins,tbaederr,,2025-08-26T05:58:20Z,2025-08-26T12:11:38Z,2025-08-26T11:51:31Z,2025-08-26T11:51:31Z,True,2,2,2,57,4,3
155355,closed,[flang] `do concurrent`: fix reduction symbol resolution when mapping to OpenMP,ergawy,"Fixes #155273

This PR introduces 2 changes:
1. The `do concurrent` to OpenMP pass is now a module pass rather than a function pass.
2. Reduction ops are looked up in the parent module before being created.

The benefit of using a module pass is that the same reduction operation can be used across multiple functions if the reduction type matches.",2025-08-26T05:17:35Z,2025-08-27T15:06:19Z,2025-08-27T15:06:16Z,2025-08-27T15:06:16Z,True,1,2,2,72,32,3
155353,closed,[GlobalISel] Add multi-way splitting support for wide scalar shifts.,aemerson,"This patch implements direct N-way splitting for wide scalar shifts instead
of recursive binary splitting. For example, an i512 G_SHL can now be split
directly into 8 i64 operations rather than going through i256 -> i128 -> i64.

The main motivation behind this is to alleviate (although not entirely fix)
pathological compile time issues with huge types, like i4224. The problem
we see is that the recursive splitting strategy combined with our messy
artifact combiner ends up with terribly long compiles as tons of intermediate
artifacts are generated, and then attempted to be combined ad-nauseum.

Going directly from the large shifts to the destination types short-circuits
a lot of these issues, but it's still an abuse of the backend and front-ends
should never be doing this sort of thing.",2025-08-26T04:35:19Z,2025-09-03T17:25:55Z,2025-09-03T17:25:53Z,2025-09-03T17:25:53Z,True,8,9,1,13567,4697,4
155354,closed,Fix test added in #155148 work with Windows style path separators.,dyung,"Should fix Windows build bot failures such as https://lab.llvm.org/buildbot/#/builders/46/builds/22281.

The test (and the followup fix in #155303) did not properly account for Windows style path separators.",2025-08-26T04:48:06Z,2025-08-26T05:40:27Z,2025-08-26T05:15:15Z,2025-08-26T05:15:15Z,True,3,0,1,1,1,1
155351,closed,[clang] Post-commit review for #150028,tbaederr," 1) Return `std::nullopt` instead of `{}`.
 2) Rename the new function to evaluate*, it's not a simple getter.",2025-08-26T03:59:47Z,2025-08-27T07:48:58Z,2025-08-27T07:48:57Z,2025-08-27T07:48:57Z,True,1,0,1,12,10,4
155352,closed,[lldb-dap] Improving lldbdap_testcase.py error diagnosability,piyushjaiswal98,Improved response Message handling in lldbdap_testcase.py to handle various formats. Allows for more descriptive error messaging (Provides useful info even when error details are malformed),2025-08-26T04:18:52Z,2025-08-27T00:55:49Z,2025-08-27T00:55:29Z,2025-08-27T00:55:29Z,True,4,0,4,23,7,1
155347,closed,[clang] fix uniquing of some TagTypes created from the injected class name,mizvekov,"This fixes a bug in the fast path for the creation of TagTypes from injected class names.

The creation of TagTypes has a fast path which, when there is no elaboration, uses storage in the declaration itself for memoizing the resuling type node, instead of using the folding set.

This memoizing would fail when the type was created from the injected class name, as we would look for the node in the injected declaration but store it in the non-injected one, so a different type would be created each time.

This regression was reported here: https://github.com/llvm/llvm-project/pull/147835#discussion_r2299248995

Since this regression was never released, there are no release notes.",2025-08-26T02:54:22Z,2025-08-28T19:17:41Z,2025-08-26T03:26:04Z,2025-08-26T03:26:04Z,True,3,0,1,36,22,2
155346,closed,[clang-format] Fix a bug in SkipMacroDefinitionBody,owenca,All comments before the macro definition body should be skipped.,2025-08-26T02:43:11Z,2025-08-26T16:00:58Z,2025-08-26T16:00:57Z,2025-08-26T16:00:57Z,True,1,0,1,3,5,2
155342,closed,[clang] fix TemplateName Subst* nodes transform,mizvekov,"This makes sure NestedNameSpecifierLocs don't apply to the replacement TemplateName of SubstTemplate* nodes.

Also removes improper name qualification over these Subst Nodes, causing some canonical TemplateNames to not be fully qualified when printed.

Since this is a regression introduced in #147835, which was never released, there are no release notes.

Fixes #155281",2025-08-26T01:59:57Z,2025-08-26T03:08:43Z,2025-08-26T03:08:42Z,2025-08-26T03:08:42Z,True,1,0,1,152,141,12
155341,closed,Bitcode: Stop combining function alignments into MaxAlignment.,pcc,"MaxAlignment is used to produce the abbreviation for MODULE_CODE_GLOBALVAR
and is not used for anything related to function alignments, so stop
combining function alignments and rename it to make its purpose clearer.
",2025-08-26T01:50:50Z,2025-08-26T18:22:35Z,2025-08-26T18:22:34Z,2025-08-26T18:22:34Z,True,1,0,1,5,9,1
155343,closed,[AMDGPU] Change default loop alignment,hjagasiaAMD,Align small loops aggresively to 32 bytes and larger loops to 16 bytes,2025-08-26T02:14:42Z,2025-08-26T20:47:22Z,2025-08-26T20:47:22Z,,False,11,0,1,8882,6465,153
155338,closed,[NFC][WPD] Pass the module analysis manager instead of lambdas,mtrofin,"Easier to evolve - if we need more analyses, it becomes clumsy to keep passing around lambdas.",2025-08-26T01:01:57Z,2025-08-27T00:01:04Z,2025-08-27T00:01:02Z,2025-08-27T00:01:02Z,True,3,0,2,19,35,1
155336,closed,AMDGPU: Add target feature for aligned VGPR requirement,arsenm,"This now applies to gfx90a+ and gfx1250, so add a dedicated feature
for it so the feature check can be composed correctly with unrelated
properties. Probably would be better to invert this, but that turns
out to be difficult given the current assumptions.",2025-08-26T00:41:27Z,2025-08-26T01:36:53Z,2025-08-26T01:36:52Z,2025-08-26T01:36:52Z,True,3,0,1,11,1,2
155332,closed,[HLSL][DirectX] Remove uniformity bit from resource initialization intrinsics,hekota,"Removes uniformity bit from resource initialization intrinsics `llvm.{dx|spv}.resource.handlefrombinding` and `llvm.{dx|spv}.resource.handlefromimplicitbinding`. The flag currently always set to `false`. It should be derived from resource analysis and not provided by codegen.

Closes #135452",2025-08-26T00:22:03Z,2025-08-28T16:12:37Z,2025-08-28T16:12:36Z,2025-08-28T16:12:36Z,True,4,1,3,472,476,113
155328,closed,[Github][CI] Install the correct binary of sccache on aarch64,tstellar,,2025-08-26T00:05:37Z,2025-08-27T04:35:12Z,2025-08-27T04:35:12Z,2025-08-27T04:35:12Z,True,2,0,3,2,2,1
155327,closed,"Revert ""[NFC][lldb] Add a null check, actually use new SharedModuleLi…",augusto2112,"…st class""

This reverts commit 234e075c1dbdaacd2e1b4199ae983f5c4439223c.


I'm reverting this because the ASAN build fails running the TestMiniDumpUUID.py test. This happens because the pointer is already freed before the call to `RemoveIfOrpahaned`. The ModuleList implementation never actually dereferences the pointer, so it worked correctly, but the new map implementation does dereference it, hence the crash.",2025-08-26T00:05:21Z,2025-08-26T00:21:48Z,2025-08-26T00:21:47Z,2025-08-26T00:21:47Z,True,1,0,1,7,8,1
155322,closed,[lldb] Adopt JSONTransport in the MCP Server (Reland),JDevlieghere,"This PR adopts JSONTransport in the MCP server implementation. It required a slight change in design in the relationship between the two server classes. Previously, these two had an ""is-a"" connection, while now they have a ""has-a"" connection.

The ""generic"" protocol server in Protocol/MCP now operates using a single connection (Transport). This matches the design in DAP where each DAP instance has its own connection. The protocol server in Plugins still supports multiple clients and creates a new server instance for each connection.

I believe the new design makes sense in the long term (as proved by DAP) and allows us to make the server stateful if we choose to do so. There's no reason that multiple client support can't live in the generic protocol library, but for now I kept it in ProtocolServerMCP to avoid creating unnecessary abstractions.

This is a reland of #155034 but with significant changes to the tests. The unit tests now test the generic server implementation, which matches the original intent. This also means the test are now single threaded and therefore fully deterministic using the MainLoop.",2025-08-25T22:43:45Z,2025-08-25T23:18:24Z,2025-08-25T23:18:22Z,2025-08-25T23:18:21Z,True,1,0,1,219,263,8
155325,closed,[flang] Added storage specification for [hl]fir.declare.,vzakhari,"As proposed in https://discourse.llvm.org/t/rfc-flang-representation-for-objects-inside-physical-storage/88026,
this patch adds a `storage` Value operand and a `storage_offset`
Integer attribute for `[hl]fir.declare` operations.

The `storage` operand indicates the raw address of the physical storage
a variable belongs to. This is the beginning address of the physical storage.
The `storage_offset` specifies a byte offset within the physical storage
where the variable object starts.
",2025-08-25T23:53:42Z,2025-08-28T02:48:45Z,2025-08-28T02:48:45Z,2025-08-28T02:48:45Z,True,1,3,2,290,36,15
155323,closed,[IR2Vec] Refactor vocabulary to use canonical type IDs,svkeerthy,"Refactor IR2Vec vocabulary to use canonical type IDs, improving the embedding representation for LLVM IR types.

The previous implementation used raw Type::TypeID values directly in the vocabulary, which led to redundant entries (e.g., all float variants mapped to ""FloatTy"" but had separate slots). This change improves the vocabulary by:

1. Making the type representation more consistent by properly canonicalizing types
2. Reducing vocabulary size by eliminating redundant entries
3. Improving the embedding quality by ensuring similar types share the same representation

(Tracking issue - #141817)",2025-08-25T22:59:29Z,2025-08-29T22:04:51Z,2025-08-29T21:56:56Z,2025-08-29T21:56:56Z,True,4,17,1,350,308,9
155324,closed,release/21.x: [libc++] Fix ABI break introduced by switching to _LIBCPP_COMPRESSED_PAIR (#154686),llvmbot,"Backport f5e687d7bf49cd9fe38ba7acdeb52d4f30468dee

Requested by: @h-vetinari",2025-08-25T23:34:11Z,2025-08-26T09:35:33Z,2025-08-26T09:35:33Z,,False,4,0,1,189,36,14
155321,closed,[X86] Use array instead of SmallVector. NFC,topperc,,2025-08-25T22:40:56Z,2025-08-26T16:09:51Z,2025-08-26T16:09:48Z,2025-08-26T16:09:48Z,True,2,0,1,1,1,1
155318,closed,[clang-tidy][test] Make check_clang_tidy.py work with very long file paths,aeubanks,"http://github.com/llvm/llvm-project/pull/95220 added a test with a very long file path, which can fail if run on Windows with a long directory path.

On Windows, there are file path length limits, which can be worked around by prefixing the (absolute) path with '\\?\': https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation",2025-08-25T21:56:42Z,2025-08-26T17:15:52Z,2025-08-26T17:15:47Z,2025-08-26T17:15:47Z,True,3,0,2,7,1,1
155319,closed,release/21.x: [PAC] Fix codegen for polymorphic class variables with consteval constructors (#154858),llvmbot,"Backport e612f37f2c110987ec43f8aa4fe8e86d6f64186f

Requested by: @ahatanak",2025-08-25T22:06:09Z,2025-08-26T13:21:51Z,2025-08-26T09:43:13Z,2025-08-26T09:43:13Z,True,5,0,1,33,11,2
155317,closed,[AMDGPU] gfx1250 waitcnt related codegen tests update. NFC,rampitec,,2025-08-25T21:53:27Z,2025-08-25T22:24:00Z,2025-08-25T22:23:59Z,2025-08-25T22:23:59Z,True,2,0,1,48,24,2
155316,closed,[X86] Fix incorrect NOP insertion between fused instructions that breaks macro fusion,aleks-tmb,"In the https://github.com/llvm/llvm-project/commit/39c8cfb70d203439e3296dfdfe3d41f1cb2ec551 patch, getOrCreateDataFragment was optimized by eagerly allocating an empty fragment when adding a fragment with a variable-size tail. This means that in this case the current MC fragment is no longer the one where the instruction was inserted, and the check
`PendingBA && PendingBA->getNext() == OS.getCurrentFragment()` fails, since CurrentFragment is now the empty fragment instead of the fragment containing the instruction.

`PendingBA -> Fragment with a variable-size tail (contains previous instruction) -> CurrentFragment (newly allocated empty fragment)`

This breaks the macro-fusion logic because it incorrectly assumes another fragment has been inserted between the fused instructions.

Fixes https://github.com/llvm/llvm-project/issues/155045",2025-08-25T21:52:12Z,2025-08-28T08:00:55Z,2025-08-28T08:00:54Z,2025-08-28T08:00:54Z,True,3,10,1,29,2,2
155314,closed,[AMDGPU] Add few missing gfx1250 codegen tests. NFC,rampitec,,2025-08-25T21:48:30Z,2025-08-25T22:22:35Z,2025-08-25T22:22:34Z,2025-08-25T22:22:34Z,True,2,0,1,1553,23,5
155312,closed,[AMDGPU] gfx1250 intrinscs codegen tests update. NFC,rampitec,,2025-08-25T21:44:42Z,2025-08-25T22:18:28Z,2025-08-25T22:18:27Z,2025-08-25T22:18:27Z,True,2,0,1,389,22,4
155310,closed,[AMDGPU] gfx1250 trans instructions bf16 codegen tests update. NFC,rampitec,Co-authored-by: Shilei Tian <Shilei.Tian@amd.com>,2025-08-25T21:42:43Z,2025-08-25T22:10:14Z,2025-08-25T22:10:13Z,2025-08-25T22:10:12Z,True,3,0,1,97,0,3
155313,closed,[clang] NFC: change more places to use Type::getAsTagDecl and friends,mizvekov,"This changes a bunch of places which use getAs<TagType>, including derived types, just to obtain the tag definition.

This is preparation for #155028, offloading all the changes that PR used to introduce which don't depend on any new helpers.",2025-08-25T21:46:06Z,2025-08-29T22:38:44Z,2025-08-25T23:18:57Z,2025-08-25T23:18:57Z,True,9,0,1,613,945,100
155309,closed,[llvm-lipo] Add support for -info with archive files,keith,"Previously trying to print the info of an archive caused a crash. Now we
correctly report the architecture of the contained object files.

Fixes https://github.com/llvm/llvm-project/issues/41655
",2025-08-25T21:42:24Z,2025-08-28T17:02:31Z,2025-08-28T17:02:29Z,2025-08-28T17:02:29Z,True,0,0,1,10,2,2
155308,closed,[AArch64][BTI] Add BTI at EH entries.,shashforge,"[AArch64][BTI] Add BTI at EH entries

Mark EH landing pads as indirect-branch targets (BTI j) and treat WinEH
funclet entries as call-like (BTI c). Add lit tests for ELF and COFF.
Tests:
Adds lit tests: bti-ehpad.ll and wineh-bti-funclet.ll.

Fixes: #149267
",2025-08-25T21:40:47Z,2025-08-30T09:56:04Z,2025-08-30T09:56:04Z,2025-08-30T09:56:04Z,True,5,20,2,167,20,5
155307,closed,[AMDGPU] gfx1250 SADDR tests update. NFC,rampitec,,2025-08-25T21:40:25Z,2025-08-25T22:07:17Z,2025-08-25T22:07:15Z,2025-08-25T22:07:15Z,True,2,0,1,149,97,2
155306,closed,[AMDGPU] gfx1250 run line in the fp atomics test. NFC,rampitec,,2025-08-25T21:37:21Z,2025-08-25T22:15:24Z,2025-08-25T22:15:22Z,2025-08-25T22:15:22Z,True,2,0,1,72,0,1
155305,closed,[AMDGPU] gfx1250 codegen load tests update. NFC.,rampitec,,2025-08-25T21:35:32Z,2025-08-25T22:09:42Z,2025-08-25T22:09:41Z,2025-08-25T22:09:41Z,True,3,0,1,2733,72,5
155302,closed,[compiler-rt] Remove %T from shared object substitutions,boomanaiden154,"Given we are trying to deprecate %T and remove it, we also need to remove it from the substitutions within compiler-rt. This is the last remaining upstream user.

This slightly increases the complexity of using these substitutions because now you need to create/cd into a %t.dir (specifically named that) at the beginning of the directory, but I'm not sure that's more knowledge than what was needed before to write a test using this substitution. These tests also definitely were not race safe previously.",2025-08-25T21:25:55Z,2025-09-08T17:11:14Z,2025-08-25T21:55:28Z,2025-08-25T21:55:28Z,True,7,3,2,35,20,25
155303,closed,[Util] Make pass-test-update.py test case more resilient (NFC),hnrklssn,"This test case matches against python traceback output, which seems to vary slightly between versions. This relaxes the constraints a bit to make the test pass on buildbots.",2025-08-25T21:32:04Z,2025-08-25T22:05:00Z,2025-08-25T22:03:07Z,2025-08-25T22:03:07Z,True,2,0,1,32,37,1
155300,closed,[SCEV] Try to push op into ZExt: C * zext (A + B) -> zext (A*C + B*C),fhahn,"Try to push constant multiply operand into a ZExt containing an add, if possible. In general we are trying to push down ops through ZExt if possible. This is similar to https://github.com/llvm/llvm-project/pull/151227 which did the same for additions.

For now this is restricted to adds with a constant operand, which is similar to some of the logic above.

This enables some additional simplifications.

Alive2 Proof: https://alive2.llvm.org/ce/z/97pbSL",2025-08-25T21:20:28Z,2025-08-26T18:32:01Z,2025-08-26T18:31:51Z,2025-08-26T18:31:51Z,True,2,6,2,33,20,6
155298,closed,[llvmn][CI] Update libc++ metrics to count running & queued aggregates.,cmtice,Update the code that collects the workflow_queue_size and the running_workflow_count data to also collect those statistics for the libc++ aggregates.,2025-08-25T21:18:34Z,2025-08-25T22:21:35Z,2025-08-25T22:21:35Z,2025-08-25T22:21:35Z,True,1,0,5,18,0,1
155295,closed,[AMDGPU] gfx1250 s_buffer_load tests. NFC.,rampitec,,2025-08-25T20:57:24Z,2025-08-25T21:32:52Z,2025-08-25T21:32:50Z,2025-08-25T21:32:50Z,True,3,0,1,2,0,2
155293,closed,[AMDGPU] gfx1250 sram-ecc feature codegen tests. NFC.,rampitec,sram-ecc is always on.,2025-08-25T20:55:15Z,2025-08-25T21:32:31Z,2025-08-25T21:32:30Z,2025-08-25T21:32:30Z,True,2,0,1,4,1,3
155292,closed,[AMDGPU] gfx1250 min/max codegen tests. NFC.,rampitec,,2025-08-25T20:51:27Z,2025-08-25T21:32:09Z,2025-08-25T21:32:08Z,2025-08-25T21:32:08Z,True,3,0,1,1072,1,10
155291,closed,[BOLT] Fix handling of ambiguous jump table entries,maksfb,"Jump tables may contain entries that point immediately past the end of their parent function. Normally, such entries are generated by the compiler as a result of builtin_unreachable() case. We used to replace those entries with a label belonging to their parent function assuming the destination doesn't matter if it's an undefined behavior.

However, if such entry is at the end of the jump table, it could be a real function pointer, not a jump table entry. We rely on heuristics to detect such cases and can drop the trailing function pointer entries from the table.

The problem presents when the ""unreachable"" ambiguous entry is followed by another ambiguous entry corresponding to the start of the parent function. In this case we accept pointers as entries and may incorrectly update the function pointer.

The solution is to keep ambiguous ""unreachable"" jump table entries identical to the original input, i.e. point to the same function. This change does not affect CFG, but results in the entries being updated with the new function address if it gets relocated.",2025-08-25T20:51:21Z,2025-08-26T00:13:31Z,2025-08-26T00:13:31Z,2025-08-26T00:13:31Z,True,1,0,1,102,7,4
155289,closed,[RISCV] Add underscores to instructions names for Zimop/Zcmop.,topperc,"This matches the position of the periods in the mnemonics.

I didn't rename the intrinsics because I'm not sure who uses them.

This will conflict with #152251 which is where I noticed this naming mismatch.",2025-08-25T20:39:08Z,2025-08-25T21:25:02Z,2025-08-25T21:06:28Z,2025-08-25T21:06:28Z,True,2,0,1,21,20,3
155282,closed,[lldb] Do not use LC_FUNCTION_STARTS data to determine symbol size as symbols are created ,bulbazord,"Note: This is a resubmission of #106791. I had to revert this a year ago for a failing test that I could not understand. I have time now to try and get this in again.

Summary:
This improves the performance of ObjectFileMacho::ParseSymtab by removing eager and expensive work in favor of doing it later in a less-expensive fashion.

Experiment:
My goal was to understand LLDB's startup time.
First, I produced a Debug build of LLDB (no dSYM) and a Release+NoAsserts build of LLDB. The Release build debugged the Debug build as it debugged a small C++ program. I found that ObjectFileMachO::ParseSymtab accounted for somewhere between 1.2 and 1.3 seconds consistently. After applying this change, I consistently measured a reduction of approximately 100ms, putting the time closer to 1.1s and 1.2s on average.

Background:
ObjectFileMachO::ParseSymtab will incrementally create symbols by parsing nlist entries from the symtab section of a MachO binary. As it does this, it eagerly tries to determine the size of symbols (e.g. how long a function is) using LC_FUNCTION_STARTS data (or eh_frame if LC_FUNCTION_STARTS is unavailable). Concretely, this is done by performing a binary search on the function starts array and calculating the distance to the next function or the end of the section (whichever is smaller).

However, this work is unnecessary for 2 reasons:
1. If you have debug symbol entries (i.e. STABs), the size of a function is usually stored right after the function's entry. Performing this work right before parsing the next entry is unnecessary work.
2. Calculating symbol sizes for symbols of size 0 is already performed in `Symtab::InitAddressIndexes` after all the symbols are added to the Symtab. It also does this more efficiently by walking over a list of symbols sorted by address, so the work to calculate the size per symbol is constant instead of O(log n).",2025-08-25T19:36:10Z,2025-08-26T20:21:32Z,2025-08-26T20:21:29Z,2025-08-26T20:21:28Z,True,1,1,1,0,122,1
155286,closed,[RISCV] Add tied source operand to Zvqdotq MC instructions.,topperc,"This is consistent with what we do for integer and FP multiply accumulate instructions.

We need new classes because normal multiply accumulate have the operands in a different order.",2025-08-25T20:14:42Z,2025-08-26T16:05:22Z,2025-08-26T16:05:19Z,2025-08-26T16:05:19Z,True,1,0,1,38,7,1
155284,closed,release/21.x: [analyzer] Drop false asserts in handling assume attribures,llvmbot,"Backport 0a1eff2ecedcb11acb3e9d4b75ee1e1bebd69a70 6c9f1ce429809e5a91683ed6cef9a435047bebd1

Requested by: steakhal",2025-08-25T19:47:01Z,2025-08-26T09:42:51Z,2025-08-26T09:42:50Z,2025-08-26T09:42:50Z,True,4,0,2,6,1,2
155280,closed,"Revert ""[lldb] Adopt JSONTransport in the MCP Server""",JDevlieghere,Reverts llvm/llvm-project#155034 because the unit tests are flakey on the Debian bot: https://lab.llvm.org/buildbot/#/builders/162. ,2025-08-25T19:33:51Z,2025-08-25T19:34:39Z,2025-08-25T19:34:37Z,2025-08-25T19:34:37Z,True,1,0,1,127,190,5
155279,closed,[flang] Disable loop interchange by default,nikic,"Disable loop interchange by default, while keeping the ability to explicitly enable using `-floop-interchange`. This matches Clang.

See discussion on https://github.com/llvm/llvm-project/pull/140182.",2025-08-25T19:25:54Z,2025-08-26T07:21:22Z,2025-08-26T07:14:21Z,2025-08-26T07:14:21Z,True,3,0,1,5,11,2
155276,closed,"Reapply ""[clang][bytecode] Fix incorrect offset in elem() (#155157)""",tbaederr,"This reverts commit 9642aadf7064192164d1687378d28d6bda1978c9.

Since elem() only works on primitive arrays anyway, we don't have to do the isArrayRoot() check at all.",2025-08-25T18:00:57Z,2025-08-26T03:24:18Z,2025-08-26T03:24:18Z,2025-08-26T03:24:18Z,True,2,0,1,15,8,3
155278,closed,[mlir][spirv] Propagate alignment requirements from vector to spirv,amd-eochoalo,"Propagates the alignment attribute from `vector.{load,store}` to `spirv.{load,store}`.",2025-08-25T19:16:11Z,2025-08-28T17:06:16Z,2025-08-28T17:06:16Z,2025-08-28T17:06:16Z,True,2,11,4,99,5,4
155275,closed,[CIR] Add support for initializing classes with multiple vtables,andykaylor,This adds support for initializing the vptr members in a class that requires multiple vtables because of multiple inheritence. This still does not handle virtual bases.,2025-08-25T17:32:47Z,2025-08-27T00:20:22Z,2025-08-27T00:19:48Z,2025-08-27T00:19:48Z,True,1,4,3,189,52,3
155272,closed,[clang] fix runtime check listing types which can appear in a NestedNameSpecifier,mizvekov,"Through alias templates, followed by canonicalization, any canonical dependent type can appear in a NestedNameSpecifier. Remove the list as a practical matter.

This fixes a regression reported here: https://github.com/llvm/llvm-project/pull/147835#issuecomment-3220455978

Since the regression was never released, there are no release notes.

Fixes #155260",2025-08-25T16:54:51Z,2025-08-26T00:10:02Z,2025-08-25T17:45:51Z,2025-08-25T17:45:51Z,True,2,0,1,16,22,2
155271,closed,"Reapply ""[fuzzer][Fuchsia] Prevent deadlock from suspending threads"" …",PiJoules,"…(#155042)

This reverts commit 781a4db6b50bb660cb293d3e7e29957aeb4b02ac.

Relanded with the fix declaring StartRssThread.",2025-08-25T16:50:00Z,2025-08-25T16:50:49Z,2025-08-25T16:50:42Z,2025-08-25T16:50:42Z,True,1,0,2,63,3,2
155264,closed,[mlir][amx] Increase op verifier test coverage,adam-smnk,Refactors and adds more test cases for invalid AMX operations.,2025-08-25T15:53:14Z,2025-08-25T16:33:09Z,2025-08-25T16:33:09Z,2025-08-25T16:33:09Z,True,1,0,1,102,8,1
155261,closed,[GWP-ASan] Include <unistd.h> for sysconf(_SC_PAGESIZE),fabio-d,This fixes build failures on Fuchsia that started with #153860,2025-08-25T15:35:53Z,2025-08-26T13:11:49Z,2025-08-26T13:11:49Z,2025-08-26T13:11:49Z,True,1,0,1,4,0,2
155259,closed,[mlir][vector] Improve vector dialect documentation and constraint predicates,amd-eochoalo,"This PR changes the documentation of the vector dialect to better reflect reality. When vector operations with alignment requirements are violated, undefined behavior will occur.

This PR also adds the predicate `IntValidAlignment` and adds it as constraint predicates for alignment attribtues.",2025-08-25T15:29:47Z,2025-08-27T18:40:18Z,2025-08-27T18:40:18Z,2025-08-27T18:40:18Z,True,1,0,3,28,32,2
155258,closed,[mlir][GPU] Update CODEOWNERS,fabianmcg,Updating the CODEOWNERS file to more easily perform the MLIR GPU dialect maintainer role.,2025-08-25T15:21:50Z,2025-08-25T17:36:10Z,2025-08-25T17:36:10Z,2025-08-25T17:36:10Z,True,0,0,1,3,0,1
155257,closed,[flang][OpenMP] Fix parsing of ASSUME directive,kparzysz,The ASSUME directive is block-associated and whether the end-directive is optional or not depends on the form of the block. This is all taken care of automatically since the AST node for ASSUME inherits from OmpBlockConstruct.,2025-08-25T15:21:45Z,2025-08-27T12:31:54Z,2025-08-27T12:31:52Z,2025-08-27T12:31:52Z,True,1,3,3,149,94,8
155253,closed,[ConstraintElim] Use constraints from bounded memory accesses,dtcxzyw,"This patch removes bound checks that are dominated by bounded memory accesses. For example, if we have an array `int A[5]` and `A[idx]` is performed successfully, we know that `idx u< 5` after the load.

compile-time impact (+0.1%): https://llvm-compile-time-tracker.com/compare.php?from=f0e9bba024d44b55d54b02025623ce4a3ba5a37c&to=5227b08a4a514159ec524d1b1ca18ed8ab5407df&stat=instructions%3Au
llvm-opt-benchmark: https://github.com/dtcxzyw/llvm-opt-benchmark/pull/2709

Proof: https://alive2.llvm.org/ce/z/JEyjA2
",2025-08-25T14:51:49Z,2025-09-03T13:01:54Z,2025-09-02T13:41:02Z,2025-09-02T13:41:02Z,True,6,17,7,478,7,2
155254,closed,[MLIR] Fix LLVM doc link in MemRefOps.td,jackalcooper,,2025-08-25T14:53:19Z,2025-08-25T15:55:50Z,2025-08-25T15:55:50Z,2025-08-25T15:55:50Z,True,2,0,2,2,2,1
155252,closed,"[libc++] Add a release note about multi{map,set}::find not returning the first element anymore",philnik777,"We've modified the algorithm of `__tree::find` in #152370, which can change the return value. Since we're always returned the lower bound before some users started relying on it. This patch adds a release note so users are aware that this might break their code.

",2025-08-25T14:49:03Z,2025-08-26T06:00:16Z,2025-08-26T06:00:13Z,2025-08-26T06:00:13Z,True,2,1,2,2,0,1
155250,closed,[profcheck] Exclude test introduced in 3054e06,mtrofin,"LoopVectorize hasn't yet been addressed, new tests will fail.

Issue #147390",2025-08-25T14:32:32Z,2025-08-25T14:36:47Z,2025-08-25T14:36:46Z,2025-08-25T14:36:46Z,True,1,0,3,1,0,1
155251,closed,release/21.x [libc++] Fix ABI break introduced by switching to _LIBCPP_COMPRESSED_PAIR (#154686),philnik777,Backport f5e687d7bf49cd9fe38ba7acdeb52d4f30468dee,2025-08-25T14:37:46Z,2025-08-26T06:47:14Z,2025-08-26T06:36:27Z,2025-08-26T06:36:27Z,True,5,0,1,189,36,14
155249,closed,[profcheck] Exclude Coro-related tests in introduced in PR #154894,mtrofin,"We haven't yet addressed Coro (or Instrumentation) tests.

Issue #147390",2025-08-25T14:32:29Z,2025-08-25T14:33:22Z,2025-08-25T14:33:20Z,2025-08-25T14:33:20Z,True,1,0,1,2,0,1
155248,closed,[mlir][nfc] Remove `TrivialPatternRewriter`s,Hardcode84,"These are relics from the times when `PatternRewriter` was not instantiable directly, I suppose.",2025-08-25T14:30:34Z,2025-08-25T15:50:22Z,2025-08-25T15:50:17Z,2025-08-25T15:50:17Z,True,3,0,2,4,25,4
155245,closed,[libc++] Optimize most of the __tree search algorithms,philnik777,"This patch introduces a new comparator, namely `__lazy_synth_three_way`, which tries to provide an efficient three way comparator for known types and falls back to using the provided comparator if it doesn't know how to do that. Currently, an efficient three way comparison is only provided when using one of the `less` comparions object from the standard library and `std::string`. This will be extended in future patches.

```
------------------------------------------------------------------------------------------------------------------------------
Benchmark                                                                                                  old             new
------------------------------------------------------------------------------------------------------------------------------
std::map<std::string, int>::ctor(const&)/0                                                             12.6 ns         12.6 ns
std::map<std::string, int>::ctor(const&)/32                                                             858 ns          837 ns
std::map<std::string, int>::ctor(const&)/1024                                                         46700 ns        46739 ns
std::map<std::string, int>::ctor(const&)/8192                                                        458100 ns       449806 ns
std::map<std::string, int>::ctor(iterator, iterator) (unsorted sequence)/0                             12.8 ns         12.7 ns
std::map<std::string, int>::ctor(iterator, iterator) (unsorted sequence)/32                            1286 ns         1266 ns
std::map<std::string, int>::ctor(iterator, iterator) (unsorted sequence)/1024                         93812 ns        84686 ns
std::map<std::string, int>::ctor(iterator, iterator) (unsorted sequence)/8192                       1480346 ns      1385924 ns
std::map<std::string, int>::ctor(iterator, iterator) (sorted sequence)/0                               12.9 ns         12.8 ns
std::map<std::string, int>::ctor(iterator, iterator) (sorted sequence)/32                              1044 ns         1055 ns
std::map<std::string, int>::ctor(iterator, iterator) (sorted sequence)/1024                           63071 ns        62861 ns
std::map<std::string, int>::ctor(iterator, iterator) (sorted sequence)/8192                          595046 ns       590223 ns
std::map<std::string, int>::operator=(const&) (into cleared Container)/0                               13.6 ns         13.6 ns
std::map<std::string, int>::operator=(const&) (into cleared Container)/32                               880 ns          911 ns
std::map<std::string, int>::operator=(const&) (into cleared Container)/1024                           48627 ns        47808 ns
std::map<std::string, int>::operator=(const&) (into cleared Container)/8192                          458552 ns       454497 ns
std::map<std::string, int>::operator=(const&) (into partially populated Container)/0                   13.8 ns         13.6 ns
std::map<std::string, int>::operator=(const&) (into partially populated Container)/32                   864 ns          851 ns
std::map<std::string, int>::operator=(const&) (into partially populated Container)/1024               49483 ns        49555 ns
std::map<std::string, int>::operator=(const&) (into partially populated Container)/8192              456977 ns       457894 ns
std::map<std::string, int>::operator=(const&) (into populated Container)/0                             1.31 ns         1.31 ns
std::map<std::string, int>::operator=(const&) (into populated Container)/32                             425 ns          415 ns
std::map<std::string, int>::operator=(const&) (into populated Container)/1024                         14248 ns        14225 ns
std::map<std::string, int>::operator=(const&) (into populated Container)/8192                        136684 ns       133696 ns
std::map<std::string, int>::insert(value) (already present)/0                                          21.5 ns         16.2 ns
std::map<std::string, int>::insert(value) (already present)/32                                         22.7 ns         25.1 ns
std::map<std::string, int>::insert(value) (already present)/1024                                       54.5 ns         29.1 ns
std::map<std::string, int>::insert(value) (already present)/8192                                       78.4 ns         30.4 ns
std::map<std::string, int>::insert(value) (new value)/0                                                40.9 ns         39.0 ns
std::map<std::string, int>::insert(value) (new value)/32                                               58.3 ns         47.2 ns
std::map<std::string, int>::insert(value) (new value)/1024                                              120 ns         71.3 ns
std::map<std::string, int>::insert(value) (new value)/8192                                              157 ns          129 ns
std::map<std::string, int>::insert(hint, value) (good hint)/0                                          40.3 ns         40.7 ns
std::map<std::string, int>::insert(hint, value) (good hint)/32                                         48.0 ns         30.0 ns
std::map<std::string, int>::insert(hint, value) (good hint)/1024                                        107 ns         63.2 ns
std::map<std::string, int>::insert(hint, value) (good hint)/8192                                        132 ns          107 ns
std::map<std::string, int>::insert(hint, value) (bad hint)/0                                           27.0 ns         40.9 ns
std::map<std::string, int>::insert(hint, value) (bad hint)/32                                          68.3 ns         58.4 ns
std::map<std::string, int>::insert(hint, value) (bad hint)/1024                                         125 ns         82.0 ns
std::map<std::string, int>::insert(hint, value) (bad hint)/8192                                         155 ns          150 ns
std::map<std::string, int>::insert(iterator, iterator) (all new keys)/0                                 404 ns          405 ns
std::map<std::string, int>::insert(iterator, iterator) (all new keys)/32                               2004 ns         1805 ns
std::map<std::string, int>::insert(iterator, iterator) (all new keys)/1024                           102820 ns        76102 ns
std::map<std::string, int>::insert(iterator, iterator) (all new keys)/8192                          1144590 ns       949266 ns
std::map<std::string, int>::insert(iterator, iterator) (half new keys)/0                                408 ns          404 ns
std::map<std::string, int>::insert(iterator, iterator) (half new keys)/32                              1592 ns         1377 ns
std::map<std::string, int>::insert(iterator, iterator) (half new keys)/1024                           74847 ns        53921 ns
std::map<std::string, int>::insert(iterator, iterator) (half new keys)/8192                          828505 ns       698716 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from same type)/0              407 ns          407 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from same type)/32            1584 ns         1557 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from same type)/1024         47157 ns        47443 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from same type)/8192        623887 ns       628385 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from zip_view)/0               405 ns          403 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from zip_view)/32             1478 ns         1510 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from zip_view)/1024          47852 ns        47835 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from zip_view)/8192         605311 ns       606951 ns
std::map<std::string, int>::erase(key) (existent)/0                                                     129 ns         94.0 ns
std::map<std::string, int>::erase(key) (existent)/32                                                    110 ns          106 ns
std::map<std::string, int>::erase(key) (existent)/1024                                                  121 ns          128 ns
std::map<std::string, int>::erase(key) (existent)/8192                                                  165 ns         66.9 ns
std::map<std::string, int>::erase(key) (non-existent)/0                                               0.269 ns        0.257 ns
std::map<std::string, int>::erase(key) (non-existent)/32                                               21.9 ns         11.3 ns
std::map<std::string, int>::erase(key) (non-existent)/1024                                             53.5 ns         25.4 ns
std::map<std::string, int>::erase(key) (non-existent)/8192                                             67.3 ns         31.9 ns
std::map<std::string, int>::erase(iterator)/0                                                          46.3 ns         46.7 ns
std::map<std::string, int>::erase(iterator)/32                                                         44.4 ns         41.8 ns
std::map<std::string, int>::erase(iterator)/1024                                                       43.7 ns         46.4 ns
std::map<std::string, int>::erase(iterator)/8192                                                       45.2 ns         44.1 ns
std::map<std::string, int>::erase(iterator, iterator) (erase half the container)/0                      407 ns          407 ns
std::map<std::string, int>::erase(iterator, iterator) (erase half the container)/32                     876 ns          906 ns
std::map<std::string, int>::erase(iterator, iterator) (erase half the container)/1024                 20880 ns        20444 ns
std::map<std::string, int>::erase(iterator, iterator) (erase half the container)/8192                252881 ns       241583 ns
std::map<std::string, int>::clear()/0                                                                   407 ns          408 ns
std::map<std::string, int>::clear()/32                                                                 1252 ns         1323 ns
std::map<std::string, int>::clear()/1024                                                              38488 ns        38017 ns
std::map<std::string, int>::clear()/8192                                                             416492 ns       428534 ns
std::map<std::string, int>::find(key) (existent)/0                                                    0.008 ns        0.008 ns
std::map<std::string, int>::find(key) (existent)/32                                                    33.9 ns         15.3 ns
std::map<std::string, int>::find(key) (existent)/1024                                                  43.0 ns         25.5 ns
std::map<std::string, int>::find(key) (existent)/8192                                                  44.6 ns         29.3 ns
std::map<std::string, int>::find(key) (non-existent)/0                                                0.259 ns        0.257 ns
std::map<std::string, int>::find(key) (non-existent)/32                                                22.6 ns         11.4 ns
std::map<std::string, int>::find(key) (non-existent)/1024                                              48.6 ns         25.1 ns
std::map<std::string, int>::find(key) (non-existent)/8192                                              64.1 ns         31.1 ns
std::map<std::string, int>::count(key) (existent)/0                                                   0.008 ns        0.008 ns
std::map<std::string, int>::count(key) (existent)/32                                                   32.2 ns         17.3 ns
std::map<std::string, int>::count(key) (existent)/1024                                                 42.4 ns         25.3 ns
std::map<std::string, int>::count(key) (existent)/8192                                                 44.4 ns         31.6 ns
std::map<std::string, int>::count(key) (non-existent)/0                                               0.260 ns        0.259 ns
std::map<std::string, int>::count(key) (non-existent)/32                                               22.9 ns         11.3 ns
std::map<std::string, int>::count(key) (non-existent)/1024                                             49.8 ns         25.5 ns
std::map<std::string, int>::count(key) (non-existent)/8192                                             66.3 ns         31.9 ns
std::map<std::string, int>::contains(key) (existent)/0                                                0.008 ns        0.008 ns
std::map<std::string, int>::contains(key) (existent)/32                                                31.4 ns         18.0 ns
std::map<std::string, int>::contains(key) (existent)/1024                                              44.3 ns         26.5 ns
std::map<std::string, int>::contains(key) (existent)/8192                                              47.4 ns         30.2 ns
std::map<std::string, int>::contains(key) (non-existent)/0                                            0.452 ns        0.441 ns
std::map<std::string, int>::contains(key) (non-existent)/32                                            23.1 ns         11.5 ns
std::map<std::string, int>::contains(key) (non-existent)/1024                                          46.2 ns         26.3 ns
std::map<std::string, int>::contains(key) (non-existent)/8192                                          63.4 ns         31.4 ns
std::map<std::string, int>::lower_bound(key) (existent)/0                                             0.008 ns        0.008 ns
std::map<std::string, int>::lower_bound(key) (existent)/32                                             17.2 ns         19.0 ns
std::map<std::string, int>::lower_bound(key) (existent)/1024                                           27.1 ns         26.2 ns
std::map<std::string, int>::lower_bound(key) (existent)/8192                                           34.0 ns         36.0 ns
std::map<std::string, int>::lower_bound(key) (non-existent)/0                                         0.259 ns        0.257 ns
std::map<std::string, int>::lower_bound(key) (non-existent)/32                                         11.6 ns         11.5 ns
std::map<std::string, int>::lower_bound(key) (non-existent)/1024                                       24.8 ns         25.6 ns
std::map<std::string, int>::lower_bound(key) (non-existent)/8192                                       31.7 ns         31.6 ns
std::map<std::string, int>::upper_bound(key) (existent)/0                                             0.008 ns        0.008 ns
std::map<std::string, int>::upper_bound(key) (existent)/32                                             18.8 ns         19.7 ns
std::map<std::string, int>::upper_bound(key) (existent)/1024                                           25.3 ns         27.7 ns
std::map<std::string, int>::upper_bound(key) (existent)/8192                                           30.2 ns         29.9 ns
std::map<std::string, int>::upper_bound(key) (non-existent)/0                                         0.260 ns        0.259 ns
std::map<std::string, int>::upper_bound(key) (non-existent)/32                                         11.3 ns         12.0 ns
std::map<std::string, int>::upper_bound(key) (non-existent)/1024                                       25.6 ns         25.9 ns
std::map<std::string, int>::upper_bound(key) (non-existent)/8192                                       33.1 ns         34.2 ns
std::map<std::string, int>::equal_range(key) (existent)/0                                             0.008 ns        0.008 ns
std::map<std::string, int>::equal_range(key) (existent)/32                                             33.5 ns         15.8 ns
std::map<std::string, int>::equal_range(key) (existent)/1024                                           43.0 ns         25.1 ns
std::map<std::string, int>::equal_range(key) (existent)/8192                                           54.1 ns         30.7 ns
std::map<std::string, int>::equal_range(key) (non-existent)/0                                         0.265 ns        0.259 ns
std::map<std::string, int>::equal_range(key) (non-existent)/32                                         22.1 ns         12.1 ns
std::map<std::string, int>::equal_range(key) (non-existent)/1024                                       44.8 ns         24.4 ns
std::map<std::string, int>::equal_range(key) (non-existent)/8192                                       62.2 ns         40.1 ns
```

Fixes #66577",2025-08-25T13:49:59Z,2025-09-08T07:56:18Z,2025-09-08T07:56:14Z,2025-09-08T07:56:14Z,True,2,20,1,277,46,14
155247,closed,[clang-format] Use proper flags for git diff-tree,boomanaiden154,"From local testing, git diff-tree does not support three dot diffs correctly, instead expecting the --merge-base flag to be passed along with two commits.  From my reading, the documentation (https://git-scm.com/docs/git-diff-tree) also confirms this. This patch updates the git-clang-format script to be correct.

I don't think we ever ran into this issue before because we never ended up using it. For the PR code format job I believe we would just explicitly pass the merge base, completely bypassing the problem.",2025-08-25T14:08:25Z,2025-08-26T18:23:07Z,2025-08-26T16:55:28Z,2025-08-26T16:55:28Z,True,3,0,2,1,1,1
155244,closed,[mlir][Transforms] Add support for `ConversionPatternRewriter::replaceAllUsesWith`,matthias-springer,"This commit generalizes `replaceUsesOfBlockArgument` to `replaceAllUsesWith`. In rollback mode, the same restrictions keep applying: a value cannot be replaced multiple times and a call to `replaceAllUsesWith` will replace all current and future uses of the `from` value.

`replaceAllUsesWith` is now fully supported and its behavior is consistent with the remaining dialect conversion API. Before this commit, `replaceAllUsesWith` was immediately reflected in the IR when running in rollback mode. After this commit, `replaceAllUsesWith` changes are materialized in a delayed fashion, at the end of the dialect conversion. This is consistent with the `replaceUsesOfBlockArgument` and `replaceOp` APIs.

`replaceAllUsesExcept` etc. are still not supported and will be deactivated on the `ConversionPatternRewriter` (when running in rollback mode) in a follow-up commit.

Note for LLVM integration: Replace `replaceUsesOfBlockArgument` with `replaceAllUsesWith`. If you are seeing failures, you may have patterns that use `replaceAllUsesWith` incorrectly (e.g., being called multiple times on the same value) or bypass the rewriter API entirely. E.g., such failures were mitigated in Flang by switching to the walk-patterns driver (#156171).

You can temporarily reactivate the old behavior by calling `RewriterBase::replaceAllUsesWith`. However, note that that behavior is faulty in a dialect conversion. E.g., the base `RewriterBase::replaceAllUsesWith` implementation does not see uses of the `from` value that have not materialized yet and will, therefore, not replace them.
",2025-08-25T13:30:03Z,2025-09-09T21:17:33Z,2025-09-06T09:17:55Z,2025-09-06T09:17:55Z,True,9,2,1,194,91,8
155243,closed,[mlir] Fix bug in PDLL Parser,JOE1994,"This reverts changes made to `mlir/lib/Tools/PDLL/Parser/Parser.cpp` in 095b41c6eedb3acc908dc63ee91ff77944c07d75 .

`raw_indented_ostream::printReindented()` reads from a string to which it also concurrently writes to, causing unintended behavior.

Credits to @jackalcooper for finding the issue.",2025-08-25T13:29:18Z,2025-08-25T14:56:17Z,2025-08-25T14:16:36Z,2025-08-25T14:16:36Z,True,2,0,1,2,1,1
155242,closed,[mlir][SCFToOpenMP] Use walk pattern driver,matthias-springer,"The lowering pattern uses various APIs that are not supported in a dialect conversion such as `Block::eraseArguments` and `RewriterBase::replaceAllUsesWith`. Switch to the more efficient and simpler walk pattern driver.
",2025-08-25T13:28:39Z,2025-08-26T09:52:03Z,2025-08-26T09:52:01Z,2025-08-26T09:52:01Z,True,1,7,1,10,7,1
155246,closed,[AMDGPU][Attributor] Remove final update of waves-per-eu after the attributor run,shiltian,"We do not need this in the attributor, because `ST.getWavesPerEU` accounts for both the waves-per-eu and flat-workgroup-size attributes. If the waves-per-eu values are not valid, it drops them. In the attributor, we only need to propagate the values without using intermediate flat workgroup size values.

Fixes SWDEV-550257.",2025-08-25T13:51:59Z,2025-08-27T18:11:06Z,2025-08-27T18:11:04Z,2025-08-27T18:11:04Z,True,4,0,1,216,288,32
155241,closed,[AMDGPU] Prevent generation of unused SGPR IMPLICIT_DEF assignments,chrisjbris,"Dead VGPR->SGPR copies were converted to IMPLICIT_DEF assignments that were unused. Prevent these from being created and update the numerous affected tests. This fixes https://github.com/llvm/llvm-project/issues/144518. But perhaps we don't want to do this, based on the comment in SIInstrinfo.cpp and the commit below - 

https://github.com/chrisjbris/llvm-project/commit/69932e4d692f20615935db0d48f45b21a89cae23 states that this behaviour is desired.",2025-08-25T12:58:36Z,2025-08-27T12:18:18Z,2025-08-27T12:18:18Z,2025-08-27T12:18:18Z,True,4,1,4,241,3848,72
155238,closed,[lldb][lldb-dap] parse `pathFormat` as an optional,da-viper,pathFormat is an optional field in `initializeAruguments`.,2025-08-25T12:19:31Z,2025-08-26T14:26:01Z,2025-08-26T14:26:01Z,2025-08-26T14:26:01Z,True,1,0,1,1,1,1
155237,closed,[clang-tidy] Limit modernize-use-constraints to standard enable_if,NagyDonat,"This commit ensures that the modernize-use-constraints check ignores templates that happen to be named `enable_if` or `enable_if_t` if they are not declared in the namespace `std`.

This patch motivated by a crash observed during the analysis of the open source library https://github.com/Neargye/magic_enum/ which declares a template `detail::enable_if_t` with semantics that significantly differ from the standard one. (I was unable to reproduce that crash with the standard `enable_if_t`.)

However, there are other projects that use non-standard `enable_if`: even `boost` declares a `boost::enable_if` which excepts different parameters than `std::enable_if`.",2025-08-25T12:06:03Z,2025-08-27T11:53:22Z,2025-08-27T11:53:22Z,,False,5,1,1,32,2,2
155235,closed,[AMDGPU] Fix unittest sign-compare,ro-i,"Apparently, some buildbots build unittests with `-Werror,-Wsign-compare`: https://lab.llvm.org/buildbot/#/builders/145/builds/9299",2025-08-25T12:00:08Z,2025-08-25T12:36:20Z,2025-08-25T12:36:20Z,2025-08-25T12:36:20Z,True,1,0,1,1,1,1
155236,closed,[SCEV][LAA] Support multiplication overflow computation,annamthomas,"Add support for identifying multiplication overflow in SCEV.
This is needed in LoopAccessAnalysis and that limitation was worked around
by 484417a.
  This allows early-exit vectorization to work as expected in
    vect.stats.ll test without needing the workaround.
",2025-08-25T12:03:05Z,2025-08-27T18:20:04Z,2025-08-27T12:11:32Z,2025-08-27T12:11:32Z,True,2,6,3,31,14,4
155231,closed,[RISCV] Fix incorrect folding of select on ctlz/cttz,MitchBriles,"This patch tries to fix [#155014](https://github.com/llvm/llvm-project/issues/155014). The pattern of `ctlz`/`cttz` -> `icmp` -> `select` can occur when accounting for targets which don't support `cttz(0)` or `ctlz(0)`. We can replace this with a mask, but **only on power-of-2 bitwidths**.

cc @lenary, @topperc ",2025-08-25T10:37:06Z,2025-09-03T01:14:16Z,2025-09-03T01:13:55Z,2025-09-03T01:13:54Z,True,6,7,4,766,1,2
155233,closed,"[SLP][NFC] Simplify `insert(std::make_pair(K, V))` -> `try_emplace(K, V)`",pfusik,"These are equivalent as `MapVector::insert` simply calls `MapVector::try_emplace`.

BTW, correct a comment typo.",2025-08-25T11:04:48Z,2025-08-26T04:28:07Z,2025-08-26T04:28:07Z,2025-08-26T04:28:07Z,True,2,0,1,9,12,1
155230,closed,[clang][bytecode] Reject dependent RequiresExprs,tbaederr,Fixes #152899,2025-08-25T10:23:27Z,2025-08-28T01:22:48Z,2025-08-27T10:04:44Z,2025-08-27T10:04:44Z,True,6,0,1,16,0,2
155229,closed,[TableGen][DecoderEmitter] Remove dead OPC_Fail,s-barannikov,"It can never be reached. It could be reached if we emitted an opcode that could fall outside the outermost scope, but emission of all such opcodes is guarded by `!isOutermostScope()`.

That also means we never add fixups to the outermost scope, so avoid pushing an entry for it onto the stack.
",2025-08-25T10:16:19Z,2025-08-25T16:15:38Z,2025-08-25T16:15:36Z,2025-08-25T16:15:36Z,True,1,0,1,43,61,12
155228,closed,[StandardInstrumentations] Make -print-after-pass-number/-print-after-pass-number options allow multiple pass numbers specified,Enna1,"`-print-before` and `-print-after` support multiple passes as a list of strings, so it makes sense that we also support `-print-before-pass-number` and `-print-after-pass-number` taking a list of pass numbers as input. This is useful if you want to print out the IRs before/after specified passes with pass numbers reported by print-pass-numbers in a single run.",2025-08-25T10:03:20Z,2025-08-26T01:22:52Z,2025-08-26T01:22:50Z,2025-08-26T01:22:50Z,True,1,0,2,21,11,2
155227,closed,[mlir][Transforms] Tighten `replaceUsesOfBlockArgument`,matthias-springer,"Improve the documentation of `replaceUsesOfBlockArgument` to clarify its semantics in rollback mode. Add an assertion to make sure that the same block argument is not replaced multiple times. That's an API violation and messes with the internal state of the conversion driver.

This commit is in preparation of adding full support for `RewriterBase::replaceAllUsesWith`.
",2025-08-25T09:36:08Z,2025-08-25T14:20:13Z,2025-08-25T12:47:12Z,2025-08-25T12:47:12Z,True,4,0,1,24,0,2
155226,closed,[llvm-lit] Add Windows .cmd wrapper to make llvm-lit directly runnable,omjavaid,"On Linux/Mac, `llvm-lit` is configured with a shebang and made executable so tools like LNT and the test-suite can invoke it directly. On Windows the build only produces `llvm-lit.py` which cannot be used as a standalone executable. This caused problems when running the LLVM test-suite via LNT or buildbots.

This change introduces a new template file `llvm-lit.cmd.in` and updates `llvm/utils/llvm-lit/CMakeLists.txt` so that a corresponding `llvm-lit.cmd` is generated in the `build/bin` directory (for both single-config and multi-config generators). The wrapper simply invokes the configured Python interpreter on the adjacent `llvm-lit.py` and propagates the exit code.

This ensures that `llvm-lit` can be used as a direct executable on Windows just like on Linux without requiring external wrappers or modifications in buildbot scripts or LNT.
",2025-08-25T09:13:35Z,2025-08-29T08:54:21Z,2025-08-29T08:54:21Z,2025-08-29T08:54:21Z,True,3,7,3,19,1,3
155225,closed,[X86] Fix spill issue for fr16,LuoYuanke,"When avx512fp16 is not available, we use MOVSS to spill fr16/fr16x register.
However The MOVSSmr require fr32 register class and MOVSSrm require vr128
register class which cause bad instruction detected by machine verifier.
To fix the issue this patch is to create a pseudo instruction MOVSHP for
fr16 register spilling. MOVSHP is expanded to MOVSS or VMOVSSZ depending
on the register number.
",2025-08-25T09:01:29Z,2025-08-26T09:14:14Z,2025-08-26T07:35:40Z,2025-08-26T07:35:40Z,True,2,5,3,134,7,4
155223,closed,[flang][do concurrent] Use values yielded by `local init` regions,ergawy,"Similar to what is done for OpenMP `private` clauses, prefer the value yielded from the init region to the allocated private variable in case the region is operating on arguments by-value (e.g. Fortran character boxes).

This changes provides the same results as https://github.com/llvm/llvm-project/pull/154303 in both the LLVM and Fujitsu test suites (so no regressions).

```
Testing Time: 7216.26s
  Passed            : 88522
  Failed            :   160
  Executable Missing:   408
```
",2025-08-25T08:56:22Z,2025-08-26T13:17:33Z,2025-08-26T04:11:15Z,2025-08-26T04:11:15Z,True,2,0,1,67,5,2
155224,closed,[mlir][emitc] Support array result for `emitc.member` and `emitc.member_of_ptr`,CoTinker,"This PR adds array type as a valid result type for `emitc.member` and `emitc.member_of_ptr`, enabling direct access and assignment to struct array members in EmitC.",2025-08-25T09:00:33Z,2025-08-29T01:12:26Z,2025-08-29T01:12:19Z,2025-08-29T01:12:19Z,True,5,0,3,40,9,3
155222,closed,[AMDGPU] More radical feature initialization refactoring,rampitec,"Factoring in flang, just have a single fillAMDGPUFeatureMap
function doing it all as an external interface and returing
an error.",2025-08-25T08:20:15Z,2025-08-27T08:21:17Z,2025-08-27T08:21:15Z,2025-08-27T08:21:15Z,True,7,4,7,334,329,4
155221,closed,[LoopPeel] Address followup comments on #121104,kasuga-fj,"This is a follow-up PR for post-commit comments in #121104 .

Details:

- Rename `mergeTwoCounter` to `mergeTwoCounters` (add trailing `s`).
- Avoid duplicated hash lookup.
- Use `///` instead of `//`.
- Fix typo.",2025-08-25T08:18:49Z,2025-08-25T09:18:49Z,2025-08-25T09:18:45Z,2025-08-25T09:18:45Z,True,3,0,1,9,11,1
155218,closed,release/21.x: [clang] Remove hasValue() check in `RecordExprEvaluator::VisitCXXConstructExpr()` (#154610),philnik777,Backport 8b3d4bdf8bade1d1faa8ff3fcbdda7060f8b46d8,2025-08-25T07:41:24Z,2025-08-26T06:39:38Z,2025-08-26T06:39:02Z,2025-08-26T06:39:02Z,True,2,0,1,16,4,2
155220,closed,[TableGen][DecoderEmitter] Factor out DecoderTableBuilder,s-barannikov,"Extract the table building methods from FilterChooser into a separate class to relieve it of one of its responsibilities.
",2025-08-25T08:07:19Z,2025-08-26T02:10:22Z,2025-08-26T02:10:19Z,2025-08-26T02:10:19Z,True,2,0,1,84,67,1
155217,closed,[libcxx][test] Fix typos,StephanTLavavej,"I noticed a typo in the directory name `refwrap.comparissons`, then did a quick pass to fix typos elsewhere in the tests.

All fixes were manual (some carefully search-and-replaced); I used [cspell](https://www.npmjs.com/package/cspell) to find them.
",2025-08-25T07:35:40Z,2025-08-25T10:02:56Z,2025-08-25T10:02:52Z,2025-08-25T10:02:52Z,True,2,0,3,93,93,48
155216,closed,"[VectorCombine] Support pattern `bitop(bitcast(x), C) -> bitcast(bitop(x, InvC))`",XChy,"Resolves #154797.
This patch adds the fold `bitop(cast(x), C) -> bitop(cast(x), cast(InvC)) -> cast(bitop(x, InvC))`.
The helper function `getLosslessInvCast` tries to calculate the constant `InvC`, satisfying `castop(InvC) == C`, and will try its best to keep the poison-generated flags of the cast operation.",2025-08-25T07:21:28Z,2025-09-02T16:06:49Z,2025-09-02T15:54:12Z,2025-09-02T15:54:12Z,True,7,7,3,303,0,2
155214,closed,"Revert ""[MLIR] Fix duplicated attribute nodes in MLIR bytecode deserialization (#151267)",Dinistro,This reverts commit c075fb8c37856365fb76d986ad3aefa2400b3240. This commit introduces a caching bug that causes undesired collisions.,2025-08-25T06:43:30Z,2025-08-25T13:54:28Z,2025-08-25T11:46:14Z,2025-08-25T11:46:14Z,True,4,0,1,4,45,5
155212,closed,[orc-rt] Add SimplePackedSerialization.,lhames,Ports the simple-packed-serialization scheme from the old ORC runtime at compiler-rt/lib/orc/simple_packed_serialization.h.,2025-08-25T06:23:14Z,2025-08-25T06:28:09Z,2025-08-25T06:28:05Z,2025-08-25T06:28:05Z,True,0,0,1,903,0,4
155211,closed,[TableGen][DecoderEmitter] Remove PredicateNamespace (NFC),s-barannikov,"There is no target named Thumb, so there is no need to make a special case for it.

As part of this change, pass CodeGenTarget instead of DecoderEmitter to FilterChooser to remove dependency between the latter two.",2025-08-25T06:09:31Z,2025-08-25T15:46:02Z,2025-08-25T15:45:59Z,2025-08-25T15:45:58Z,True,1,0,1,14,26,3
155206,closed,[ARM] Remove an unnecessary cast (NFC),kazutakahirata,"getType() already returns Type *.
",2025-08-25T04:29:29Z,2025-08-25T14:34:12Z,2025-08-25T14:33:34Z,2025-08-25T14:33:34Z,True,1,0,1,1,1,1
155208,closed,[orc-rt] Add bit.h -- substitute for not yet available STL <bit> APIs.,lhames,Currently provides endian enum and byteswap.,2025-08-25T05:07:15Z,2025-08-25T06:19:59Z,2025-08-25T06:19:55Z,2025-08-25T06:19:55Z,True,0,0,1,191,0,4
155207,closed,[llvm] Proofread AdvancedBuilds.rst,kazutakahirata,,2025-08-25T04:29:49Z,2025-08-25T14:34:21Z,2025-08-25T14:33:42Z,2025-08-25T14:33:42Z,True,0,0,1,31,31,1
155205,closed,"[ADT] Refactor MapVector::insert, try_emplace, and operator[] (NFC)",kazutakahirata,"The l-value and r-value reference variants of try_emplace contain
nearly identical code.  Also, operator[] makes its own call to
Map.try_emplace.

This patch introduces a templated helper function, try_emplace_impl,
and uses it in all of MapVector::insert, try_emplace, and operator[].
The helper function uses perfect forwarding to preserve the exact key
type.

This patch moves the ""private:"" section to the end of the class so
that the new helper function can use iterator.
",2025-08-25T04:29:13Z,2025-08-25T16:37:41Z,2025-08-25T16:37:29Z,2025-08-25T16:37:29Z,True,1,2,3,26,33,1
155204,closed,"[ADT] Refactor DenseMap::insert, try_emplace, and operator[] (NFC)",kazutakahirata,"try_emplace and operator[] contain nearly identical code, and the code
is duplicated for l-value and r-value reference variants.

This patch introduces a templated helper function, try_emplace_impl,
and uses it in all of DenseMap::insert, try_emplace, and operator[].
The helper function uses perfect forwarding to preserve the exact key
type.
",2025-08-25T04:28:33Z,2025-08-29T09:31:25Z,2025-08-25T16:37:21Z,2025-08-25T16:37:21Z,True,4,4,2,18,27,1
155203,closed,[ADT] Swap the two variants of DenseMap::doFind (NFC),kazutakahirata,"doFind itself makes no modification, so we can implement it as a const
function.  The only problem is that the non-const version of find
needs to return a modifiable bucket.

This patch ""swaps"" the constness of doFind.  Specifically, the primary
implementation becomes const, preventing accidental modifications.
Then the non-const variant is derived off of the const variant.
",2025-08-25T04:28:00Z,2025-08-25T14:33:51Z,2025-08-25T14:33:26Z,2025-08-25T14:33:26Z,True,1,0,1,7,6,1
155201,closed,[NFC][AMDGPU] Remove redundant code in `AMDGPUSubtarget::getWavesPerEU`,shiltian,,2025-08-25T04:06:01Z,2025-08-25T12:22:02Z,2025-08-25T12:22:01Z,2025-08-25T12:22:00Z,True,2,0,1,5,8,1
155199,closed,[Headers][X86] Allow AVX512VLBW integer reduction intrinsics to be used in constexpr,ckoparkar,"Fixes #154284

Add constexpr support for the following:

_mm_reduce_add_epi8 _mm_reduce_add_epi16 _mm256_reduce_add_epi8 _mm256_reduce_add_epi16 _mm_reduce_mul_epi8 _mm_reduce_mul_epi16 _mm256_reduce_mul_epi8 _mm256_reduce_mul_epi16 _mm_reduce_and_epi8 _mm_reduce_and_epi16 _mm256_reduce_and_epi8 _mm256_reduce_and_epi16 _mm_reduce_or_epi8  _mm_reduce_or_epi16  _mm256_reduce_or_epi8  _mm256_reduce_or_epi16

_mm_mask_reduce_add_epi8 _mm_mask_reduce_add_epi16 _mm256_mask_reduce_add_epi8 _mm256_mask_reduce_add_epi16 _mm_mask_reduce_mul_epi8 _mm_mask_reduce_mul_epi16 _mm256_mask_reduce_mul_epi8 _mm256_mask_reduce_mul_epi16 _mm_mask_reduce_and_epi8 _mm_mask_reduce_and_epi16 _mm256_mask_reduce_and_epi8 _mm256_mask_reduce_and_epi16 _mm_mask_reduce_or_epi8  _mm_mask_reduce_or_epi16  _mm256_mask_reduce_or_epi8  _mm256_mask_reduce_or_epi16

_mm_reduce_max_epi8 _mm_reduce_max_epi16 _mm256_reduce_max_epi8 _mm256_reduce_max_epi16 _mm_reduce_min_epi8 _mm_reduce_min_epi16 _mm256_reduce_min_epi8 _mm256_reduce_min_epi16 _mm_reduce_max_epu8 _mm_reduce_max_epu16 _mm256_reduce_max_epu8 _mm256_reduce_max_epu16 _mm_reduce_min_epu8 _mm_reduce_min_epu16 _mm256_reduce_min_epu8 _mm256_reduce_min_epu16

_mm_mask_reduce_max_epi8 _mm_mask_reduce_max_epi16 _mm256_mask_reduce_max_epi8 _mm256_mask_reduce_max_epi16 _mm_mask_reduce_min_epi8 _mm_mask_reduce_min_epi16 _mm256_mask_reduce_min_epi8 _mm256_mask_reduce_min_epi16 _mm_mask_reduce_max_epu8 _mm_mask_reduce_max_epu16 _mm256_mask_reduce_max_epu8 _mm256_mask_reduce_max_epu16 _mm_mask_reduce_min_epu8 _mm_mask_reduce_min_epu16 _mm256_mask_reduce_min_epu8 _mm256_mask_reduce_min_epu16",2025-08-25T02:48:59Z,2025-08-26T13:27:13Z,2025-08-26T13:22:13Z,2025-08-26T13:22:13Z,True,6,0,1,183,95,2
155198,closed,[NVPTX] Support i256 load/store with 256-bit vector load,AlexMaclean,,2025-08-25T02:46:34Z,2025-08-28T21:04:59Z,2025-08-28T19:29:05Z,2025-08-28T19:29:05Z,True,12,13,3,283,154,8
155196,closed,[LoongArch] Custom lower vecreduce.,tangaac,,2025-08-25T02:31:03Z,2025-09-02T05:23:33Z,2025-09-02T03:44:19Z,2025-09-02T03:44:19Z,True,4,0,1,552,602,17
155197,closed,[mlir][tosa] Allow shift operand of tosa::MulOp as non-constant,ShivaChen,"The shift operand of tosa::MulOp could be non-constant when the dynamic extension enabled. Given that checkConstantOperandMul could check the shift operand according to the extension, we might able to relax the checking in TosaToLinalg.

Relative discussion: https://discourse.llvm.org/t/tosa-ext-dynamic-clearification-needed/87478?u=r2333333.",2025-08-25T02:37:06Z,2025-08-28T12:35:34Z,2025-08-28T12:35:33Z,2025-08-28T12:35:33Z,True,3,4,4,46,24,3
155194,closed,[x86][AVX-VNNI] Fix VPDPBUSD Argument Types,BaiXilin,"Fixed intrinsic VPDPBUSD[,S]_128/256/512's argument types to match with the ISA.
Fixes part of #97271",2025-08-24T21:04:19Z,2025-09-10T21:38:26Z,2025-09-10T12:24:16Z,2025-09-10T12:24:16Z,True,8,8,10,633,570,21
155193,closed,[Github] Fix revisions in code format action reproducers,boomanaiden154,"This patch makes it so the revisions that the code format action returns in its reproducers actually work when applying them locally given the differences in how revisions are setup in CI.

Fixes #154294",2025-08-24T20:51:00Z,2025-08-27T13:43:08Z,2025-08-27T13:09:41Z,2025-08-27T13:09:41Z,True,5,6,10,52,30,1
155186,closed,[CI] Add compiler-rt to windows premerge checks,boomanaiden154,,2025-08-24T18:28:20Z,2025-08-29T23:19:00Z,2025-08-29T23:18:57Z,2025-08-29T23:18:57Z,True,1,6,3,18,8,4
155190,closed,[Offload][Conformance] Add README file,leandrolcampos,"This patch introduces a `README.md` file for the GPU math conformance test suite located in `offload/unittests/Conformance`.

The goal of this document is to provide clear and thorough instructions for new users and future contributors. It covers the project's purpose, system requirements, build and execution steps, testing methodology, and overall architecture.",2025-08-24T19:39:33Z,2025-08-26T13:34:15Z,2025-08-26T13:34:15Z,2025-08-26T13:34:15Z,True,4,0,3,83,0,1
155185,closed,Create Am-llvm,mizham295-create,,2025-08-24T17:37:37Z,2025-08-25T05:37:16Z,2025-08-25T05:37:03Z,,False,1,0,1,1,0,1
155182,closed,[ADT] Use brace initialization in Set/Map (NFC),kazutakahirata,"With brace initialization, we get to avoid type decay and enjoy
guaranteed copy elision as part of C++17.
",2025-08-24T17:12:48Z,2025-08-24T22:34:52Z,2025-08-24T21:46:58Z,2025-08-24T21:46:58Z,True,2,0,1,18,21,5
155181,closed,[rtsan] Remove legacy_pthread_cond support,cjappl,"Partial revert of #152947


There were two fixes that may have applied to #146120

1. Adding the version protection around the pthread_cond_ interceptors
https://github.com/llvm/llvm-project/blob/0723e818e7ead29ab1ce0a7efcdb95a7cec1901b/compiler-rt/lib/rtsan/rtsan_interceptors_posix.cpp#L1695-L1711

2. Adding support for the legacy_pthread_cond variables (reverted here)

To see if this still fixes #146120, I'm going to put this up for review and ask @adrew0809 to test again. If his problem is still fixed I'll merge this.

(or I can revert the previous patch, and merge just adding the version protection if folks think that is cleaner)


Both Mac and Linux tests pass on my machine with this patch in this PR",2025-08-24T16:50:48Z,2025-08-29T02:29:58Z,2025-08-29T02:29:58Z,,False,4,0,1,6,42,1
155176,closed,[AggressiveInstCombine] Refactor `foldLoadsRecursive` to use `m_ShlOrSelf`,dtcxzyw,"This patch was a part of https://github.com/llvm/llvm-project/pull/154375.
Two functional changes:
1. Allow matching other commuted patterns.
2. Allow combining loads even if there are multiple uses on a load. It is beneficial in practice.
",2025-08-24T16:11:49Z,2025-08-25T12:11:12Z,2025-08-25T12:11:10Z,2025-08-25T12:11:10Z,True,1,1,2,116,27,2
155180,closed,[clang-tidy][NFC] clean up some matchers in `modernize-type-traits`,localspook,`dependentNameTypeLoc` is unused. `dependentScopeDeclRefExpr` has appeared in `ASTMatchers.h` since this code was written.,2025-08-24T16:49:31Z,2025-08-24T17:20:56Z,2025-08-24T17:20:51Z,2025-08-24T17:20:51Z,True,1,0,1,0,9,1
155177,closed,[libc][math] Do not use float16 basic operations in hypotf16.,lntue,Compiler runtimes for float16 basic operations might not be correctly rounded for all rounding modes.,2025-08-24T16:22:20Z,2025-08-25T01:55:14Z,2025-08-25T00:01:00Z,2025-08-25T00:01:00Z,True,1,2,2,21,9,4
155173,closed,[clang][bytecode] Don't call getIndex() on one-past-end pointers,tbaederr,"That doesn't work.

Fixes #152903",2025-08-24T14:48:02Z,2025-08-26T04:33:25Z,2025-08-26T04:33:25Z,2025-08-26T04:33:25Z,True,1,0,1,4,2,2
155174,closed,[VPlan] Improve style around container-inserts (NFC),artagnon,,2025-08-24T15:02:22Z,2025-08-26T13:13:03Z,2025-08-26T13:12:59Z,2025-08-26T13:12:59Z,True,2,7,2,13,13,3
155171,closed,[mlir][emitc] Fix bug in ApplyOp translation,aniragil,"The translator emits `emitc.apply` incorrectly when the op is part of an expression, as it prints the name of the operand instead of calling emitOperand() which takes into account the expression being emitted, leaving out the part of the expression feeding this op, e.g.
```mlir
func.func @foo(%a: i32, %p: !emitc.ptr<i32>) -> i32 {
  %c = emitc.expression : i32 {
    %e = emitc.sub %p, %a : (!emitc.ptr<i32>, i32) -> !emitc.ptr<i32>
    %d = emitc.apply ""*""(%e) : (!emitc.ptr<i32>) -> i32
    emitc.yield %d : i32
  }
  return %c : i32
}
```
translates to:
```C
int32_t foo(int32_t v1, int32_t* v2) {
  int32_t v3 = *v4;
  return v3;
}
```
instead of:
```C
int32_t foo(int32_t v1, int32_t* v2) {
  int32_t v3 = *(v2 - v1);
  return v3;
}
```",2025-08-24T14:40:01Z,2025-08-26T07:38:52Z,2025-08-26T07:38:52Z,2025-08-26T07:38:52Z,True,2,0,1,20,3,2
155170,closed,[clang][bytecode] Simplify Pointer,tbaederr,"Now that we don't have the PointeeStorage pointer anymore, it's simpler to access the members of the anonymous union directly instead of using asBlockPointer(), etc.",2025-08-24T14:37:25Z,2025-08-26T04:01:07Z,2025-08-26T04:01:07Z,2025-08-26T04:01:07Z,True,1,0,1,90,105,1
155168,closed,[CIR] More atomic load and store,Lancern,This patch adds support for `__atomic_load_n` and `__atomic_store_n` that were missed by #153814.,2025-08-24T13:36:17Z,2025-08-27T14:45:42Z,2025-08-27T14:45:38Z,2025-08-27T14:45:38Z,True,1,2,1,70,4,2
155166,closed,[TargetLoweringObjectFile] Handle riscv BE,djtodoro,"Add DWARF exception handling support for riscv big-endian targets.
More CodeGen changes related to riscvbe are coming.
",2025-08-24T13:17:04Z,2025-08-28T15:04:48Z,2025-08-28T15:04:48Z,2025-08-28T15:04:48Z,True,3,0,1,18,0,2
155167,closed,[CIR] DivOp & CompoundAssignmentDiv between ComplexType and ScalarType,AmrDeveloper,"This change adds support for DivOp and CompoundAssignmentDiv between ComplexType and ScalarType

Issue: https://github.com/llvm/llvm-project/issues/141365",2025-08-24T13:35:24Z,2025-08-29T17:00:48Z,2025-08-29T17:00:48Z,2025-08-29T17:00:48Z,True,1,2,2,683,6,3
155165,closed,[LV] Update test after 66be00d,artagnon,66be00d ([VPlan] Introduce m_Cmp; match more compares) broke a test: regen it with UTC to fix the build.,2025-08-24T13:09:46Z,2025-08-24T13:16:45Z,2025-08-24T13:16:41Z,2025-08-24T13:16:41Z,True,1,0,1,4,8,1
155164,closed,DAG: Avoid comparing Register to unsigned 0,arsenm,,2025-08-24T12:53:24Z,2025-08-25T07:03:10Z,2025-08-25T06:02:09Z,2025-08-25T06:02:09Z,True,4,0,2,1,1,1
155163,closed,[TableGen][DecoderEmitter] Add a couple of helper methods (NFC),s-barannikov,Replace push_back with more specific insertOpcode/insertUInt8.,2025-08-24T11:58:09Z,2025-08-24T12:32:09Z,2025-08-24T12:32:05Z,2025-08-24T12:32:05Z,True,1,0,1,32,27,1
155157,closed,[clang][bytecode] Fix incorrect offset in elem(),tbaederr,"We need to use the base offset in both cases.
Also, add additional assertions to make sure we don't miss this case again.

Fixes #155132",2025-08-24T10:27:53Z,2025-08-25T12:09:59Z,2025-08-25T12:09:59Z,2025-08-25T12:09:59Z,True,1,0,1,21,8,3
155154,closed,[NFC][SimplifyCFG] Fix a return value in `ConstantComparesGatherer`,dtcxzyw,"`ICI->getOperand(0)` is non-null.
",2025-08-24T09:51:36Z,2025-08-24T11:40:42Z,2025-08-24T11:40:40Z,2025-08-24T11:40:40Z,True,1,0,1,1,1,1
155156,closed,[libc++][ranges] LWG4083: `views::as_rvalue` should reject non-input ranges,H-G-Hristov,"Fixes #105351

# References:

- https://wg21.link/LWG4083
- https://wg21.link/range.as.rvalue.overview",2025-08-24T10:07:30Z,2025-09-03T09:53:38Z,2025-09-03T09:17:42Z,2025-09-03T09:17:42Z,True,2,1,4,14,2,3
155153,closed,[lldb][DataFormatters] Support newer _LIBCPP_COMPRESSED_PAIR layout,Michael137,"Starting with https://github.com/llvm/llvm-project/pull/154686 the compressed_pair children are now wrapped in an anonymous structure.

This patch adjusts the LLDB data-formatters to support that.

Outstanding questions:
1. Should GetChildMemberWithName look through anonymous structures? That will break users most likely. But maybe introducing a new API is worth it? Then we wouldnt have to do this awkward passing around of `anon_struct_index`
2. Do we support the layout without the anonymous structure? It's not too much added complexity. And we did release that version of libc++, so there is code out there compiled against it. But there is no great way of testing it (some of our macOS matrix bots do test it i suppose, but not in a targeted way). We have the layout ""simulator"" tests for some of the STL types which I will adjust.",2025-08-24T09:25:56Z,2025-08-26T07:35:53Z,2025-08-25T16:17:56Z,2025-08-25T16:17:55Z,True,3,0,4,150,100,12
155152,closed,[clang][bytecode] Check that a ltor cast to a complex value is possible,tbaederr,"When we get to this point, the pointer might _not_ be backed by a primitive array, so the later code will fail.

Fixes #155144",2025-08-24T09:12:43Z,2025-08-26T03:38:26Z,2025-08-26T03:38:26Z,2025-08-26T03:38:25Z,True,1,0,1,8,1,2
155150,closed,[clang][bytecode][NFC] Remove double initializer,tbaederr,As pointed out in https://github.com/llvm/llvm-project/pull/154405#discussion_r2296441643,2025-08-24T08:37:57Z,2025-08-25T17:23:58Z,2025-08-25T10:43:30Z,2025-08-25T10:43:30Z,True,1,0,1,1,3,1
155149,closed,[clang][bytecode] Fix OptionScope initializer,tbaederr,"Initialize the `OldToLValue` member with the actual old value of `ToLValue`.

Pointed out by Shafik in https://github.com/llvm/llvm-project/pull/153601#discussion_r2294319428",2025-08-24T08:37:05Z,2025-08-25T23:54:21Z,2025-08-25T10:55:34Z,2025-08-25T10:55:34Z,True,1,0,1,1,1,1
155148,closed,[Util] Only run --update-tests functions on failing tests,hnrklssn,"The early exit we relied on to only invoke test updaters for failing tests requires that there was no output to stdout or stderr, and that timeouts weren't enabled. When these conditions weren't fulfilled, test updaters would be invoked even on passing or XFAILed tests.",2025-08-24T08:26:53Z,2025-08-25T21:33:48Z,2025-08-25T20:29:10Z,2025-08-25T20:29:10Z,True,5,4,3,92,3,10
155145,closed,"[SCEV] Fix NSW flag propagation in getGEPExpr, getMulExpr, and getAddExpr",sebpop,"SCEV was losing NSW flags during AddRec operations, causing Dependence
Analysis to add unnecessary runtime assumptions.

There are 4 patches to be reviewed together and committed separately. 

1. [LAA] Fix WAW dependency analysis with negative distances
First patch is needed before the getAddExpr patch uncovers a latent bug
in LAA. This prevents vectorization with the second patch for a loop
that should not be vectorized.

2. [SCEV] Fix NSW flag propagation in getAddExpr
3. [SCEV] Fix NSW flag propagation in getMulExpr
4. [SCEV] Fix NSW flag propagation in getGEPExpr

The other patches are independent of each other.",2025-08-24T07:29:54Z,2025-08-25T16:39:14Z,2025-08-25T16:39:14Z,,False,5,5,4,551,274,42
155143,closed,[clang] Heuristic resolution for explicit object parameter,MythreyaK,"Fixes clangd/clangd#2323. 

Assumes `self` is of the record type in the declaration. 

```cpp
struct Foo {
  int member {};
  auto&& getter1(this auto&& self) { // assume `self` is is `Foo`
    return self.member;
};
```",2025-08-24T06:06:44Z,2025-08-27T06:23:38Z,2025-08-27T03:54:51Z,2025-08-27T03:54:51Z,True,3,31,8,55,2,3
155140,closed,[clang-repl] Sink RemoteJITUtils into Interpreter class (NFC),kr-2003,This is a refactoring PR. It sinks RemoteJITUtils into Interpreter and IncrementalExecutor classes.,2025-08-24T05:03:06Z,2025-09-07T15:35:29Z,2025-09-07T15:35:29Z,2025-09-07T15:35:29Z,True,2,57,44,491,370,8
155139,closed,[TableGen][DecoderEmitter] Print the size of the decoder tables,s-barannikov,"So we can see the changes in table sizes after making changes to DecoderEmitter by simply running `grep DecoderTable`.

Also, remove an unnecessary terminating 0 from the end of the tables.",2025-08-24T04:12:32Z,2025-08-24T06:09:36Z,2025-08-24T06:09:31Z,2025-08-24T06:09:31Z,True,1,0,1,33,35,5
155138,closed,[clang] Remove redundant control flow statements (NFC),kazutakahirata,,2025-08-24T03:27:31Z,2025-08-24T05:20:31Z,2025-08-24T05:20:23Z,2025-08-24T05:20:23Z,True,2,0,2,0,5,4
155151,closed,[clang][bytecode] Error if calls have fewer arguments than parameters,tbaederr,"Shouldn't happen, but does.

Fixes #155147 ",2025-08-24T08:57:42Z,2025-08-26T04:17:40Z,2025-08-26T04:17:40Z,2025-08-26T04:17:40Z,True,1,0,1,17,0,2
155137,closed,[llvm] Proofread AArch64SME.rst,kazutakahirata,,2025-08-24T03:27:18Z,2025-08-24T15:28:24Z,2025-08-24T15:28:10Z,2025-08-24T15:28:10Z,True,0,0,1,17,17,1
155134,closed,[AArch64] Remove an unnecessary cast (NFC),kazutakahirata,"Val is already of int64_t.
",2025-08-24T03:26:31Z,2025-08-24T05:20:07Z,2025-08-24T05:20:00Z,2025-08-24T05:20:00Z,True,1,0,1,1,1,1
155136,closed,[SPIRV] Use llvm::is_contained (NFC),kazutakahirata,"We can pass a range to llvm::is_contained.
",2025-08-24T03:27:03Z,2025-08-24T05:20:19Z,2025-08-24T05:20:15Z,2025-08-24T05:20:15Z,True,1,0,1,1,1,1
155133,closed,[ADT] Add a helper function to create iterators in DenseMap (NFC),kazutakahirata,"This patch adds a private helper function, makeInsertIterator, to
encapsulate the logic for creating iterators within functions like
try_emplace and insert.

This refactoring reduces code duplication and improves readability at
the call sites.
",2025-08-24T03:26:17Z,2025-08-25T14:11:20Z,2025-08-24T15:28:02Z,2025-08-24T15:28:02Z,True,2,2,1,13,33,1
155131,closed,Fix unique_ptr aggregate initialization false positives,vidur2,"Hi, I am working on a PR for issue #153300. Currently I dont have a regression test or anything for this yet. This is just the initial fix.",2025-08-24T02:45:13Z,2025-09-01T21:55:16Z,2025-09-01T21:55:16Z,,False,12,8,7,260,65,2
155127,closed,X86: Remove LOW32_ADDR_ACCESS_RBPRegClass,arsenm,"This essentially reverts 86098ab10b3180a09762266d1f3046eb6f336137.

This was introduced for ""ABIs like NaCl"". Nacl support was recently
removed in 0d2e11f3e834e0c1803a6e00da35525b0d476eb2. Based on the
X86FrameLowering changes there, Is64Bit && TFI->Uses64BitFramePtr
are not reachable conditions.

Somehow there are codegen changes if the unused class definition is
removed, so leave it in for now.",2025-08-24T01:10:37Z,2025-08-26T14:58:07Z,2025-08-26T14:58:05Z,2025-08-26T14:58:05Z,True,3,0,2,2,13,2
155124,closed,"[NFC][SampleFDO] Re-apply ""In text sample prof reader, report more concrete parsing errors for different line types""",mingmingl-llvm,"Re-apply https://github.com/llvm/llvm-project/pull/154885 with a fix to initialize `LineTy` before calling `ParseLine`.
",2025-08-23T23:34:25Z,2025-08-24T01:23:50Z,2025-08-24T00:49:11Z,2025-08-24T00:49:11Z,True,4,0,4,11,4,1
155125,closed,AMDGPU: Stop checking if registers are reserved in adjustAllocatableRegClass,arsenm,"This function is used to implement TargetInstrInfo::getRegClass and
conceptually should not depend on the dynamic state of the function.",2025-08-24T00:25:55Z,2025-08-26T11:09:34Z,2025-08-26T11:09:32Z,2025-08-26T11:09:32Z,True,2,0,2,309,246,25
155135,closed,[Vectorize] Remove an unnecessary cast (NFC),kazutakahirata,"getOpcode() already returns Instruction::CastOps.
",2025-08-24T03:26:45Z,2025-08-24T05:20:14Z,2025-08-24T05:20:08Z,2025-08-24T05:20:08Z,True,1,0,1,1,2,1
155123,closed,[mlir][MemRef] Address TODO to use early_inc to simplify elimination of uses (NFC),snarang181,,2025-08-23T23:07:14Z,2025-08-26T10:19:25Z,2025-08-26T10:19:25Z,2025-08-26T10:19:25Z,True,2,0,1,27,43,1
155121,closed,"Revert ""[NFC][SampleFDO] In text sample prof reader, report dreport more concrete parsing errors for different line types""",mingmingl-llvm,Reverts llvm/llvm-project#154885 to fix build bot failure (https://lab.llvm.org/buildbot/#/builders/144/builds/33611),2025-08-23T21:43:42Z,2025-08-23T21:44:12Z,2025-08-23T21:43:56Z,2025-08-23T21:43:56Z,True,1,0,1,3,10,1
155122,closed,"[AArch64] Copy CSNEG, CSINV, and CSINC computeKnownBitsForTargetNode from ARM",AZero13,,2025-08-23T21:45:20Z,2025-08-28T11:08:12Z,2025-08-28T07:43:54Z,2025-08-28T07:43:54Z,True,6,0,1,34,10,2
155117,closed,[ADT] Fix redirection of SmallSet to SmallPtrSet,benlangmuir,The previous version introduce an extra level of pointer indirection.,2025-08-23T18:50:21Z,2025-08-23T19:58:25Z,2025-08-23T19:22:19Z,2025-08-23T19:22:19Z,True,4,0,1,2,2,1
155114,closed,[MLIR][Python] remove `liveOperations`,makslevental,"Historical context: `PyMlirContext::liveOperations` was an optimization meant to cut down on the number of Python object allocations and (partially) a mechanism for updating validity of ops after transformation. E.g. during walking/transforming the AST. See original patch [here](https://reviews.llvm.org/D87958).

Inspired by a [renewed](https://github.com/llvm/llvm-project/pull/139721#issuecomment-3217131918) interest in https://github.com/llvm/llvm-project/pull/139721 (which has become a little stale...)

<p align=""center"">
<img width=""504"" height=""375"" alt=""image"" src=""https://github.com/user-attachments/assets/0daad562-d3d1-4876-8d01-5dba382ab186"" />
</p>

In the previous go-around (https://github.com/llvm/llvm-project/pull/92631) there were two issues which have been resolved

1. ops that were ""fetched"" under a root op which has been transformed are no longer reported as invalid. We simply ""[formally forbid](https://github.com/llvm/llvm-project/pull/92631#issuecomment-2119397018)"" this;
2. `Module._CAPICreate(module_capsule)` must now be followed by a `module._clear_mlir_module()` to prevent double-freeing of the actual `ModuleOp` object (i.e. calling the dtor on the `OwningOpRef<ModuleOp>`): 

     ```python
    module = ...
    module_dup = Module._CAPICreate(module._CAPIPtr)
    module._clear_mlir_module()
    ```
     - **the alternative choice** here is to remove the `Module._CAPICreate` API altogether and replace it with something like `Module._move(module)` which will do both `Module._CAPICreate` and `module._clear_mlir_module`.

Note, the other approach I explored last year was a [weakref system](https://github.com/llvm/llvm-project/pull/97340) for `mlir::Operation` which would effectively hoist this `liveOperations` thing into MLIR core. Possibly doable but I now believe it's a bad idea.

The other potentially breaking change is `is`, which checks object equality rather than value equality, will now report `False` because we are always allocating `new` Python objects (ie that's the whole point of this change). Users wanting to check equality for `Operation` and `Module` should use `==`.

cc @0xMihir @hawkinsp @superbobry @christopherbate @chhzh123

EDIT: Sanity check: [no one is using Module._CAPICreate](https://sourcegraph.com/search?q=context:global+Module._CAPICreate&patternType=keyword&sm=0)",2025-08-23T17:41:21Z,2025-09-02T18:04:33Z,2025-09-02T04:53:34Z,2025-09-02T04:53:33Z,True,6,23,12,102,276,11
155115,closed,[VectorCombine] Avoid crash when the next node is deleted.,dtcxzyw,"`RecursivelyDeleteTriviallyDeadInstructions` is introduced by https://github.com/llvm/llvm-project/pull/149047 to immediately drop dead instructions. However, it may invalidate the next iterator in `make_early_inc_range` in some edge cases, which leads to a crash. This patch manually maintains the next iterator and updates it when the next instruction is about to be deleted.

Closes https://github.com/llvm/llvm-project/issues/155110.
",2025-08-23T17:53:17Z,2025-08-26T08:21:12Z,2025-08-25T16:22:53Z,2025-08-25T16:22:53Z,True,2,2,4,39,5,2
155112,closed,[Offload][Conformance] Add exhaustive tests for half-precision math functions,leandrolcampos,"This patch adds a set of exhaustive tests for half-precision math.

The functions included in this set were selected based on the following criteria:
- An implementation exists in `libc/src/math/generic` (i.e., it is not just a wrapper around a compiler built-in).
- The corresponding LLVM CPU libm implementation is correctly rounded.
- The function is listed in Table 69 of the OpenCL C Specification v3.0.19.

This patch also fixes the testing range of the following functions: `acos`, `acosf`, `asin`, `asinf`, and `log1p`.",2025-08-23T16:58:03Z,2025-08-24T14:42:27Z,2025-08-24T14:42:26Z,2025-08-24T14:42:26Z,True,2,0,2,1644,5,32
155109,closed,[mlir][arith][nfc] Cleanup whitespace in td files,Hardcode84,,2025-08-23T16:26:28Z,2025-08-23T19:52:02Z,2025-08-23T19:51:57Z,2025-08-23T19:51:57Z,True,1,0,1,76,76,2
155108,closed,[MLIR][GPU] Truncate temp filename path size to avoid linux limitations,wsmoses,"Linux has a limitation of 256 characters for a path. Large function names being serialized will cause this to fail. As createTemporaryFile already unique's the file (up to 128 retries for different name variations), truncating should suffice",2025-08-23T16:21:02Z,2025-08-23T19:24:50Z,2025-08-23T16:29:01Z,2025-08-23T16:29:01Z,True,3,0,1,2,0,1
155105,closed,[clangd] Add Config.Hover.MacroContentsLimit,JaagupAverin,"Currently macro expansions are hard capped at 2048. ~This PR adds the CLI option `--limit-hover-contents` which is passed down in place of the hard coded value.~ This PR adds the` Config.Hover.MacroContentsLimit` config for overriding the default.
Resolves #153355.

Documentation: https://github.com/llvm/clangd-www/pull/136",2025-08-23T15:25:57Z,2025-08-28T04:19:26Z,2025-08-28T04:19:09Z,2025-08-28T04:19:09Z,True,6,0,2,63,2,7
155118,closed, [NFC][AMDGPU] Pre-commit test for setcc removal by using add/sub carryout,LU-JOHN,Pre-commit test for setcc removal by using add/sub carryout.,2025-08-23T19:14:45Z,2025-09-04T14:27:11Z,2025-09-04T14:27:11Z,2025-09-04T14:27:11Z,True,3,8,4,396,0,1
155104,closed,AMDGPU: Fix not diagnosing unaligned VGPRs for vsrc operands,arsenm,"This was not checking the alignment requirement for 64-bit
operands which accept inline immediates. Not all custom operand
types were handled in the switch, so round out with explicit
handling of all enum values, and change the default to use
the default checks for unhandled cases.

Fixes #155095",2025-08-23T14:44:24Z,2025-08-25T09:01:18Z,2025-08-25T08:42:59Z,2025-08-25T08:42:59Z,True,3,0,1,72,11,3
155100,closed,[TableGen][DecoderEmitter] Refactor emitTableEntries (NFCI),s-barannikov,"* Inline two small functions so that `emitTableEntries()` calls itself directly rather than through other functions.
* Peel the last iteration of the loop as it is special.

 This should make the code easier to follow.
",2025-08-23T13:41:37Z,2025-08-24T09:39:22Z,2025-08-24T09:39:20Z,2025-08-24T09:39:20Z,True,1,0,1,52,98,1
155099,closed,"[flang][OpenMP] Delete no longer used Omp[End]CriticalDirective, NFC",kparzysz,,2025-08-23T13:13:49Z,2025-08-26T13:20:25Z,2025-08-26T13:20:25Z,2025-08-26T13:20:24Z,True,1,0,1,0,33,5
155098,closed,[MLIR] Migrate Transform/IR/TransformOps.cpp to LDBG() debugging macro (NFC),joker-eph,,2025-08-23T12:52:56Z,2025-08-27T09:15:13Z,2025-08-27T09:15:13Z,2025-08-27T09:15:13Z,True,1,0,2,16,24,1
155097,closed,[lldb-dap] improve symbol table style,eronnen,"* apply odd table rows color from vscode theme
* apply hover color from vscode theme

[Screencast From 2025-08-23 14-48-44.webm](https://github.com/user-attachments/assets/a738ac3c-3e56-4a57-b713-7430c614c415)
",2025-08-23T12:52:21Z,2025-08-25T20:33:39Z,2025-08-25T20:33:39Z,2025-08-25T20:33:39Z,True,1,0,5,19,2,2
155096,closed,[InstCombine] Improve range computation in `foldICmpAddConstant`,dtcxzyw,Address comment https://github.com/llvm/llvm-project/pull/110511#discussion_r1788946221.,2025-08-23T12:39:56Z,2025-08-24T06:32:49Z,2025-08-24T06:32:21Z,2025-08-24T06:32:21Z,True,6,1,3,30,37,3
155094,closed,[MLIR] Adopt LDBG() in IntegerRangeAnalysis.cpp (NFC),joker-eph,,2025-08-23T12:35:34Z,2025-08-23T12:47:58Z,2025-08-23T12:47:58Z,2025-08-23T12:47:58Z,True,1,0,1,11,6,1
155092,closed,[MLIR] Adopt LDBG() in EliminateBarriers.cpp (NFC),joker-eph,Also add an extra optional TYPE argument to the LDBG() macro to make it easier to punctually overide DEBUG_TYPE.,2025-08-23T12:12:36Z,2025-08-27T08:45:58Z,2025-08-27T08:45:58Z,2025-08-27T08:45:58Z,True,1,3,1,44,40,3
155091,closed,[MLIR] include DebugLog.h for SCFToGPU to fix build,rscottmanley,,2025-08-23T12:01:44Z,2025-08-23T12:03:42Z,2025-08-23T12:03:42Z,,False,2,0,1,1,0,1
155090,closed,[MLIR] Adopt LDBG() macro debugging in SymbolDCE.cpp (NFC),joker-eph,,2025-08-23T11:26:42Z,2025-08-23T11:44:54Z,2025-08-23T11:44:54Z,2025-08-23T11:44:54Z,True,2,0,1,16,14,1
155089,closed,[Headers][X86] Use `__builtin_elementwise_ctlz` instead of avx512cd intrinsics.,moorabbit,"The following avx512 intrinsics were removed:
- `__builtin_ia32_vplzcntd_128`
- `__builtin_ia32_vplzcntd_256`
- `__builtin_ia32_vplzcntd_512`
- `__builtin_ia32_vplzcntq_128`
- `__builtin_ia32_vplzcntq_256`
- `__builtin_ia32_vplzcntq_512`

Users of the removed intrinsics (e.g. `_mm512_lzcnt_epi64`, `_mm_lzcnt_epi32`) are now relying on `__builtin_elementwise_ctlz` and are marked as `constexpr`.

Fixes: #154279",2025-08-23T11:11:22Z,2025-08-28T17:11:16Z,2025-08-28T17:07:47Z,2025-08-28T17:07:47Z,True,4,9,8,168,105,6
155087,closed,[SimplifyCFG] Support trunc nuw in chain of comparisons.,andjo403,proof: https://alive2.llvm.org/ce/z/5PNCds,2025-08-23T10:12:22Z,2025-08-31T08:25:05Z,2025-08-31T08:14:28Z,2025-08-31T08:14:28Z,True,6,2,2,82,0,2
155085,closed,[MLIR] Fixup the LDBG() logging in dataflow/deadcodeanalysis (NFC),joker-eph,"This is improving the debug output:
- avoid printing pointers, print ops without regions in general.
- skip extra new-lines in the output
- minor other consistency aspects.",2025-08-23T09:48:02Z,2025-08-23T10:35:40Z,2025-08-23T10:35:40Z,2025-08-23T10:35:40Z,True,1,0,1,67,35,3
155084,closed,[LivePhysRegs] Use .asMCReg() rather than cast (NFC),MacDue,"Should fix MSVC buildbots:

https://lab.llvm.org/buildbot/#/builders/197/builds/8321
https://lab.llvm.org/buildbot/#/builders/211/builds/1549",2025-08-23T09:21:30Z,2025-08-23T11:41:38Z,2025-08-23T10:25:17Z,2025-08-23T10:25:17Z,True,1,0,2,1,1,1
155083,closed,[clang-tidy] Mark bunch of checks as C++-only,localspook,Hope I got them all...,2025-08-23T08:57:30Z,2025-08-23T11:43:00Z,2025-08-23T11:42:51Z,2025-08-23T11:42:51Z,True,2,0,1,94,2,31
155080,closed,[clang][initlist] handle incomplete array type in Constant Expr Calculation,HerrCai0907,"fix: #151716

In #65918, support of incomplete array type is added in TryReferenceListInitialization. It causes the crash in Constant Expr Calculation since it only considers the case where it is ConstantArrayType.

This patch wants to add support for incomplete array type also.",2025-08-23T06:26:34Z,2025-09-05T09:14:44Z,2025-09-04T14:28:42Z,2025-09-04T14:28:42Z,True,1,4,5,25,5,3
155078,closed,[ADT] Deprecate the redirection from SmallSet to SmallPtrSet (Take 2),kazutakahirata,"This patch deprecates the SmallSet specialization for pointer types,
which redirects to SmallPtrSet.

My previous attempt in #154891 broke downstream users.  Adding
user-defined constructors with LLVM_DEPRECATED inadvertently caused
the compiler to delete the copy and move assignment operators.

This iteration sidesteps the ""Rule of Five"" issue entirely by
introducing an intermediate class, DeprecatedSmallSet.  The
deprecation attribute is attached to this new class, and SmallSet
specialization inherits from it.
",2025-08-23T06:09:28Z,2025-08-27T13:44:27Z,2025-08-23T14:32:36Z,2025-08-23T14:32:36Z,True,11,0,2,10,1,1
155077,closed,[MLIR][Affine] Fix affine loop permute validity check for iter_args loops,meshtag,"We cannot guarantee the validity of the interchange if the loops have iter_args, since the dependence analysis does not take them into account. Conservatively return false in such cases.

Add an option to check permutation validity in test-loop-permutation pass to test this change.",2025-08-23T05:34:23Z,2025-08-31T12:53:59Z,2025-08-25T07:23:30Z,2025-08-25T07:23:30Z,True,4,0,1,50,0,3
155076,closed,[AMDGPU] AMDGPUPromoteAlloca: increase default max-regs to 32,perlfu,"Increase promote-alloca-to-vector-max-regs to 32 from 16.
This restores default promotion of 16 x double which was disabled by #127973.

Fixes SWDEV-525817.",2025-08-23T05:02:27Z,2025-08-26T01:35:59Z,2025-08-26T00:30:17Z,2025-08-26T00:30:17Z,True,2,2,3,149,127,6
155075,closed,"Revert ""[ADT] Deprecate the redirection from SmallSet to SmallPtrSet""",rupprecht,"Reverts llvm/llvm-project#154891

The added constructors changes the semantics of other implicitly defined constructors, which causes downstream breakages.

```
... error: object of type 'X' cannot be assigned because its copy assignment operator is implicitly deleted
... note: explicitly defaulted function was implicitly deleted here
... note: copy assignment operator of 'X' is implicitly deleted because field 'x' has a deleted copy assignment operator
llvm/include/llvm/ADT/SmallSet.h:283:3: note: copy assignment operator is implicitly deleted because 'SmallSet<const XX *, 2>' has a user-declared move constructor
  283 |   SmallSet(SmallSet &&) = default;
```",2025-08-23T04:42:21Z,2025-08-23T05:12:34Z,2025-08-23T05:12:33Z,2025-08-23T05:12:33Z,True,2,0,1,1,22,1
155074,closed,[AMDGPU] Disallow null for tensor load/store resource operands,changpeng,,2025-08-23T04:39:30Z,2025-09-02T19:57:59Z,2025-08-23T21:06:39Z,2025-08-23T21:06:39Z,True,1,0,1,63,3,2
155073,closed,[ORC-RT] Add IntervalMap and IntervalSet collections.,lhames,"IntervalMap is an optionally-coalescing map: it uses half-open ranges as keys, allows lookups based on elements of the ranges (returning an iterator to the containing range) and optionally coalesces adjacent ranges that have the same value.

IntervalSet is an optionally-coalescing set based on IntervalMap.

These collections will be used to store address-range information in the ORC runtime.",2025-08-23T04:38:50Z,2025-08-23T04:45:20Z,2025-08-23T04:45:08Z,2025-08-23T04:45:08Z,True,0,0,1,587,0,6
155071,closed,[clang] Proofread AutomaticReferenceCounting.rst,kazutakahirata,,2025-08-23T03:57:20Z,2025-08-23T14:10:28Z,2025-08-23T14:10:10Z,2025-08-23T14:10:10Z,True,1,0,1,6,6,1
155069,closed,[CodeGen] Remove an obsolete macro test (NFC),kazutakahirata,"We can drop the macro test because we require C++17 and GCC 7.4 these
days.  Note that std::is_trivially_copyable_v is a C++17 feature.
",2025-08-23T03:55:37Z,2025-08-23T14:10:19Z,2025-08-23T14:09:56Z,2025-08-23T14:09:56Z,True,0,0,1,0,3,1
155070,closed,[Support] Simplify macro conditions involving __GNUC__ (NFC),kazutakahirata,"We require GCC 7.4 these days, so we just need to check for
defined(__GNUC__).
",2025-08-23T03:56:38Z,2025-08-23T14:10:23Z,2025-08-23T14:10:03Z,2025-08-23T14:10:03Z,True,1,0,1,3,3,3
155068,closed,[ADT] Merge ConstIterator and Iterator of DenseSet into one class (NFC),kazutakahirata,"This patch merges ConstIterator and Iterator of DenseSet into
DenseSetIterator, a single template class with a boolean value to
control its const behavior.

  template <bool IsConst> class DenseSetIterator { ... };

  using iterator = DenseSetIterator<false>;
  using const_iterator = DenseSetIterator<true>;

Note that DenseMapIterator also uses the same boolean trick.
",2025-08-23T03:55:10Z,2025-08-23T14:10:15Z,2025-08-23T14:09:48Z,2025-08-23T14:09:48Z,True,1,0,1,42,69,1
155067,closed,[ADT] Simplify SmallDenseMap::swap (NFC),kazutakahirata,"This patch simplifies the swapping of *getLargeRep().

In other places, we treat the two member variables together like:

  new (getLargeRep()) LargeRep(allocateBuckets(InitBuckets));

This patch makes the code a little more consistent with other places
copying/moving LargeRep.
",2025-08-23T03:54:24Z,2025-08-23T14:10:09Z,2025-08-23T14:09:41Z,2025-08-23T14:09:41Z,True,1,0,1,1,2,1
155066,closed,[orc-rt] Add ExecutorAddress.h: ExecutorAddr and ExecutorAddrRange.,lhames,These types are used to represent addresses and address ranges within the executing JIT'd code in a way that can be communicated to an ORC controller.,2025-08-23T03:47:21Z,2025-08-23T03:55:36Z,2025-08-23T03:55:30Z,2025-08-23T03:55:30Z,True,0,0,1,343,0,4
155065,closed,[TableGen][DecoderEmitter] Repurpose Filter class,s-barannikov,"There was a lot of confusion about the responsibilities of Filter and FilterChooser. They created instances of each other and called each other's methods. Some of the methods had similar names and did similar things.

This change moves most of the Filter members to FilterChooser and turns Filter into a supplementary class with short lifetime. FilterChooser constructs an array of (candidate) Filters, chooses the best performing one, and applies it to the given set of encodings, creating inferior FilterChoosers as necessary. The Filter array is then destroyed. All responsibility for generating the decoder table now lies with FilterChooser.",2025-08-23T03:20:19Z,2025-08-24T06:57:37Z,2025-08-23T06:01:24Z,2025-08-23T06:01:24Z,True,6,1,1,69,79,1
155064,closed,[clang] Diagnose misplaced array bounds with non-identifier declarators.,keinflue,"ParseMisplacedBracketDeclarator assumed that declarators without associated identifier are ill-formed and already diagnosed previously. This didn't consider declarators using template-ids, constructors, destructors, conversion functions, etc.

Fixes #147333.",2025-08-23T02:58:35Z,2025-08-23T09:43:59Z,2025-08-23T09:43:59Z,2025-08-23T09:43:59Z,True,2,0,2,56,3,3
155063,closed,"Reland ""[NVPTX] Legalize aext-load to zext-load to expose more DAG combines""",AlexMaclean,The original version of this change inadvertently dropped b6e19b35cd87f3167a0f04a61a12016b935ab1ea. This version retains that fix as well as adding tests for it and an explanation for why it is needed. ,2025-08-23T02:54:52Z,2025-08-25T16:15:45Z,2025-08-25T16:15:45Z,2025-08-25T16:15:45Z,True,4,0,3,877,868,13
155061,closed,[lldb] Add Pythonic API to SBStructuredData extension,kastiglione,"* Adds `dynamic` property to automatically convert `SBStructuredData` instances to the associated Python type (`str`, `int`, `float`, `bool`, `NoneType`, etc)
* Implements `__getitem__` for Pythonic array and dictionary subscripting
  * Subscripting return the result of the `dynamic` property
* Updates `__iter__` to support dictionary instances (supporting `for` loops)
* Adds conversion to `str`, `int`, and `float`
* Adds Pythonic `bool` conversion

With these changes, these two expressions are equal:

```py
data[""name""] == data.GetValueForKey(""name"").GetStringValue(1024)
```

Additionally did some cleanup in TestStructuredDataAPI.py.
",2025-08-23T02:35:28Z,2025-09-02T21:23:59Z,2025-09-02T21:23:56Z,2025-09-02T21:23:56Z,True,2,0,6,224,30,2
155060,closed,[libc] Add half-precision math functions to the math header,leandrolcampos,"This patch adds the `exp10f16`, `exp2f16`, `expf16`, and `expm1f16` math functions to the `math.h` header.",2025-08-23T02:29:53Z,2025-08-23T03:06:13Z,2025-08-23T03:06:13Z,2025-08-23T03:06:13Z,True,1,0,1,28,0,1
155059,closed,[orc-rt] Fix file comment in RTTI.cpp. NFC.,lhames,,2025-08-23T02:19:17Z,2025-08-23T02:48:00Z,2025-08-23T02:47:56Z,2025-08-23T02:47:56Z,True,0,0,1,1,5,1
155058,closed,[NFC][SimplifyCFG] Simplify operators for the combined predicate in `mergeConditionalStoreToAddress`,mtrofin,"This is about code readability. The operands in the disjunction forming the combined predicate in `mergeConditionalStoreToAddress` could sometimes be negated twice. This patch addresses that.

2 tests needed updating because they exposed the double negation and now they don’t.",2025-08-23T02:11:30Z,2025-08-26T14:08:03Z,2025-08-26T14:08:00Z,2025-08-26T14:08:00Z,True,3,8,1,57,89,4
155057,closed,[TableGen][DecoderEmitter] Fix broken AdditionalEncoding support,s-barannikov,"We didn't have tests for AdditionalEncoding and none of the in-tree targets use this functionality, so I inadvertently broke it in #154288.",2025-08-23T02:06:03Z,2025-08-23T04:01:29Z,2025-08-23T02:49:00Z,2025-08-23T02:49:00Z,True,2,0,1,69,0,2
155056,closed,[orc-rt] Fix deleted copy operations in move_only_function.,lhames,"
These were incorrectly defined with r-value references.",2025-08-23T01:29:26Z,2025-08-23T02:10:05Z,2025-08-23T02:10:01Z,2025-08-23T02:10:01Z,True,0,0,1,2,2,1
155055,closed,[BOLT][AArch64] Fix another cause of extra entry point misidentification,yozhu,"This time it is inline assembly code and function symbol does have non-zero size in symbol table. The function contains a constant island referenced by another function, which is discovered during relocation processing.

Also added an assertion in `addEntryPointAtOffset()` that extra entry point candidate does not point to constant data.",2025-08-23T00:51:04Z,2025-08-27T07:15:47Z,2025-08-27T07:15:47Z,2025-08-27T07:15:46Z,True,1,0,1,45,4,3
155051,closed,"[clang] NFC: Provide inline definitions for {get,cast}TagDecl and friends",mizvekov,"This is a small performance improvement:

This helps recover the performance lost in #155028, reversing it into a small positive instead.
<img width=""1464"" height=""20"" alt=""image"" src=""https://github.com/user-attachments/assets/3378789e-109d-4211-846e-0d38d6cb190a"" />",2025-08-23T00:14:38Z,2025-08-27T17:12:52Z,2025-08-27T17:12:52Z,2025-08-27T17:12:52Z,True,1,8,1,57,57,3
155050,closed,[clang] NFC: reintroduce clang/include/clang/AST/Type.h,mizvekov,"This reintroduces `Type.h`, having earlier been renamed to `TypeBase.h`, as a redirection to `TypeBase.h`, and redirects most users to include the former instead.

This is a preparatory patch for being able to provide inline definitions for `Type` methods which would otherwise cause a circular dependency with `Decl{,CXX}.h`.

Doing these operations into their own NFC patch helps the git rename detection logic work, preserving the history.

This patch makes clang just a little slower to build (~0.17%), just because it makes more code indirectly include `DeclCXX.h`.",2025-08-23T00:10:49Z,2025-08-27T16:11:39Z,2025-08-27T16:11:35Z,2025-08-27T16:11:35Z,True,2,0,1,295,264,251
155053,closed,[HLSL] Enable unbounded resource arrays at global scope,hekota,"Adds support for unbounded resource arrays declared at a global scope. 
Local unbounded resource array variables or incomplete resource arrays as function arguments is not be supported by HLSL in Clang. See:
 - https://github.com/microsoft/hlsl-specs/issues/141
 - https://github.com/llvm/wg-hlsl/pull/298

Closes #145427

Depends on #154248 ",2025-08-23T00:39:07Z,2025-09-05T23:38:22Z,2025-09-05T23:38:22Z,2025-09-05T23:38:22Z,True,2,6,6,116,13,6
155048,closed,[CIR] Add VTTAddrPointOp,andykaylor,"This adds the definition, verification, and lowering for CIR's VTTAddrPointOp. This is a bit ahead of the current codegen implementation, which doesn't yet have support for emitting VTT definitions, but since this doesn't depend on any of the other work in progress, it is being upstreamed in advance.",2025-08-22T23:46:36Z,2025-08-26T18:38:38Z,2025-08-26T18:38:34Z,2025-08-26T18:38:34Z,True,1,2,2,319,3,7
155049,closed,[clang] NFC: rename clang/include/clang/AST/Type.h to TypeBase.h,mizvekov,"This is a preparatory patch, to be able to provide inline definitions for `Type` functions which depend on `Decl{,CXX}.h`. As the latter also depends on `Type.h`, this would not be possible without some reorganizing.

Splitting this rename into its own patch allows git to track this as a rename, and preserve all git history, and not force any code reformatting.

A later NFC patch will reintroduce `Type.h` as redirection to `TypeBase.h`, rewriting most places back to directly including `Type.h` instead of `TypeBase.h`, leaving only a handful of places where this is necessary.

Then yet a later patch will exploit this by making more stuff inline.",2025-08-23T00:06:34Z,2025-08-29T04:03:06Z,2025-08-27T16:09:48Z,2025-08-27T16:09:48Z,True,8,0,1,255,255,252
155042,closed,"Revert ""[fuzzer][Fuchsia] Prevent deadlock from suspending threads""",gulfemsavrun,"Reverts llvm/llvm-project#154854 because it broke Clang toolchain builders for Fuchsia:
https://luci-milo.appspot.com/ui/p/fuchsia/builders/toolchain.ci/clang-linux-x64/b8705803649235662417/overview",2025-08-22T22:40:43Z,2025-08-22T22:54:47Z,2025-08-22T22:54:46Z,2025-08-22T22:54:46Z,True,1,0,1,3,61,2
155043,closed,[DAGCombiner] Preserve nuw when converting mul to shl. Use nuw in srl+shl combine.,topperc,"If the srl+shl have the same shift amount and the shl has the nuw flag, we can remove both.

In the affected test, the InterleavedAccess pass will emit a udiv after the `mul nuw`. We expect them to combine away. The remaining shifts on the RV64 tests are because we didn't add the zeroext attribute to the incoming evl operand.",2025-08-22T22:42:54Z,2025-08-26T03:44:08Z,2025-08-26T03:44:06Z,2025-08-26T03:44:06Z,True,2,1,2,85,98,2
155044,closed,[TableGen][DecoderEmitter] Extract a couple of methods (NFC),s-barannikov,"Extract `findBestFilter() const` searching for the best filter and move calls to `recurse()` out of it to a single place.

Extract `dump()` as well, it is useful for debugging.",2025-08-22T22:48:43Z,2025-08-24T04:49:59Z,2025-08-22T23:21:46Z,2025-08-22T23:21:46Z,True,2,0,1,55,51,1
155039,closed,Add 'inspect' alias for dwim-print,mdko,"People on my team coming from GDB continually try to use ""inspect"" to examine data, but this command doesn't exist. In GDB, ""inspect"" is a synonym for ""print"" (https://sourceware.org/gdb/current/onlinedocs/gdb.html/Data.html#Data), so I thought it was help with ergonomics if we additionally had an ""inspect"" alias in LLDB (mapping to ""dwim-print"", which is what LLDB's ""print"" alias maps to as well). 

```
michristensen@my-machine build/Debug (inspect-alias-dwim) » ./bin/lldb
(lldb) help inspect
Print a variable or expression.  Expects 'raw' input (see 'help raw-input'.)

Syntax: inspect <variable-name>
  inspect <variable-name>
'inspect' is an abbreviation for 'dwim-print --'
(lldb) inspect 3+4
(int) 7
```",2025-08-22T22:08:40Z,2025-08-23T06:31:43Z,2025-08-23T06:31:43Z,,False,4,0,2,14,0,2
155038,closed,[TableGen][DecoderEmitter] Move a function to InstructionEncoding (NFC),s-barannikov,,2025-08-22T22:06:28Z,2025-08-24T04:50:19Z,2025-08-22T22:37:15Z,2025-08-22T22:37:15Z,True,1,0,1,23,19,1
155029,closed,[CIR][NFC] Fix build warning in getCIRSourceLanguage,andykaylor,The getCIRSourceLanguage wasn't returning a value if the source language was anything other than C or C++. This change updates that function to return a std::optional value and only adds the source language attribute if one was returned.,2025-08-22T21:09:39Z,2025-08-22T21:57:36Z,2025-08-22T21:57:32Z,2025-08-22T21:57:32Z,True,2,0,1,8,5,2
155033,closed,[alpha.webkit.UncheckedCallArgsChecker] Don't emit a warning for passing a temporary object as an argument.,rniwa,"Since a temporary object lives until the end of the statement, it's safe to pass such an object as a function argument without explicitly creating a CheckedRef/CheckedPtr in stack.",2025-08-22T21:41:37Z,2025-09-09T01:51:32Z,2025-09-08T18:13:55Z,2025-09-08T18:13:55Z,True,2,4,1,7,0,2
155031,closed,[CIR] Add verifier for vtable initializer,andykaylor,"This adds verification for the initializer, if present, of any global passed to the `cir.vtable.address_point` op.",2025-08-22T21:26:24Z,2025-08-22T22:07:40Z,2025-08-22T21:58:04Z,2025-08-22T21:58:04Z,True,3,0,2,17,4,3
155034,closed,[lldb] Adopt JSONTransport in the MCP Server,JDevlieghere,"This PR adopts JSONTransport in the MCP server implementation. It required a slight change in design in the relationship between the two server classes. Previously, these two had an ""is-a"" connection, while now they have a ""has-a"" connection.

The ""generic"" protocol server in Protocol/MCP now operates using a single connection (Transport). This matches the design in DAP where each DAP instance has its own connection. The protocol server in Plugins still supports multiple clients and creates a new server instance for each connection.

I believe the new design makes sense in the long term (as proved by DAP) and allows us to make the server stateful if we choose to do so. There's no reason that multiple client support can't live in the generic protocol library, but for now I kept it in ProtocolServerMCP to avoid creating unnecessary abstractions.",2025-08-22T21:42:31Z,2025-08-25T19:33:44Z,2025-08-25T17:55:31Z,2025-08-25T17:55:30Z,True,3,2,2,190,127,5
155041,closed,[SHT_LLVM_BB_ADDR_MAP] Change the callsite feature to emit end of callsites.,rlavaee,"This PR simply moves the callsite anchors from the beginning of callsites to their end.

Emitting the end of callsites is more sensible as it allows breaking the basic block into subblocks which end with control transfer instructions.",2025-08-22T22:28:34Z,2025-08-25T17:17:30Z,2025-08-25T17:17:30Z,2025-08-25T17:17:30Z,True,1,0,1,67,67,14
155036,closed,[PAC] Fix codegen for polymorphic class variables with consteval constructors,ahatanak,"Fix a bug in CodeGen where such variables could cause a compilation error or be emitted with an undef initializer.

rdar://155696134",2025-08-22T21:49:28Z,2025-08-22T21:56:51Z,2025-08-22T21:56:44Z,,False,2,0,1,33,11,2
155028,closed,[clang] AST: fix getAs canonicalization of leaf types,mizvekov,"Before this patch, the application of getAs and castAs on a leaf type would always produce a canonical type, which is undesirable because some of these types can be sugared.

The user expectation is that getAs only removes top level sugar nodes, leaving all the type sugar on the returned node, but it had an optimization intended for type nodes with no sugar: for these, we can skip the expensive traversal of the top level sugar with a simple canonicalization followed by dyn_cast.

The problem is that the concept of leaf type does not map well to what is correct to apply this optimization to.

This patch replaces the concept of leaf types with 'always canonical' types, and only applies the canonicalization strategy on them.

In order to avoid the performance regression this would cause, as most current users do not care about type sugar, this patch also replaces all of these uses with alternative cast functions which operate through canonicalization.

* Introduces castAs variants to complement the getAsTagDecl and derived variants.
* Introduces getAsEnumDecl and castAsEnumDecl, complementing the current set, so that all TagDecls are covered.
* Introduces getAsCanonical and castAsCanonical, for faster casting when only the canonical type is desired.

The getAsTagDecl and related functions are not provided inline, because of the circular dependencies that would involve. So this patch causes a small overall performance regression:
<img width=""1461"" height=""18"" alt=""image"" src=""https://github.com/user-attachments/assets/061dfb14-9506-4623-91ec-0f02f585d1dd"" />

This will be fixed in a later patch, bringing the whole thing back to a positive performance improvement overall:
<img width=""1462"" height=""18"" alt=""image"" src=""https://github.com/user-attachments/assets/c237e68f-f696-44f4-acc6-a7c7ba5b0976"" />

These follow-up patches are:
* https://github.com/llvm/llvm-project/pull/155049
* https://github.com/llvm/llvm-project/pull/155050
* https://github.com/llvm/llvm-project/pull/155051",2025-08-22T21:00:24Z,2025-08-28T18:11:14Z,2025-08-27T09:20:15Z,2025-08-27T09:20:15Z,True,20,4,2,267,242,75
155027,closed,[CIR] Add support for emitting multi-vtables,andykaylor,This change adds support for emitting multiple tables in a global vtable object to handle the case of multiple-inheritence.,2025-08-22T20:57:10Z,2025-08-25T16:55:04Z,2025-08-25T16:55:00Z,2025-08-25T16:55:00Z,True,1,6,3,154,23,2
155024,closed,"Partial revert ""[NVPTX] Enhance mul.wide and mad.wide peepholes #150477""",justinfargnoli,"Fix https://github.com/llvm/llvm-project/pull/150477#issuecomment-3191367837

Undo `add (mul.wide a, b), c` -> `mad.wide a, b, c` instruction selection pattern, but preserve `mul.wide` DAG combine.  ",2025-08-22T20:07:59Z,2025-08-25T22:11:19Z,2025-08-25T22:11:19Z,2025-08-25T22:11:19Z,True,5,2,3,81,66,5
155023,closed,[lldb] Add count for errors of DWO files in statistics and combine DWO file count functions,zw3917,"## Summary
A new `totalDwoErrorCount` counter is available in statistics when calling `statistics dump` to track the number of DWO errors. 
Additionally, this PR refactors the DWO file statistics by consolidating the existing functionality for counting loaded and total DWO files together with the number of DWO errors into a single function that returns a new DWOStats struct. 

1. A new struct,  `DWOStats` is created to hold the number of loaded DWO files, the total number of DWO files and the number of DWO errors.  
2. Replaced the previous `GetDwoFileCounts` function for loaded and total DWO file counts with a single `GetDwoStats()` function returning the struct `DWOStats`. An override is implemented for `SymbolFileDWARF` that  computes the new DWO error count alongside existing counts in one pass. If the status of a DWO CU is `Fail`, which means there is error happened during the loading process, we increment the DWO error counter. 
_Note: The newly created function `GetDwoStats` will only be called when we try to get statistics. Other codepaths will not be affected._
3. In Statistics, we sum up the total number of DWO file loading errors. This is done by getting `DWOStats` for each symbol file and adding up the results for each module, then adding to the total count among all modules. 
4. In Statistics, we also updated call sites to use the new combined function and struct for loaded and total DWO file counts. As it is possible for one module to have several symbol files, the DWO file counts in a module's stats are updated to be calculated by adding up the counts from all symbol files.

## Expected Behavior

- When binaries are compiled with split-dwarf and separate DWO files, `totalDwoLoadErrorCount` would be the number of dwo files with error occurs during the loading process, 0 if no error occurs during a loading process.

- When not using split-dwarf, we expect `totalDwoLoadErrorCount` to be 0 since there no DWO file loading errors would be caused.

- `totalLoadedDwoFileCount` and `totalDwoFileCount` should be correctly calculated after refactoring and updating.

## Testing
### Manual Testing
We created some files to simulate the possible DWO errors manually and observed the results generated by statistics dump. 
For example, if we delete one of the DWO files generated after compiling, we would get:
```
(lldb) statistics dump
{
  ...
  ""totalDwoLoadErrorCount"": 1,
  ...
}
```
We also checked the time cost of `statistics dump` w/o the modification to make sure no significant time cost increase imported.

### Unit test
Added two unit tests that build with new ""dwo_error_foo.cpp"" and ""dwo_error_main.cpp"" files. For tests with flags -gsplit-dwarf, this generates 2 DWO files. 
In one of the tests, we delete both DWO files and check the result to see if it reflects the number of DWO files with errors correctly. In another test we update one of the files but loading the outdated .dwo file of it, expecting it increments the error count by 1.
To run the test:
```
$ bin/lldb-dotest -p TestStats.py ~/local/llvm-project/lldb/test/API/commands/statistics/basic/ -G ""dwo""
----------------------------------------------------------------------
Ran 27 tests in 2.680s

OK (skipped=21)

$ bin/lldb-dotest -p TestStats.py ~/local/llvm-project/lldb/test/API/commands/statistics/basic/
----------------------------------------------------------------------
Ran 27 tests in 370.131s

OK (skipped=3)
```
",2025-08-22T20:04:12Z,2025-09-04T00:35:02Z,2025-09-03T21:41:43Z,2025-09-03T21:41:43Z,True,8,10,25,177,27,8
155021,closed,Re-land LLDB dap module symbol tables ,eronnen,"Re-land the symbol table feature in lldb-dap after it was [reverted](https://github.com/llvm/llvm-project/commit/2b8e80694263fb404d1d0b816f33df731e617625) because of a crash in the `aarch64` tests, which was caused by dereferencing `SBSymbol::GetName` which might return `nullptr` for an invalid symbol. 

This patch reapplies the original commits and adds the missing null check.

Also adding `skipIfWindows` for the module symbols tests, since LLDB doesn't recognize the symbols from a.out there.",2025-08-22T19:36:10Z,2025-08-23T11:40:11Z,2025-08-23T06:19:47Z,2025-08-23T06:19:47Z,True,4,0,3,1447,89,38
155020,closed,[OpenMP][omptest] Skip omptest build if LLVM_INCLUDE_TESTS=OFF,mhalk,Add / expand early exit in CMakeLists.txt if LLVM_INCLUDE_TESTS is 'OFF',2025-08-22T19:29:51Z,2025-08-22T19:35:14Z,2025-08-22T19:35:14Z,2025-08-22T19:35:14Z,True,0,0,1,3,8,1
155025,closed,[webkit.UncountedLambdaCapturesChecker] Ignore DeclRefExpr to a lambda in an no-escape argument,rniwa,Fix a bug that webkit.UncountedLambdaCapturesChecker was erroneously emitting a warning for a DeclRefExpr which is passed in as an argument to a no-escape function argument. The bug was caused by findLambdaInArg not adding DeclRefExpr to the ignored set even when a lambda was identified as an argument.,2025-08-22T20:10:23Z,2025-09-09T20:46:43Z,2025-09-09T20:46:39Z,2025-09-09T20:46:39Z,True,2,2,3,26,6,2
155019,closed,[compiler-rt] Add some missing dependencies on Windows,boomanaiden154,Trying to run check-compiler-rt on Windows currently fails due to several missing dependencies. These seem to get included transitively on Linux as there is nothing obvious adding them. I had to rework the ordering in llvm/CMakeLists.txt to be able to add the KillTheDoctor dep.,2025-08-22T19:26:23Z,2025-08-22T22:02:03Z,2025-08-22T19:59:17Z,2025-08-22T19:59:17Z,True,2,0,1,16,6,2
155016,closed,[AMDGPU] More gfx12/gfx1250 MC tests. NFC.,rampitec,,2025-08-22T19:19:35Z,2025-08-22T20:56:33Z,2025-08-22T20:56:32Z,2025-08-22T20:56:32Z,True,2,0,1,464,75,9
155018,closed,[bazel][libc] Port #153993: nextafter,rupprecht,,2025-08-22T19:25:18Z,2025-08-22T19:29:38Z,2025-08-22T19:29:37Z,2025-08-22T19:29:37Z,True,1,0,1,5,0,1
155017,closed,[RISCV][NFC] Cleanup Negative Predicate Names,lenary,"Some negative predicates were named ""Not Has <Ext>"", and some were named ""No <Ext>"". I think the latter is clearer, so this moves those using the former to use the latter.",2025-08-22T19:20:49Z,2025-08-22T21:46:45Z,2025-08-22T21:46:41Z,2025-08-22T21:46:41Z,True,1,0,1,15,15,7
155013,closed,[NFC][MC][AVR] Rearrange decode functions in AVR disassembler,jurahul,Rearrange decode functions to be before including the generated disassembler code and eliminate forward declarations for most of them. This is possible because `fieldFromInstruction` is now in MCDecoder.h and not in the generated disassembler code.,2025-08-22T19:02:21Z,2025-08-25T15:20:23Z,2025-08-25T15:20:20Z,2025-08-25T15:20:20Z,True,0,0,1,2,50,1
155012,closed,[flang][cuda] Remove TODO for descriptor with addendum,clementval,Addendum is allocated as part of the descriptor so there is no need for extra care. ,2025-08-22T18:52:49Z,2025-08-22T21:32:46Z,2025-08-22T20:36:15Z,2025-08-22T20:36:15Z,True,0,0,1,0,14,2
155015,closed,Add option to allow pre/post increment/decrement operator in cppcoreg…,carlosgalvezp,"…uidelines-pro-bounds-pointer-arithmetic

Fixes #154907",2025-08-22T19:17:23Z,2025-08-23T06:38:53Z,2025-08-23T05:39:25Z,2025-08-23T05:39:25Z,True,2,0,1,47,16,5
155011,closed,[NFC][MC][MSP430] Rearrange decoder functions for MSP430 disassembler,jurahul,Rearrange decode functions to be before including the generated disassembler code and eliminate forward declarations.,2025-08-22T18:50:06Z,2025-08-25T15:19:54Z,2025-08-25T15:19:51Z,2025-08-25T15:19:51Z,True,1,0,1,2,9,1
155009,closed,[NFC][MC][XCore] Rearrange decoder functions for XCore disassembler,jurahul,Rearrange decode functions to be before including the generated disassembler code and eliminate forward declarations for most of them. This is possible because `fieldFromInstruction` is now in MCDecoder.h and not in the generated disassembler code.,2025-08-22T18:28:18Z,2025-08-26T17:36:36Z,2025-08-26T17:36:32Z,2025-08-26T17:36:32Z,True,4,0,1,2,71,1
155010,closed,[Asan] Make fuse-lld-globals.cpp require lld,boomanaiden154,"Otherwise if we do not build lld, this test will run and fail. Found when experimenting with LLVM_ENABLE_RUNTIMES=""compiler-rt"" on Windows.",2025-08-22T18:29:37Z,2025-08-22T19:20:17Z,2025-08-22T19:20:15Z,2025-08-22T19:20:14Z,True,1,0,1,2,0,1
155008,closed,[AMDGPU] gfx1250 kernel descriptor update,rampitec,,2025-08-22T18:25:15Z,2025-08-22T22:33:16Z,2025-08-22T19:58:42Z,2025-08-22T19:58:42Z,True,5,0,1,622,56,8
155007,closed,[profcheck] Patch exclude list after `ba5d487`,mtrofin,"We haven't yet fixed anything under LoopVectorize, so new tests would cause profcheck bot failures.

Issue #147390",2025-08-22T18:23:30Z,2025-08-22T18:30:45Z,2025-08-22T18:30:42Z,2025-08-22T18:30:42Z,True,0,0,3,1,0,1
155005,closed,[NFC] `sort` llvm/utils/profcheck-xfail.txt,mtrofin,Easier to maintain. Sorted using `sort`,2025-08-22T18:16:06Z,2025-08-22T18:20:07Z,2025-08-22T18:19:58Z,2025-08-22T18:19:58Z,True,0,0,2,704,704,1
155006,closed,"[NFC][lldb] Add a null check, actually use new SharedModuleList class",augusto2112,"Add a missing null check pointed out in the previous PR review, and actually use the SharedModuleList class, which was introduced but unused.",2025-08-22T18:21:24Z,2025-08-22T18:29:12Z,2025-08-22T18:29:12Z,2025-08-22T18:29:12Z,True,1,0,1,8,7,1
155004,closed,[NFC][MC][VE] Rearrange decoder functions for VE disassembler,jurahul,Rearrange decode functions to be before including the generated disassembler code and eliminate forward declarations for most of them. This is possible because `fieldFromInstruction` is now in MCDecoder.h and not in the generated disassembler code.,2025-08-22T18:14:30Z,2025-08-25T15:19:11Z,2025-08-25T15:19:08Z,2025-08-25T15:19:08Z,True,0,2,2,50,100,1
155003,closed,[Offload][Conformance] Add randomized tests for double-precision math functions,leandrolcampos,"This patch adds a set of randomized conformance tests for double-precision math functions.

The functions included in this set were selected based on the following criteria:
- An implementation exists in `libc/src/math/generic` (i.e., it is not just a wrapper around a compiler built-in).
- The corresponding LLVM CPU libm implementation is correctly rounded.
- The function is listed in Table 68 of the OpenCL C Specification v3.0.19.",2025-08-22T18:14:16Z,2025-08-22T19:28:50Z,2025-08-22T19:07:29Z,2025-08-22T19:07:29Z,True,3,0,3,1303,5,20
155001,closed,[Driver] Fix out of place comment,melver,"The unrelated code was added in between the comment and what it is meant to document. Move the comment.

NFC.",2025-08-22T18:12:41Z,2025-08-22T18:36:17Z,2025-08-22T18:36:17Z,2025-08-22T18:36:17Z,True,2,0,1,4,3,1
154999,closed,[OpenMPIRBuilder] Fix tripcount not a multiple of tile size,Meinersbur,"The emitted code tests whether the current tile should executing the remainder iterations by checking the logical iteration number is the one after the floor iterations that execute the non-remainder iterations. There are two counts of how many iterations there are: Those of non-remainder iterations (simply rounded-down division of tripcount and tile size), and those including an additional floor iteration for the remainder iterations. The code was used the wrong one that caused the condition to never match.",2025-08-22T18:11:23Z,2025-08-26T09:30:43Z,2025-08-26T09:30:43Z,2025-08-26T09:30:42Z,True,1,0,2,11,10,6
154998,closed,[NFC][MC][RISCV] Rearrange decoder functions for RISCV disassembler,jurahul,Rearrange decode functions to be before including the generated disassembler code and eliminate forward declarations for most of them. This is possible because `fieldFromInstruction` is now in MCDecoder.h and not in the generated disassembler code.,2025-08-22T18:06:57Z,2025-08-22T18:55:47Z,2025-08-22T18:55:40Z,2025-08-22T18:55:40Z,True,1,0,1,2,10,1
154996,closed,[NFC][MC][Mips] Rearrange decoder functions for Mips disassembler,jurahul,Rearrange decode functions to be before including the generated disassembler code and eliminate forward declarations for most of them. This is possible because `fieldFromInstruction` is now in MCDecoder.h and not in the generated disassembler code.,2025-08-22T17:42:27Z,2025-08-25T15:18:25Z,2025-08-25T15:18:21Z,2025-08-25T15:18:21Z,True,3,3,2,455,863,1
154994,closed,[CIR] Upstream Re-Throw with no return,AmrDeveloper,"This change adds support for the throw op without sub expression and with noreturn 


Issue #154992",2025-08-22T17:28:35Z,2025-08-29T18:24:35Z,2025-08-29T18:24:35Z,2025-08-29T18:24:35Z,True,2,22,5,404,6,15
154993,closed,[NFC][MC][Lanai] Rearrange decoder functions for Lanai disassembler,jurahul,Rearrange decode functions to be before including the generated disassembler code and eliminate forward declarations for most of them. This is possible because `fieldFromInstruction` is now in MCDecoder.h and not in the generated disassembler code.,2025-08-22T17:28:21Z,2025-08-25T15:17:48Z,2025-08-25T15:17:44Z,2025-08-25T15:17:44Z,True,2,0,1,80,106,1
155002,closed,[FIR][OpenACC] fix loop order with generatePrivateInit,rscottmanley,"When generating a loop nest to initialize a private array, the loop nest should run from the slowest dimension to the fastest dimension. When you get a shape from a SequenceType it is from fastest to slowest dimension. Reverse the the order.",2025-08-22T18:13:33Z,2025-08-22T18:33:46Z,2025-08-22T18:33:46Z,2025-08-22T18:33:46Z,True,1,0,1,33,1,2
154990,closed,[NFC][MC][AArch64] Rearrange decode functions in AArch64 disassembler,jurahul,Rearrange decode functions to be before including the generated disassembler code and eliminate forward declarations for most of them. This is possible because `fieldFromInstruction` is now in MCDecoder.h and not in the generated disassembler code.,2025-08-22T17:22:02Z,2025-08-27T17:02:11Z,2025-08-27T17:02:07Z,2025-08-27T17:02:07Z,True,2,0,1,117,294,1
154989,closed,[RISCV] Rename VALUrVV/VALUrVX/VALUrVF tablegen clases. NFC,topperc,"Rename them to VMACVV/VX/VF. The 'r' previously meant ""reversed"" since their operand order is vs1, vs2 where other vector instructions are vs2, vs1.

These instructions are also ternary and have a tied register. ""MAC"" better reflects this property.

While doing this I also found a missing earlyclobber in VWMAC_MV_X, but I don't think this has any effect since we use pseudos for regalloc.",2025-08-22T17:14:07Z,2025-08-22T23:36:14Z,2025-08-22T23:36:12Z,2025-08-22T23:36:12Z,True,1,0,1,14,14,1
154988,closed,[NFC][MC][ARM] Rearrange decode functions in ARM disassembler,jurahul,"Move `tryAddingSymbolicOperand` and `tryAddingPcLoadReferenceComment` to before including the generated disassembler code. This is in preparation for rearranging the decoder functions to eliminate forward declarations.
",2025-08-22T17:12:38Z,2025-08-26T17:57:46Z,2025-08-26T17:57:44Z,2025-08-26T17:57:44Z,True,2,0,1,36,36,1
154984,closed,[NVPTX] Limit a sparsity selector in sparse MMA intrinsics.,kvederni,"This PR fixes NVPTX tests in LLVM testing by adding more limitations for a sparsity selector in sparse MMA intrinsics.
The previous PR that is merged to llvm:main is [PR150950](https://github.com/llvm/llvm-project/pull/150950). The merge to llvm:main is d9c6b7b.",2025-08-22T16:51:09Z,2025-08-22T19:27:31Z,2025-08-22T19:27:31Z,2025-08-22T19:27:31Z,True,2,0,1,12,1,2
154986,closed,[ICF] Add a NOP after branch in ICF thunk to improve debugability,DataCorrupted,"One-instruction functions are not considered as a `Sequence` of instructions in the eye of DebugInfo, this has made the debugability of an ICF'ed function really poor. Both verification #152807 and relocation #149618 of debug info are hard because of it.

We have two options moving forward:

1. Fix debug info #154851
2. Add a nop to ICF'ed functions (this PR) so thunks are not one-instruction functions anymore.

For design discussions / more context please move to #154851",2025-08-22T16:54:01Z,2025-09-09T16:49:47Z,2025-09-09T16:49:47Z,,False,10,1,7,184,88,7
154983,closed,[lldb] More windows fixes TestSettings.py,kastiglione,,2025-08-22T16:51:05Z,2025-08-22T21:53:57Z,2025-08-22T19:06:38Z,2025-08-22T19:06:38Z,True,1,0,1,8,4,1
154987,closed,[OMPIRBuilder] Avoid crash in BasicBlock::splice.,abidh,"Calling `BasicBlock::splice` in `spliceBB` when both `Old` and `New` are empty is a `nop` currently but it can cause a crash once debug records are used instead of debug intrinsics. This PR makes the call conditional on at least one of `Old` or `New` being non-empty.

Consider the following mlir:
```
omp.target map_entries() {
  llvm.intr.dbg.declare ...
  llvm.intr.dbg.declare ...
  omp.teams ...
  ...
}
```

Current code would translate llvm.intr Ops to llvm intrinsics. Old is the BasicBlock where they were get inserted and it will have 2 llvm debug intrinsics by the time the implementation of `omp.teams`  starts. This implementation creates many BasicBlocks by calling `splitBB`. The `New` is the just created BasicBlock which is empty.

In the new scheme (using debug records), there will be no instruction in the `Old` BB after llvm.intr Ops get translated but just 2 trailing debug records. So both `Old` and `New` are empty. When control reaches `BasicBlock::splice`, it calls `spliceDebugInfoEmptyBlock`. This function expects that in this case (`Src` is empty but has trailing debug records), the `ToIt` is valid and it can call `adoptDbgRecords` on it. This assumption is not true in this case as `New` is empty and `ToIt` is pointing to end(). The fix is to only call `BasicBlock::splice` when at least of `Old` or `New` is not empty.

",2025-08-22T16:58:29Z,2025-09-02T13:49:56Z,2025-08-29T15:56:27Z,2025-08-29T15:56:26Z,True,7,2,4,37,1,2
154978,closed,[clang-format][NFC] Move AlignAfterOpenBracket tests,gedare,Add AlignBracketsTest.cpp to collect tests from FormatTest.cpp related to alignment and breaking after open brackets.,2025-08-22T16:24:20Z,2025-08-26T02:30:04Z,2025-08-26T01:08:29Z,2025-08-26T01:08:29Z,True,1,0,1,785,761,3
154977,closed,[OpenMP][omptest] Enforce test case order for 'standalone' build,mhalk,"Note: this only applies to 'standalone' builds, i.e. when:
LIBOMPTEST_BUILD_STANDALONE evaluates to 'ON'.

Use std::vector<std::pair<std::string, TestSuite>> instead of a std::map.

Background:
In some cases it could happen that the test execution order would change vs. the order of appearance.
This can lead to suite failures when e.g. testing for device initialization because it is performed by the first executed test case.
By storing the test suites and cases in order of appearance this issue is avoided. (So far GoogleTest has behaved in the same way.)",2025-08-22T16:23:07Z,2025-08-22T18:42:11Z,2025-08-22T18:23:09Z,2025-08-22T18:23:09Z,True,0,0,1,25,11,3
154974,closed,[flang][docs][NFC] Remove stray backtick,Rageking8,Remove stray backtick introduced in commit https://github.com/llvm/llvm-project/commit/10cd0e7a8bdcd80c0b017f8d0b6b71dd61973b54.,2025-08-22T16:08:10Z,2025-08-28T10:47:26Z,2025-08-28T10:42:21Z,2025-08-28T10:42:21Z,True,4,0,1,1,1,1
154973,closed,[NFC][MC][Sparc] Rearrange decode functions in Sparc disassembler,jurahul,"Some of the decode function were previously declared before including `SparcGenDisassemblerTables.inc` and then defined later on because the generated code in `SparcGenDisassemblerTables.inc` references these functions and these functions reference `fieldFromInstruction` which used to be generated.

Now that `fieldFromInstruction` has moved to MCDecoder.h, we can move these definitions to before including the generated code without any circular references.",2025-08-22T15:51:11Z,2025-08-25T15:08:43Z,2025-08-25T15:08:34Z,2025-08-25T15:08:34Z,True,1,2,2,40,51,1
154969,closed,[clang][bytecode][NFC] Move local into closest scope,tbaederr,,2025-08-22T15:24:44Z,2025-08-22T15:52:39Z,2025-08-22T15:52:39Z,2025-08-22T15:52:39Z,True,1,0,1,1,1,1
154962,closed,[lldb][ClangASTImporter] Don't ASTImport LambdaExpr nodes,Michael137,"This patch works around an assertion that we hit in the `LambdaExpr` constructor when we call it from `ASTNodeImporter::VisitLambdaExpr` (see https://github.com/llvm/llvm-project/issues/149477). The lambda that we imported doesn't have the `NumCaptures` field accurately set to the one on the source decl. This is because in `MinimalImport` mode, we skip importing of lambda definitions: https://github.com/llvm/llvm-project/blob/e21b0dd81928a3266df0e3ede008fb7a6676ff95/clang/lib/AST/ASTImporter.cpp#L2499

In practice we have seen this assertion occur in our `import-std-module` test-suite when libc++ headers decide to use lambdas inside inline function bodies (the latest failure being caused by https://github.com/llvm/llvm-project/pull/144602).

To avoid running into this whenever libc++ decides to use lambdas in headers, this patch skips `ASTImport` of lambdas alltogether. Ideally this would bubble up to the user or log as an error, but we swallow the `ASTImportError`s currently. The only way this codepath is hit is when lambdas are used inside functions in defined in the expression evaluator, or when importing AST nodes from Clang modules. Both of these are very niche use-cases (for now), so a workaround seemed appropriate.",2025-08-22T14:48:46Z,2025-08-22T19:35:28Z,2025-08-22T19:33:59Z,2025-08-22T19:33:59Z,True,1,0,2,45,1,3
154970,closed,AMDGPU/GFX12: Do not wait unnecessarily before barriers,nhaehnle,"The barrier intrinsic itself should not have memory semantics. Frontends should use appropriate fence instructions for memory effects, and some frontends want to rely on that for performance (e.g. wait only for LDS before a barrier).

See the code comment for more detail.",2025-08-22T15:34:23Z,2025-08-26T07:28:55Z,2025-08-23T07:07:59Z,2025-08-23T07:07:59Z,True,9,1,1,30,36,5
154959,closed,[rtsan] Fix ioctl args in interceptor test,davidtrevelyan,"This PR addresses https://github.com/llvm/llvm-project/issues/154818:

- Updates ioctl interceptor test to pass in a required third argument (for `FIONREAD`)
- Introduces a new test for ioctl call without a third argument (for `FIONCLEX`)
- Updates other ioctl test to check returned result",2025-08-22T14:25:54Z,2025-08-22T20:04:48Z,2025-08-22T20:04:48Z,2025-08-22T20:04:48Z,True,2,0,1,12,3,1
154958,closed,[Offload] Full AMD support for olMemFill,RossBrunton,,2025-08-22T14:14:42Z,2025-08-26T10:49:13Z,2025-08-26T10:49:13Z,2025-08-26T10:49:13Z,True,2,12,3,210,54,3
154956,closed,[flang][NFC] Fix copy-and-paste error in atand testcase.,c8ef,Fix failure in https://lab.llvm.org/buildbot/#/builders/53/builds/19265.,2025-08-22T14:12:39Z,2025-08-22T14:49:14Z,2025-08-22T14:49:10Z,2025-08-22T14:49:10Z,True,2,0,1,1,1,1
154955,closed,[flang] optimize `cosd` precision,c8ef,Part of https://github.com/llvm/llvm-project/issues/150452.,2025-08-22T14:07:12Z,2025-08-25T17:45:17Z,2025-08-25T17:45:17Z,2025-08-25T17:45:17Z,True,1,0,1,17,6,2
154952,closed,[AMDGPU][True16][CodeGen] update zext pattern with reg_sequence,broxigarchen,update zext pattern with reg_sequence. This is a follow up from https://github.com/llvm/llvm-project/pull/154211#discussion_r2288538817,2025-08-22T13:57:36Z,2025-09-03T01:26:45Z,2025-09-03T01:26:45Z,2025-09-03T01:26:45Z,True,1,0,2,1,3,1
154951,closed,[clang][DebugInfo] Disable objective-C tests on AIX and z/OS,daltenty,"These tests don't work due to limitations in backend support, so it's better to mark them uniformly unsupported on AIX and z/OS.",2025-08-22T13:53:11Z,2025-08-22T15:53:10Z,2025-08-22T15:53:05Z,2025-08-22T15:53:05Z,True,1,0,2,5,0,1
154949,closed,[MLIR][XeGPU] Scattered ops sg-to-wi distribution,akroviakov,"This PR adds distribution patterns for scattered load and store ops, chunk size included.

XeGPU moves toward offsets being part of the load/store ops, so the pass only supports this case. Manipulating a vector of offsets indirectly through create_tdesc is complex and soon to become obsolete anyway. 
This PR assumes the SIMT-adapted scatter ops verification introduced in https://github.com/llvm/llvm-project/pull/154653. The distribution itself can be reviewed in the meantime.",2025-08-22T13:45:29Z,2025-09-03T20:39:02Z,2025-09-03T18:48:56Z,2025-09-03T18:48:55Z,True,17,59,9,315,24,4
154953,closed,"[flang][OpenMP] Fix typos in diagnostic messages, NFC",kparzysz,,2025-08-22T13:57:39Z,2025-08-22T16:36:19Z,2025-08-22T14:47:06Z,2025-08-22T14:47:06Z,True,3,0,2,7,7,2
154945,closed,release/21.x: [libc++] Add tests for the ABI break introduced by switching to _LIBCPP_COMPRESSED_PAIR (#154559),llvmbot,"Backport 2a83cf5d0e592890f74c5d5ff4a30ae4cf54b61b

Requested by: @ldionne",2025-08-22T13:32:09Z,2025-08-25T14:32:50Z,2025-08-25T14:32:18Z,2025-08-25T14:32:17Z,True,5,0,1,718,0,10
154947,closed,[Offload] Fix definition of olMemFill,callumfare,Fix regression introduced by #154102 - the way offload-tblgen handles names has changed,2025-08-22T13:43:49Z,2025-08-22T13:48:01Z,2025-08-22T13:48:01Z,2025-08-22T13:48:01Z,True,1,0,1,1,2,1
154944,closed,[TableGen] Implement getOperandIdxName,ro-i,This is meant as the inverse of getNamedOperandIdx and returns the OpName for a given operand index for a given opcode.,2025-08-22T13:25:05Z,2025-08-25T12:32:24Z,2025-08-25T10:10:03Z,2025-08-25T10:10:03Z,True,6,29,5,192,69,3
154942,closed,Openmp 6.0 allow default clause on the target directive,chandraghale,Sections 7.5.1 default Clause in OpenMP 6.0. Allow default clause on the target directive. ,2025-08-22T13:18:34Z,2025-08-28T07:51:32Z,2025-08-28T07:51:31Z,2025-08-28T07:51:31Z,True,4,2,3,135,0,3
154941,closed,[clang] Fix ignoring converted first arg of elementwise_fma,tbaederr,"Checking CI.


Fixes #154900",2025-08-22T13:11:43Z,2025-08-22T17:14:48Z,2025-08-22T17:14:48Z,2025-08-22T17:14:48Z,True,2,2,1,5,0,2
154938,closed,[MLIR][LLVMIR][DLTI] Pass to update #llvm.target's features per relevant backend,rolfmorel,"Modifies `#llvm.target<..., features = $FEATURES>` so that `$FEATURES` is now an `#llvm.target_features<[...]>` attribute (rather than a `StringAttr`). This enables the attribute to respond to DLTI queries for the different target features.

The pass updates the `$FEATURES` attribute of the target attr at name `llvm.target` in accordance with the (Sub)Target's features that the relevant backend knows about.

---

DEMO:
```mlir
module attributes {llvm.target = #llvm.target<triple = ""x86_64-unknown-linux"",
                                              chip = ""skylake""> } {
}
```
by way of `-llvm-target-to-target-features` turns into:
```mlir
module attributes {llvm.target = #llvm.target<triple = ""x86_64-unknown-linux"",
                                              chip = ""skylake"", 
                                              features = <[""+64bit"", ""+64bit-mode"", ""+adx"", ""+aes"", ""+allow-light-256-bit"", ""+avx"", ""+avx2"", ""+bmi"", ""+bmi2"", ""+clflushopt"", ""+cmov"", ""+crc32"", ""+cx16"", ""+cx8"", ""+ermsb"", ""+f16c"", ""+false-deps-popcnt"", ""+fast-15bytenop"", ""+fast-gather"", ""+fast-scalar-fsqrt"", ""+fast-shld-rotate"", ""+fast-variable-crosslane-shuffle"", ""+fast-variable-perlane-shuffle"", ""+fast-vector-fsqrt"", ""+fma"", ""+fsgsbase"", ""+fxsr"", ""+idivq-to-divl"", ""+invpcid"", ""+lzcnt"", ""+macrofusion"", ""+mmx"", ""+movbe"", ""+no-bypass-delay-blend"", ""+no-bypass-delay-mov"", ""+no-bypass-delay-shuffle"", ""+nopl"", ""+pclmul"", ""+popcnt"", ""+prfchw"", ""+rdrnd"", ""+rdseed"", ""+sahf"", ""+slow-3ops-lea"", ""+sse"", ""+sse2"", ""+sse3"", ""+sse4.1"", ""+sse4.2"", ""+ssse3"", ""+vzeroupper"", ""+x87"", ""+xsave"", ""+xsavec"", ""+xsaveopt"", ""+xsaves""]>>} {
}
```",2025-08-22T12:42:02Z,2025-08-26T22:12:35Z,2025-08-26T22:12:35Z,2025-08-26T22:12:35Z,True,3,20,16,468,146,15
154937,closed,"Reapply ""[compiler-rt]: fix CodeQL format-string warnings via explicit",ampandey-1995,"casts (#153843)""

Error Fixes.

> Replace ssize_t with sanitizer equivalent ssize.

This reverts commit ee5367bedb97ae8df9930ac1c162b3287c743663.",2025-08-22T12:36:01Z,2025-08-22T13:38:11Z,2025-08-22T13:05:30Z,2025-08-22T13:05:30Z,True,2,0,1,44,39,9
154934,closed,[NFCI][MC][DecoderEmitter] Fix BitWidth for fixed length inst encodings,jurahul,"Change `InstructionEncoding` to use `Size` field to derive the BitWidth for fixed length instructions as opposed to the number of bits in the `Inst` field. For some backends, `Inst` has more bits than `Size`, but `Size` is the true size of the instruction.

Also add validation that `Inst` has at least `Size * 8` bits and any bits in `Inst` beyond that are either 0 or unset.

Verified no change in generated *GenDisassembler.inc files before/after.",2025-08-22T12:16:34Z,2025-08-24T15:12:09Z,2025-08-24T14:04:08Z,2025-08-24T14:04:08Z,True,11,5,2,126,24,2
154935,closed,[LV] Strip outdated code in cost-model-matching,artagnon,"Since c97c686 ([VPlan] Allow folding not (cmp eq) -> icmp ne with other select users), the code is no longer needed.",2025-08-22T12:20:31Z,2025-08-22T12:54:03Z,2025-08-22T12:53:41Z,,False,3,1,1,0,20,1
154933,closed,[mlir][amdgpu] Promote gpu.shuffle to amdgpu.permlane_swap,tgymnich,"- promote `gpu.shuffle %src xor {16,32} 64` to `amdgpu.permlane_swap %src {16,32}` ",2025-08-22T11:59:41Z,2025-08-24T10:41:10Z,2025-08-24T10:41:10Z,2025-08-24T10:41:10Z,True,2,0,2,114,17,9
154939,closed,[NFC][OpenMP] Add several use_device_ptr/addr tests.,abhinavgaba,"Most tests are either compfailing or runfailing.

They should start passing once we start using ATTACH map-type based codegen. (#153683)

Even after they start passing, there are a few places where the EXPECTED and actual CHECKs are different, due to two main issues:
* use_device_ptr translation on `&p[0]` is not succeeding in looking-up a previously mapped `&p[1]`
* privatization of byref use_device_addr operands is not happening correctly.

The above should be fixed as separate standalone changes.",2025-08-22T12:54:48Z,2025-08-25T21:24:01Z,2025-08-25T21:23:27Z,2025-08-25T21:23:27Z,True,2,1,4,1481,4,15
154932,closed,[AMDGPU] canCreateUndefOrPoisonForTargetNode - BFE_I32/U32 can't create poison/undef,RKSimon,"Add AMDGPUTargetLowering::canCreateUndefOrPoisonForTargetNode handler and tag BFE_I32/U32 nodes as they can only propagate poison, not create poison/undef.

Fighting some of the remaining regressions in #152107 - need advice on the v_round_f64 change",2025-08-22T11:44:02Z,2025-08-22T12:42:36Z,2025-08-22T12:14:45Z,2025-08-22T12:14:45Z,True,1,1,1,98,107,4
154931,closed,[mlir][scf] Quick fix to scf.execute_region no_inline,jungpark-mlir,Asm printer should exclude `no_inline` attr during printing optional attrs at the bottom.,2025-08-22T11:24:42Z,2025-08-22T12:11:27Z,2025-08-22T12:11:27Z,2025-08-22T12:11:27Z,True,2,0,2,2,3,2
154930,closed,RuntimeLibcalls: Add entries for stackprotector globals,arsenm,"Add entries for_stack_chk_guard, __ssp_canary_word, __security_cookie,
and __guard_local. As far as I can tell these are all just different
names for the same shaped functionality on different systems.

These aren't really functions, but special global variable names. They
should probably be treated the same way; all the same contexts that
need to know about emittable function names also need to know about
this. This avoids a special case check in IRSymtab.

This isn't a complete change, there's a lot more cleanup which
should be done. The stack protector configuration system is a
complete mess. There are multiple overlapping controls, used in
3 different places. Some of the target control implementations overlap
with conditions used in the emission points, and some use correlated
but not identical conditions in different contexts.

i.e. useLoadStackGuardNode, getIRStackGuard, getSSPStackGuardCheck and
insertSSPDeclarations are all used in inconsistent ways so I don't know
if I've tracked the intention of the system correctly.

The PowerPC test change is a bug fix on linux. Previously the manual
conditions were based around !isOSOpenBSD, which is not the condition
where __stack_chk_guard are used. Now getSDagStackGuard returns the
proper global reference, resulting in LOAD_STACK_GUARD getting a
MachineMemOperand which allows scheduling.",2025-08-22T11:20:05Z,2025-08-23T01:50:42Z,2025-08-23T01:21:00Z,2025-08-23T01:21:00Z,True,7,0,1,92,109,14
154928,closed,release/21.x: [LLD][COFF] Set isUsedInRegularObj for target symbols in resolveAlternateNames (#154837),llvmbot,"Backport a6fcd1a6632a57e1b670dd607dac97ff3bd2d33a

Requested by: @cjacek",2025-08-22T11:11:57Z,2025-08-25T14:32:20Z,2025-08-25T14:31:50Z,2025-08-25T14:31:50Z,True,4,0,1,26,0,2
154929,closed,[BOLT][AArch64] Enabling Inlining for Memcpy for AArch64 in BOLT,yafet-a,"## Overview
The pass for inlining memcpy in BOLT was currently X86-specific. It was using the instruction `rep movsb` which currently has no equivalent in ARM v8-A.

This patch implements a static size analysis system for AArch64 memcpy inlining that extracts copy sizes from preceding instructions to then use it to generate the optimal width-specific load/store sequences.

## Testing Coverage (`inline-memcpy.s`)
### Positive Tests:
- [x] Exact size optimizations: 1, 2, 4, 8, 16, 32 bytes → optimal instruction sequences
- [x] Arbitrary size decomposition: 37 bytes → 16+16+4+1 byte sequence with correct offsets
- [x] Inline count verification: CHECK-INLINE: inlined 8 memcpy() calls
- [x] Assembly validation: CHECK-ASM patterns verify exact generated instructions
### Negative Tests:
- [x] Large size safety: 128 bytes → CHECK-ASM-NOT: ldr.*q (no SIMD, skipped inlining)
- [x] No unwanted instructions: CHECK-ASM-NOT patterns ensure clean generation",2025-08-22T11:20:03Z,2025-09-09T13:09:24Z,2025-09-09T13:09:24Z,2025-09-09T13:09:24Z,True,5,53,26,540,4,6
154927,closed,[orc-rt] Add C and C++ APIs for WrapperFunctionResult.,lhames,"orc_rt_WrapperFunctionResult is a byte-buffer with inline storage and a builtin error state. It is intended as a general purpose return type for functions that return a serialized result (e.g. for communication across ABIs or via IPC/RPC).

orc_rt_WrapperFunctionResult contains a small amount of inline storage, allowing it to avoid heap-allocation for small return types (e.g. bools, chars, pointers).",2025-08-22T11:04:11Z,2025-08-22T11:18:30Z,2025-08-22T11:18:30Z,2025-08-22T11:18:30Z,True,0,0,1,389,0,6
154926,closed,[mlir][debug] Convert DbgIntrOp to DebugRecords directly.,abidh,"Currently the `DbgDeclareOP/DbgValueOP/DbgLabelOp` are first converted to llvm debug intrinsics which are later translated to debug records by a call of `convertToNewDbgValues`. This is not only inefficient but also makes the code that works on intermediate IR unnecessarily complicated. The debug intrinsics are also being phased out. This PR converts these Ops directly to debug records.

The conversion is relatively simple but there is a bit of code repetition due to how the APIs in the `DIBuilders` are named. There are few `cast<>` which I would like to do without but could not see a good way around them. Any suggestions welcome here. Also noticed that `DISubprogramAttr` is inherited from `DIScopeAttr` while in llvm, the `DISubprogram` inherits from `DILocalScope`. I am going to fix this separately and then we could use `FusedLocWith<LLVM::DILocalScopeAttr>` and cast to `DILocalScope` will be much safer.

As the output remains the same, the existing tests cover this change. I also ran the `GDB` tests with flang and there was no regression.",2025-08-22T11:01:20Z,2025-09-02T13:49:55Z,2025-08-29T17:45:29Z,2025-08-29T17:45:29Z,True,3,18,3,53,28,3
154924,closed,[MLIR][NFC] Speed up is valid symbol check,wsmoses,"This removes the closure indirection, and removes the recursion on isValidSymbol. The rewriting of the recursion is particularly helpful to avoid redundant checks of isPure and checking the isValidSymbol of the operands for each parent region check",2025-08-22T10:47:29Z,2025-08-22T12:49:06Z,2025-08-22T12:49:04Z,2025-08-22T12:49:04Z,True,6,19,5,17,15,1
154922,closed,[orc-rt] Add inline specifier to orc_rt::make_error.,lhames,Prevents linker errors for duplicate definitions when make_error is used from more than one file.,2025-08-22T10:33:19Z,2025-08-22T10:37:16Z,2025-08-22T10:37:11Z,2025-08-22T10:37:11Z,True,0,0,1,1,1,1
154919,closed,s390x: optimize 128-bit fshl and fshr by high values,folkertdev,"Turn a funnel shift by N in the range `121..128` into a funnel shift in the opposite direction by `128 - N`. Because there are dedicated instructions for funnel shifts by values smaller than 8, this emits fewer instructions.

This additional rule is useful because LLVM appears to canonicalize `fshr` into `fshl`, meaning that the rules for `fshr` on values less than 8 would not match on organic input.

I reported this in https://github.com/llvm/llvm-project/issues/129955#issuecomment-3207488190, where a `fshr(a, b, 5)` is canonicalized into `fshl(a, b, 123)`.

https://godbolt.org/z/ossMvr31E

``` llvm
define <16 x i8> @vec_sld_manual(<16 x i8> %a, <16 x i8> %b) unnamed_addr {
start:
  %0 = bitcast <16 x i8> %a to i128
  %1 = bitcast <16 x i8> %b to i128
  %_3 = tail call i128 @llvm.fshl.i128(i128 %0, i128 %1, i128 123)
  %2 = bitcast i128 %_3 to <16 x i8>
  ret <16 x i8> %2
}

define <16 x i8> @vec_sld_builtin(<16 x i8> %a, <16 x i8> %b) unnamed_addr {
start:
  %_0 = tail call <16 x i8> @llvm.s390.vsrd(<16 x i8> %a, <16 x i8> %b, i32 noundef 5) #4
  ret <16 x i8> %_0
}

declare <16 x i8> @llvm.s390.vsrd(<16 x i8>, <16 x i8>, i32 immarg) unnamed_addr #2

declare i128 @llvm.fshl.i128(i128, i128, i128) #3
```
resulting in
```asm
vec_sld_manual:
        vsldb   %v0, %v24, %v26, 15
        vsldb   %v1, %v26, %v26, 15
        vsld    %v24, %v0, %v1, 3
        br      %r14

vec_sld_builtin:
        vsrd    %v24, %v24, %v26, 5
        br      %r14
```

with this PR both functions generate the same, smaller assembly.

---

cc @uweigand ",2025-08-22T10:19:46Z,2025-08-27T07:32:24Z,2025-08-27T07:31:50Z,2025-08-27T07:31:50Z,True,3,0,1,68,1,2
154912,closed,[clang][DebugInfo][test] Move debug-info tests from CodeGenObjCXX to DebugInfo directory,Michael137,"This patch works towards consolidating all Clang debug-info into the `clang/test/DebugInfo` directory
(https://discourse.llvm.org/t/clang-test-location-of-clang-debug-info-tests/87958).

Here we move only the `clang/test/CodeGenObjCXX` tests.

The list of files i came up with is:
1. searched for anything with `*debug-info*` in the filename
2. searched for occurrences of `debug-info-kind` in the tests",2025-08-22T08:54:33Z,2025-08-26T08:35:33Z,2025-08-26T08:35:29Z,2025-08-26T08:35:29Z,True,2,0,1,0,0,6
154915,closed,[RISCV] Support ZVqdot Codegen and C intrinsics,4vtomat,"spec: https://github.com/riscv/riscv-dot-product/tree/main

Node: we pack 4 int8/uint8 element in rs1 to a uint32.
",2025-08-22T09:18:06Z,2025-09-05T05:05:59Z,2025-09-05T03:38:58Z,2025-09-05T03:38:58Z,True,4,14,3,6634,0,35
154909,closed,[AMDGPU] Regenerate test case to cover gfx10 check lines.,abhigargrepo,Check lines for GFX10 is missing in this test case. Regenerate to fix test case.,2025-08-22T08:14:09Z,2025-08-25T11:10:49Z,2025-08-22T09:30:29Z,2025-08-22T09:30:29Z,True,1,0,2,128,1,1
154906,closed,[RISCV] Refactor RVV builtin code generation for reduce compilation time [NFC],kito-cheng,"Extract ManualCodegen blocks from riscv_vector.td to dedicated helper functions in RISCV.cpp to improve compilation times and code organization.

This refactoring:
- Reduces riscv_vector_builtin_cg.inc from ~70,000 lines to ~30,000 lines
- Extracts lots of ManualCodegen blocks into helper functions in RISCV.cpp
- Moves complex code generation logic from TableGen to C++
- Marks extracted functions with LLVM_ATTRIBUTE_NOINLINE to prevent excessive inlining in EmitRISCVBuiltinExpr's large switch statement, which would cause compilation time to increase significantly

Performance Impact on AMD Ryzen 9 3950X 16-Core with SSD (Release build) with GCC 11:

Before: real 1m4.560s, user 0m0.529s, sys 0m0.175s
After:  real 0m22.577s, user 0m0.498s, sys 0m0.152s

Which reduced around 65% of compilation time.

During this refactoring, I also found few more opportunities to optimize and simplify the code generation logic, but I think leave to next PR since it already change a lot of code.

Fix #88368",2025-08-22T07:50:51Z,2025-08-26T00:57:11Z,2025-08-26T00:57:11Z,2025-08-26T00:57:11Z,True,7,28,4,1022,689,2
154904,closed,[MLIR][NVVM] Support packed registers in `inline_ptx`,grypp,"Add support for packed registers with vectors.

Example:

```
%wo0 = nvvm.inline_ptx
          ""dp4a.s32.s32 {$w0}, {$r0}, {$r1}, {$r2};""
          ro(%src, %mask, %zero : vector<4xi8>, i32, i32)
          -> i32
```

Here, `vector<4xi8>` is lowered to an `i32` register (i.e., an `r` in PTX).",2025-08-22T07:32:09Z,2025-09-02T12:15:55Z,2025-09-02T12:15:55Z,2025-09-02T12:15:55Z,True,2,7,2,138,30,4
154903,closed,[cmake] Add config.guess for RISC-V BE,djtodoro,This adds config guess support for RISC-V big-endian.,2025-08-22T07:24:31Z,2025-08-22T19:07:40Z,2025-08-22T19:07:40Z,2025-08-22T19:07:40Z,True,1,0,1,1,1,1
154902,closed,[libunwind] fix pc range condition check bug,yingcong-wu,"There is an off-by-one error with current condition check for PC fallen into the range or not. There is another check within libunwind that use the correct checks in https://github.com/llvm/llvm-project/blob/5050da7ba18fc876f80fbeaaca3564d3b4483bb8/libunwind/src/UnwindCursor.hpp#L2757
```
      if ((fdeInfo.pcStart <= pc) && (pc < fdeInfo.pcEnd))
```",2025-08-22T07:23:21Z,2025-09-02T02:05:02Z,2025-09-01T01:15:52Z,2025-09-01T01:15:52Z,True,15,8,14,59,1,2
154916,closed,[TableGen][DecoderEmitter] Fix decoder reading bytes past instruction,s-barannikov,"See the added test. Before this change the decoder would first read the second byte, despite the fact that there are 1-byte instructions that could match:

```
/* 0 */       MCD::OPC_ExtractField, 8, 8,  // Inst{15-8} ...
/* 3 */       MCD::OPC_FilterValue, 0, 4, 0, // Skip to: 11
/* 7 */       MCD::OPC_Decode, 186, 2, 0, // Opcode: I16_0, DecodeIdx: 0
/* 11 */      MCD::OPC_FilterValue, 1, 4, 0, // Skip to: 19
/* 15 */      MCD::OPC_Decode, 187, 2, 0, // Opcode: I16_1, DecodeIdx: 0
/* 19 */      MCD::OPC_FilterValue, 2, 4, 0, // Skip to: 27
/* 23 */      MCD::OPC_Decode, 188, 2, 0, // Opcode: I16_2, DecodeIdx: 0
/* 27 */      MCD::OPC_ExtractField, 0, 1,  // Inst{0} ...
/* 30 */      MCD::OPC_FilterValue, 0, 4, 0, // Skip to: 38
/* 34 */      MCD::OPC_Decode, 189, 2, 1, // Opcode: I8_0, DecodeIdx: 1
/* 38 */      MCD::OPC_FilterValueOrFail, 1,
/* 40 */      MCD::OPC_Decode, 190, 2, 1, // Opcode: I8_1, DecodeIdx: 1
/* 44 */      MCD::OPC_Fail,
```

There are no changes in the generated files. The only in-tree target that uses variable length decoder is M68k, which is free of decoding conflicts that could result in the decoder doing OOB access.

This also fixes misaligned ""Decoding Conflict"" dump, prettified example output is shown in the second test.
",2025-08-22T09:45:54Z,2025-08-22T21:51:50Z,2025-08-22T21:51:47Z,2025-08-22T21:51:47Z,True,1,10,1,153,34,3
154898,closed,[LoongArch] Support PreserveMost calling convention,heiher,"This introduces the simplest implementation of the `PreserveMost` calling convention, under which registers `r4-r31` are preserved, with the exception of `r12-r15` (used by the PLT) and `r20-r21` (`r20` used by the tail calls).

Related rust-lang/rust#145692",2025-08-22T06:43:23Z,2025-08-25T06:31:33Z,2025-08-25T06:15:58Z,2025-08-25T06:15:58Z,True,2,0,1,332,0,5
154899,closed,[clang][driver] Improve warning message for complex range overrides,s-watanabe314,"This patch improves the warnings to show which user options override the complex range. When a complex range is overridden, explicitly display both the option name and the implied complex range value for both the overriding and the overridden options.

See also the discussion in the following discourse post: https://discourse.llvm.org/t/the-priority-of-fno-fast-math-regarding-complex-number-calculations/84679",2025-08-22T06:50:44Z,2025-09-11T01:26:52Z,2025-09-11T01:26:52Z,2025-09-11T01:26:52Z,True,3,6,4,692,168,7
154897,closed,release/21.x: [Driver] DragonFly does not support C11 threads (#154886),llvmbot,"Backport 0fff4605922d137252875f072b3fb2973dbf9693

Requested by: @brad0",2025-08-22T06:09:49Z,2025-08-25T14:31:53Z,2025-08-25T14:31:16Z,2025-08-25T14:31:16Z,True,3,0,1,11,0,2
154894,closed,[sanitizer][NFCI] Add ASan/HWASan regression tests for @llvm.coro.id with promise allocas,thurstond,"ASan and HWASan did not play nicely with @llvm.coro.id's that had non-null promises: rewriting the promise alloca violated the assumptions of the coro-early pass (see https://github.com/llvm/llvm-project/issues/154830#issuecomment-3212314668 for analysis). Although this issue has been worked around already in ASan and HWASan (somewhat crudely, by disabling instrumentation for the entire presplit function; https://github.com/llvm/llvm-project/pull/99415, https://github.com/llvm/llvm-project/pull/154803), there is no test coverage to check the compiler would crash without the workarounds, if coro-early was run after ASan/HWASan (the existing `split-coro.ll` runs the passes in the opposite order and checks that ASan skips instrumentation).

This patch adds simple tests (which succeed with the existing workarounds, and would crash without). These will be useful for tracking progress towards better workarounds.",2025-08-22T05:37:17Z,2025-08-22T21:01:54Z,2025-08-22T21:01:54Z,2025-08-22T21:01:54Z,True,0,0,1,252,0,2
154893,closed,[llvm] Remove unused includes of SmallSet.h (NFC),kazutakahirata,"We just replaced SmallSet<T *, N> with SmallPtrSet<T *, N>, bypassing
the redirection found in SmallSet.h.  With that, we no longer need to
include SmallSet.h in many files.
",2025-08-22T05:18:32Z,2025-08-22T17:33:59Z,2025-08-22T17:33:46Z,2025-08-22T17:33:46Z,True,2,0,1,0,31,31
154892,closed,[llvm] Proofread CodingStandards.rst,kazutakahirata,,2025-08-22T05:17:40Z,2025-08-22T17:33:47Z,2025-08-22T17:33:39Z,2025-08-22T17:33:39Z,True,0,0,1,13,13,1
154891,closed,[ADT] Deprecate the redirection from SmallSet to SmallPtrSet,kazutakahirata,"This patch deprecates the redirection from SmallSet to SmallPtrSet.

I attempted to deprecate in the usual manner:

template <typename PointeeType, unsigned N>
LLVM_DEPRECATED(""..."", ""..."")
class SmallSet<PointeeType*, N> : public SmallPtrSet<PointeeType*, N> {};

However, the deprecation warning wouldn't fire.

For this reason, I've attached a deprecation message to the default
constructor.
",2025-08-22T05:17:05Z,2025-08-23T04:13:02Z,2025-08-23T03:37:57Z,2025-08-23T03:37:57Z,True,6,4,4,22,1,1
154890,closed,[ExecutionEngine] Remove an unnecessary cast (NFC),kazutakahirata,"getTargetFlags() already returns TargetFlagsType.
",2025-08-22T05:16:35Z,2025-08-22T17:33:40Z,2025-08-22T17:33:31Z,2025-08-22T17:33:31Z,True,0,0,1,1,1,1
154889,closed,[Sema] Remove an unnecessary cast (NFC),kazutakahirata,"getAsExpr() already returns Expr *.
",2025-08-22T05:16:18Z,2025-08-22T17:33:33Z,2025-08-22T17:33:24Z,2025-08-22T17:33:23Z,True,1,0,1,1,1,1
154887,closed,[mlir] Use default RemarkOpts constructor for c++20 compat,rupprecht,"Using the default constructor makes this header work in both c++17 and c++20 codebases. Without this, a c++20 codebase will break like this:

```c++
external/llvm-project/mlir/include/mlir/IR/Remarks.h:66:12: error: no matching constructor for initialization of 'RemarkOpts'
   66 |     return RemarkOpts{n, {}, {}, {}};
      |            ^         ~~~~~~~~~~~~~~~
external/llvm-project/mlir/include/mlir/IR/Remarks.h:58:8: note: candidate constructor (the implicit copy constructor) not viable: requires 1 argument, but 4 were provided
   58 | struct RemarkOpts {
      |        ^~~~~~~~~~
external/llvm-project/mlir/include/mlir/IR/Remarks.h:58:8: note: candidate constructor (the implicit move constructor) not viable: requires 1 argument, but 4 were provided
   58 | struct RemarkOpts {
      |        ^~~~~~~~~~
external/llvm-project/mlir/include/mlir/IR/Remarks.h:63:3: note: candidate constructor not viable: requires 0 arguments, but 4 were provided
   63 |   RemarkOpts() = delete;
      |   ^
external/llvm-project/mlir/include/mlir/IR/Remarks.h:65:31: error: constexpr function's return type 'RemarkOpts' is not a literal type
   65 |   static constexpr RemarkOpts name(StringRef n) {
      |                               ^
external/llvm-project/mlir/include/mlir/IR/Remarks.h:58:8: note: 'RemarkOpts' is not literal because it is not an aggregate and has no constexpr constructors other than copy or move constructors
   58 | struct RemarkOpts {
      |        ^
```",2025-08-22T04:54:40Z,2025-08-22T14:38:41Z,2025-08-22T14:38:40Z,2025-08-22T14:38:40Z,True,2,3,3,1,1,1
154888,closed,[orc-rt] Rename unique_function to move_only_function.,lhames,This will allow the ORC runtime and its clients to easily adopt the c++-23 std::move_only_function type.,2025-08-22T05:15:34Z,2025-08-22T05:26:14Z,2025-08-22T05:26:10Z,2025-08-22T05:26:10Z,True,0,0,1,117,111,5
154886,closed,[Driver] DragonFly does not support C11 threads,brad0,,2025-08-22T04:54:36Z,2025-08-22T06:02:56Z,2025-08-22T06:02:53Z,2025-08-22T06:02:53Z,True,1,0,1,11,0,2
154885,closed,"[NFC][SampleFDO] In text sample prof reader, report dreport more concrete parsing errors for different line types",mingmingl-llvm,The format `'NUM[.NUM]: NUM[ mangled_name:NUM]*'` applies for most line types except metadata ones.,2025-08-22T04:44:41Z,2025-08-23T23:45:00Z,2025-08-23T21:37:13Z,2025-08-23T21:37:13Z,True,12,0,2,10,3,1
154884,closed,NFC: remove some instances of deprecated capture,j2kun,"```
 warning: implicit capture of 'this' with a capture default of '=' is deprecated [-Wdeprecated-this-capture]
```",2025-08-22T04:39:30Z,2025-08-26T20:52:52Z,2025-08-26T20:29:27Z,2025-08-26T20:29:27Z,True,7,0,2,10,7,5
154882,closed,[bazel] Port #154774: unroll vector.from_elements,rupprecht,,2025-08-22T04:22:43Z,2025-08-22T04:33:51Z,2025-08-22T04:33:50Z,2025-08-22T04:33:50Z,True,0,0,1,1,0,1
154881,closed,[orc-rt] Use LLVM-style header naming scheme.,lhames,"This is more consistent with the rest of the LLVM project, and the resulting names are closer to the types defined in each of the headers.",2025-08-22T04:14:11Z,2025-08-22T04:28:06Z,2025-08-22T04:28:03Z,2025-08-22T04:28:03Z,True,0,0,1,32,32,13
154878,closed,[msan][NFCI] Refactor visitIntrinsicInst() into instruction families,thurstond,"Currently visitIntrinsicInst() is a long, partly unsorted list. This patch groups them into cross-platform, X86 SIMD, and Arm SIMD families, making the overall intent of visitIntrinsicInst() clearer:

```
  void visitIntrinsicInst(IntrinsicInst &I) {
    if (maybeHandleCrossPlatformIntrinsic(I))
      return;

    if (maybeHandleX86SIMDIntrinsic(I))
      return;

    if (maybeHandleArmSIMDIntrinsic(I))
      return;

    if (maybeHandleUnknownIntrinsic(I))
      return;

    visitInstruction(I);
  }
```

There is one disadvantage: the compiler will not tell us if the switch statements in the handlers have overlapping coverage.",2025-08-22T03:13:05Z,2025-08-25T19:16:42Z,2025-08-25T19:11:48Z,2025-08-25T19:11:48Z,True,3,2,2,88,49,1
154879,closed,[LoongArch] Pre-commit tests for vecreduce_and/or/...,tangaac,,2025-08-22T03:34:43Z,2025-08-22T09:52:44Z,2025-08-22T09:52:44Z,2025-08-22T09:52:44Z,True,1,0,1,1841,0,14
154880,closed,[TableGen][DecoderEmitter] Remove redundant variable (NFC),s-barannikov,"`NumFiltered` is the number of elements in all vectors in a map. It is ever compared to 1, which is equivalent to checking if the map contains exactly one vector with exactly one element.
",2025-08-22T04:03:18Z,2025-08-22T04:42:18Z,2025-08-22T04:42:07Z,2025-08-22T04:42:07Z,True,1,0,1,8,12,1
154877,closed,"Revert ""Fix Debug Build Using GCC 15""",dpalermo,Reverts llvm/llvm-project#152223,2025-08-22T02:53:07Z,2025-08-22T02:54:59Z,2025-08-22T02:54:58Z,2025-08-22T02:54:58Z,True,1,0,1,1,8,4
154876,closed,[RISCV] Mark More Fatal Errors as Usage/Internal,lenary,"We have lots of uses of `report_fatal_error` in the backend, which will result in a crash and a backtrace. This API has been replaced with `reportFatalUsageError` and `reportFatalInternalError`, for which only the latter emits a stack trace.

This tries to move the errors in RISCVISelLowering and RISCVRegisterInfo to the new APIs, to prevent some stack traces where we specificially do not support certain situations.

Updates #124132",2025-08-22T02:39:20Z,2025-08-22T18:57:18Z,2025-08-22T18:57:18Z,2025-08-22T18:57:18Z,True,1,0,2,48,46,9
154874,closed,[orc-rt] Add orc_rt::unique_function.,lhames,"A bare-bones version of LLVM's unique_function: this behaves like a std::unique_function, except that it supports move only callable types.",2025-08-22T02:06:31Z,2025-08-22T02:19:16Z,2025-08-22T02:19:16Z,2025-08-22T02:19:16Z,True,0,0,1,251,0,4
154875,closed,[AMDGPU][True16][CodeGen] update isel pattern with vgpr16 for 16 bit types,broxigarchen,"Update isel pattern with 16bit types to use vgp16 in true16 mode. This stop isel from generating illegal `vgpr32 = copy vpgr16`

This includes fcopysign, scalar_to_vector and i1 trunc. Updated lit test and added a few mir tests.

Stacking up these changes in one patch as I realized that doing these seperately could lead to unexpected failures in between.",2025-08-22T02:21:48Z,2025-09-09T14:58:26Z,2025-09-09T14:27:26Z,2025-09-09T14:27:26Z,True,8,5,1,1908,1225,18
154872,closed,[mlir] Add helper to check elementwise-mappable ops with tensors and scalars,snarang181,"This patch introduces a more general helper for identifying elementwise-mappable operations. The existing utility, `isElementwiseMappableOpOnRankedTensors`, only accepted operations when all operands were ranked tensors. In practice, many elementwise operations in MLIR allow mixing tensor operands with scalars. 
The new helper relaxes the restriction by accepting operands that are either ranked tensors or “scalar-like” types.",2025-08-22T01:59:33Z,2025-09-09T13:05:45Z,2025-08-25T18:01:57Z,2025-08-25T18:01:57Z,True,9,13,6,119,12,2
154870,closed,AMDGPU: Sign extend immediates for 32-bit subregister extracts,arsenm,"extractSubregFromImm previously would sign extend the 16-bit subregister
extracts, but not the 32-bit. We try to consistently store immediates
as sign extended, since not doing it can result in misreported
isInlineImmediate checks.",2025-08-22T01:49:59Z,2025-08-22T07:50:37Z,2025-08-22T07:50:36Z,2025-08-22T07:50:36Z,True,2,0,1,264,276,7
154869,closed,[orc-rt] Add error.h: structured error support.,lhames,"Adds support for the Error class, Expected class template, and related APIs that will be used for error propagation and handling in the new ORC runtime.

The implementations of these types are cut-down versions of similar APIs in llvm/Support/Error.h. Most advice on llvm::Error and llvm::Expected (e.g. from the LLVM Programmer's manual) applies equally to orc_rt::Error and orc_rt::Expected.

Ported from the old ORC runtime at compiler-rt/lib/orc.",2025-08-22T01:48:10Z,2025-08-22T01:53:58Z,2025-08-22T01:53:48Z,2025-08-22T01:53:47Z,True,0,0,1,1024,0,5
154871,closed,[TableGen] Avoid field lookup in a performance critical place (NFC),s-barannikov,"`Target.getInstructions()` is called by virtually all TableGen backends. It is slow, and one of the two factors is the use of an expensive predicate in `llvm::sort`. This change speeds up sorting by 10x.
",2025-08-22T01:57:16Z,2025-08-25T15:47:51Z,2025-08-25T15:47:48Z,2025-08-25T15:47:48Z,True,1,0,1,2,2,1
154863,closed,[Clang] Implement diagnostics for why is_final is false,snarang181,Adds onto https://github.com/llvm/llvm-project/issues/141911,2025-08-22T00:47:50Z,2025-08-22T13:50:38Z,2025-08-22T13:50:38Z,2025-08-22T13:50:38Z,True,2,0,1,180,2,4
154865,closed,[LLVM][MC][DecoderEmitter] Add support to specialize decoder per bitwidth,jurahul,"This change adds an option to specialize decoders per bitwidth, which can help reduce the (compiled) code size of the decoder code.

**Current state**:
Currently, the code generated by the decoder emitter consists of two key functions: `decodeInstruction` which is the entry point into the generated code and `decodeToMCInst` which is invoked when a decode op is reached while traversing through the decoder table. Both functions are templated on `InsnType` which is the raw instruction bits that are supplied to `decodeInstruction`.

Several backends call `decodeInstruction` with different `InsnType` types, leading to several template instantiations of these functions in the final code. As an example, AMDGPU instantiates this function with type `DecoderUInt128` type for decoding 96/128-bit instructions, `uint64_t` for decoding 64-bit instructions, and `uint32_t` for decoding 32-bit instructions. Since there is just one `decodeToMCInst` in the generated code, it has code that handles decoding for *all* instruction sizes. However, the decoders emitted for different instructions sizes rarely have any intersection with each other. That means, in the AMDGPU case, the instantiation with InsnType == DecoderUInt128 has decoder code for 32/64-bit instructions that is *never exercised*. Conversely, the instantiation with InsnType == uint64_t has decoder code for 128/96/32-bit instructions that is never exercised. This leads to unnecessary dead code in the generated disassembler binary (that the compiler cannot eliminate by itself).

**New state**:
With this change, we introduce an option `specialize-decoders-per-bitwidth`. Under this mode, the DecoderEmitter will generate several versions of `decodeToMCInst` function, one for each bitwidth. The code is still templated, but will require backends to specify, for each `InsnType` used, the bitwidth of the instruction that the type is used to represent using a type-trait `InsnBitWidth`. This will enable the templated code to choose the right variant of `decodeToMCInst`. Under this mode, a particular instantiation will only end up instantiating a single variant of `decodeToMCInst` generated and that will include only those decoders that are applicable to a single bitwidth, resulting in elimination of the code duplication through instantiation and a reduction in code size.

Additionally, under this mode, decoders are uniqued only within a given bitwidth (as opposed to across all bitwidths without this option), so the decoder index values assigned are smaller, and consume less bytes in their ULEB128 encoding. As a result, the generated decoder tables can also reduce in size.

Adopt this feature for the AMDGPU and RISCV backend. In a release build, this results in a net 55% reduction in the .text size of libLLVMAMDGPUDisassembler.so and a 5% reduction in the .rodata size. For RISCV, which today uses a single `uint64_t` type, this results in a 3.7% increase in code size (expected as we instantiate the code 3 times now).

Actual measured sizes are as follows:
```
Baseline commit: 72c04bb882ad70230bce309c3013d9cc2c99e9a7
Configuration: Ubuntu clang version 18.1.3, release build with asserts disabled.
 
AMDGPU        Before       After      Change
======================================================
.text         612327       275607     55% reduction
.rodata       369728       351336      5% reduction          

RISCV:
======================================================
.text          47407       49187      3.7% increase   
.rodata        35768       35839      0.1% increase
```",2025-08-22T01:13:24Z,2025-09-03T06:51:53Z,2025-09-01T20:44:19Z,2025-09-01T20:44:19Z,True,56,49,3,362,125,13
154861,closed,[docs] Fix debug and strict aliasing typo (#140071),Arghnews,"See https://github.com/llvm/llvm-project/issues/140071, I concluded that removing the typo was the best thing after looking into the commit. Happy to be told if this is incorrect and a different change would be better",2025-08-21T23:54:38Z,2025-08-22T17:02:28Z,2025-08-22T17:02:28Z,2025-08-22T17:02:28Z,True,3,0,1,2,2,2
154862,closed,[AMDGPU] Update codegen tests for PR #154069,gandhi56,,2025-08-21T23:57:47Z,2025-08-22T13:58:22Z,2025-08-22T13:58:22Z,2025-08-22T13:58:21Z,True,2,3,1,723,193,4
154860,closed,[Sanitizers][Test] XFAIL fuzzer-ubsan on darwin arm,wrotki,"This test currently fails to compile on darwin arm host (green.lab.llvm.org)

rdar://158303001
",2025-08-21T23:47:44Z,2025-08-22T17:54:52Z,2025-08-22T17:54:48Z,2025-08-22T17:54:48Z,True,1,0,1,3,0,1
154857,closed,[libc] Enable double math functions on the GPU,leandrolcampos,This patch adds the `acos` math function to the NVPTX build. It also adds the `sincos` math function to the `math.h` header.,2025-08-21T23:20:37Z,2025-08-22T11:52:13Z,2025-08-22T11:52:13Z,2025-08-22T11:52:13Z,True,1,0,1,17,8,2
154859,closed,release/21.x: ThinLTOBitcodeWriter: Emit __cfi_check to full LTO part of bitcode file.,llvmbot,"Backport ff85dbdf6b399eac7bffa13e579f0f5e6edac3c0

Requested by: @efriedma-quic",2025-08-21T23:46:22Z,2025-09-03T10:08:08Z,2025-09-03T10:07:30Z,2025-09-03T10:07:30Z,True,3,0,1,30,1,2
154858,closed,[PAC] Fix codegen for polymorphic class variables with consteval constructors,ahatanak,"Fix a bug in CodeGen where such variables could cause a compilation error or be emitted with an undef initializer when the vtable was signed with address discrimination.

rdar://155696134",2025-08-21T23:39:16Z,2025-08-25T22:06:20Z,2025-08-25T17:17:44Z,2025-08-25T17:17:43Z,True,3,4,1,33,11,2
154855,closed,[NFC][MC][Decoder] Fix off-by-one indentation in generated code,jurahul,,2025-08-21T23:11:13Z,2025-08-22T00:20:09Z,2025-08-22T00:20:05Z,2025-08-22T00:20:05Z,True,1,0,1,1,1,1
154853,closed,[lldb][debugserver] update --help to list all the options,jasonmolenda,"These are almost all for internal-developer-users only so ""look at debugserver.cpp"" wasn't unreasonable, but we rarely add any new options so a simple list of all recognized options isn't a burden to throw in the help method.",2025-08-21T22:42:49Z,2025-08-22T07:05:19Z,2025-08-22T07:05:13Z,2025-08-22T07:05:13Z,True,1,0,1,33,0,1
154856,closed,[libc++][Android] Fix Dockerfile,rprichard,"In docker-compose.yml, add *image_versions arguments for the android-buildkite-builder service, so that ACTIONS_BASE_IMAGE is set (to builder-base). This will also set the BASE_IMAGE, which we don't really want, because this service uses ubuntu:noble instead of the ubuntu:jammy default, but that's OK because the setting is successfully overridden.

In vendor/android/run-buildbot-container, use the correct ghcr.io Docker path (ghcr.io/llvm/libcxx-android-builder).

Reenable the build-and-push of ghcr.io/llvm/libcxx-android-builder in the libcxx-build-containers.yml workflow.
",2025-08-21T23:19:52Z,2025-08-29T21:22:58Z,2025-08-28T22:03:36Z,2025-08-28T22:03:36Z,True,2,0,4,22,14,3
154854,closed,[fuzzer][Fuchsia] Prevent deadlock from suspending threads,PiJoules,"Every once in a couple hundred runs of a downstream fuzzer test, we see a fuzzing test freeze while waiting for a thread to be suspended. The main thread is frozen because it's waiting to suspend either the alarm or rss thread which is stuck waiting for an exception they sent out to be handled. Specifically, both threads send out a synthetic `ZX_EXCP_THREAD_STARTING` exception to be handled by the crash handling thread which sets up an exception channel on the whole process with `ZX_EXCEPTION_CHANNEL_DEBUGGER`. This is the only channel type that listens to thread stop/start exceptions. Normally, the exception would be ignored and the alarm or rss thread would continue normally once the crash handling thread closes the read exception. However, the memory snapshot machinery can suspend this thread while its in the process of waiting for or handling a `ZX_EXCP_THREAD_STARTING` sent by either the rss or alarm thread. If this is suspended first, then we attempt to suspend either the alarm or rss thread while they're still waiting for the crash handling thread to handle its exception, we will freeze waiting for those threads to give the suspend signal, which they won't because they're blocked on waiting for the exception handler. This is the deadlock.

Until there's a way for the memory snapshot machinery to suspend the thread while it's stuck on an exception, then we can work around this in the meantime by just ensuring the alarm and rss threads start normally via signals on the initial startup path. I can assert locally the freezing doesn't occur after 6000 runs where prior we would see it every couple hundred runs. Note this type of issue can arise again if the fuzzing test launches any dangling threads that happen to not start yet. One of the recommendations for writing a fuzz test is that the test may launch threads, but they should be joined by the end of the test (https://llvm.org/docs/LibFuzzer.html#fuzz-target), so hopefully we won't see this type of bug rise frequently from fuzz tests. More broadly, this can also arise if any process launches its own debugger via `ZX_EXCEPTION_CHANNEL_DEBUGGER`, but I would think in practice this isn't very likely to happen.

More context in https://fxbug.dev/436923423.",2025-08-21T23:00:29Z,2025-08-22T20:36:31Z,2025-08-22T20:22:32Z,2025-08-22T20:22:32Z,True,1,1,4,61,3,2
154852,closed,[NVPTX] add support for 128-bit atomics,AlexMaclean,,2025-08-21T22:36:23Z,2025-08-28T17:41:47Z,2025-08-28T17:41:47Z,2025-08-28T17:41:47Z,True,3,20,5,1163,22,9
154851,closed,[NFC][DebugInfo] Allow single instruction sequence in line table to make symbolication of merged functions easier,DataCorrupted,"A ""Sequence"" in the line table consists of multiple machine instructions [LowPC, HighPC) and rows [FirstRowIndex, LastRowIndex).  

https://github.com/llvm/llvm-project/blob/b3baa4d0635db5c5294d9abd2ea63bb330b069bd/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h#L223-L225

When adding a Sequence, LastRow is `RowNumbe + 1` while HighPC is `Row.Address`:

https://github.com/llvm/llvm-project/blob/b3baa4d0635db5c5294d9abd2ea63bb330b069bd/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp#L582-L590

This means that if you look up LineTable's last row (`LT->Rows.back()`), you get nothing because its address is not considered to be part of the ""Sequence"".

Another problem is one-instruction functions can't be its own ""Sequence"" since LowPC == HighPC, the parser will think this is an invalid Sequence. Normally this is not a problem, but with ICF=safe-thunk, many one-instruction thunks are added. These functions' DebugLine can't be parsed as a stand alone ""Sequence"", which had made relocation (#149618) and verification (#152807) substantially harder.


I can think of two solutions:

1. Define Sequence's PC to be [LowPC, HighPC + MinInstLength) shown in this diff
     - Unfortunately when I try this one out a bunch of tests in llvm/unittests/DebugInfo/GSYM/GSYMTest.cpp, will fail. 
2. During ICF=safe-thunk, the thunk function can have two instructions (a nop before branch shown below) https://github.com/llvm/llvm-project/pull/154986

https://github.com/llvm/llvm-project/blob/d4b9acad580d85ff95a30056f5a89cc41ef31b55/lld/MachO/Arch/ARM64.cpp#L177-L179",2025-08-21T22:14:38Z,2025-09-09T16:49:52Z,2025-09-09T16:49:51Z,,False,5,0,8,115,6,5
154850,closed,[AMDGPU] Refactor insertWaveSizeFeature,rampitec,"If a wavefrontsize32 or wavefrontsize64 is the only possible value
insert it into feature list by default and use that value as an
indication that another wavefront size is not legal.",2025-08-21T21:59:57Z,2025-08-27T07:30:18Z,2025-08-27T07:30:15Z,2025-08-27T07:30:15Z,True,5,4,3,25,50,3
154849,closed,[lldb] Fix TestSettings.py,kastiglione,Fixes a few test failures on windows. See https://github.com/llvm/llvm-project/pull/153233,2025-08-21T21:59:04Z,2025-08-22T10:43:36Z,2025-08-21T22:19:45Z,2025-08-21T22:19:45Z,True,2,0,3,3,2,1
154847,closed,"[RISCV] Fold (vslide1up undef, v, (extract_elt x, 0)) into (vslideup x, v, 1)",mshockwave,"To a slide1up, if the scalar value we're sliding in was extracted from the first element of a vector, we can use a normal vslideup of 1 instead with its passthru being that vector. This can eliminate an extract_element instruction (i.e. vfmv.f.s, vmv.x.s).

------

Stacked on top of #154450 (mostly reusing its tests)

We might be able to do a similar thing on vslide1down / vslidedown -- for constant VL, at least. In which the new vslidedown will have one less VL than its original VL; mask also needs to be constant. But I haven't seen cases like that in the wild.",2025-08-21T21:36:37Z,2025-09-04T04:20:52Z,2025-09-04T04:20:47Z,2025-09-04T04:20:47Z,True,1,10,4,104,99,4
154844,closed,[flang][cuda] Fix offset with multiple assumed size shared array,clementval,"When multiple assumed size variable are used in a kernel with dynamic shared memory, each variable use the 0 offset. Update the pass to account for that. 

```
attributes(global) subroutine testany( a )
    real(4), shared :: smasks(*)
    real(8), shared :: dmasks(*)
end subroutine
```",2025-08-21T21:27:48Z,2025-08-21T21:51:47Z,2025-08-21T21:51:43Z,2025-08-21T21:51:43Z,True,2,1,2,49,4,2
154845,closed,[RISCV] Merge int_riscv_masked_atomicrmw_*_i32/i64 intrinsics using llvm_anyint_ty.,topperc,"I think having separate intrinsics for RV32 and RV64 is making
some things more complicated than using type overloading.

This reduces the number of isel patterns in the .td file. They're
still expanded my HwMode so it doesn't reduce the binary size.

getIntrinsicForMaskedAtomicRMWBinOp no longer needs to look at XLen.

This makes adding the i64 versions to getTgtMemIntrinsic in #154805
unnecessary.",2025-08-21T21:30:22Z,2025-08-22T18:33:30Z,2025-08-22T18:33:28Z,2025-08-22T18:33:28Z,True,1,1,3,85,146,3
154848,closed,[ARM] Set isCheapToSpeculateCtlz as true for hasV5TOps and no Thumb 1,AZero13,"This is so that we don't expand to include unneeded 0 checks.

Also fix the logic error in LegalizerInfo so it is NOT legal on Thumb1 in Fast-ISEL.

Finally, Remove the README entry regarding this issue.",2025-08-21T21:43:26Z,2025-08-25T20:16:19Z,2025-08-25T19:43:49Z,2025-08-25T19:43:49Z,True,6,0,2,117,23,5
154842,closed,[VPlan] Support scalable VFs in narrowInterleaveGroups.,fhahn,"Update narrowInterleaveGroups to support scalable VFs. After the transform, the vector loop will process a single iteration of the original vector loop for fixed-width vectors and vscale iterations for scalable vectors.",2025-08-21T21:08:31Z,2025-08-31T19:45:07Z,2025-08-31T19:45:07Z,2025-08-31T19:45:07Z,True,1,7,2,26,22,2
154839,closed,Print ProgramPoint instead of pointer for better logging,pchen7e2,"There're places where a pointer instead of `ProgramPoint` object is passed to stream print `<<`:

https://github.com/pchen7e2/llvm-project/blob/4256d8229602eb08598761f211d54e719007b468/mlir/lib/Analysis/DataFlowFramework.cpp#L132-L133

and they'll be printed as pointer value. This PR converts them to object before passing to stream printers.

I have a random local IR and I call `opt` tool on it with `-debug-only=dataflow`. 

Before:
```
Invoking 'mlir::dataflow::DeadCodeAnalysis' on: 0x51936d8
Invoking 'mlir::triton::(anonymous namespace)::AxisInfoAnalysis' on: 0x51936d8
Creating dependency between mlir::dataflow::PredecessorState of <before operation>:scf.yield %arg3 : i32
and mlir::dataflow::PredecessorState on 0x51936d8
```
After:
```
Invoking 'mlir::dataflow::DeadCodeAnalysis' on: <before operation>:scf.yield %arg3 : i32
Invoking 'mlir::triton::(anonymous namespace)::AxisInfoAnalysis' on: <before operation>:scf.yield %arg3 : i32
Creating dependency between mlir::dataflow::PredecessorState of <before operation>:scf.yield %arg3 : i32
and mlir::dataflow::PredecessorState on <before operation>:scf.yield %arg3 : i32
```

It's now calling `point->print` instead of printing the pointer address value.",2025-08-21T20:40:50Z,2025-08-22T20:36:47Z,2025-08-22T17:45:27Z,2025-08-22T17:45:27Z,True,1,1,2,2,2,1
154838,closed,[RISCV] Add a helper class to reduce PseudoAtomicLoadNand* pattern duplication. NFC,topperc,,2025-08-21T20:27:36Z,2025-08-22T05:35:32Z,2025-08-22T05:35:29Z,2025-08-22T05:35:29Z,True,1,0,2,17,24,1
154837,closed,[LLD][COFF] Set isUsedInRegularObj for target symbols in resolveAlternateNames,cjacek,"Fixes: #154595

Prior to commit bbc8346e6bb543b0a87f52114fed7d766446bee1, this flag was set by `insert()` from `addUndefined()`. Set it explicitly now.",2025-08-21T20:16:48Z,2025-08-22T11:12:07Z,2025-08-22T11:05:19Z,2025-08-22T11:05:19Z,True,5,0,1,26,0,2
154834,closed,[win][x64] Various fixes for unwind v2,dpaoliello,"* `SetFrame` does not count as a stack allocation.
* `mov` in the epilog undoes `SetFrame` (but is not required), it does not deallocate a stack allocation.
* `mov` in the epilog MUST be before any stack deallocation or register popping.
* Remove assert for having a prolog without any epilogs (this is possible for `noreturn` functions, for instance).
* Improve the errors in `MC` to include the problematic function name.",2025-08-21T20:06:32Z,2025-08-29T16:07:25Z,2025-08-29T16:00:01Z,2025-08-29T16:00:01Z,True,3,3,1,216,22,4
154833,closed,ThinLTOBitcodeWriter: Emit __cfi_check to full LTO part of bitcode file.,pcc,"The CrossDSOCFI pass runs on the full LTO module and fills in the
body of __cfi_check. This function must have the correct attributes in
order to be compatible with the rest of the program. For example, when
building with -mbranch-protection=standard, the function must have the
branch-target-enforcement attribute, which is normally added by Clang.
When __cfi_check is missing, CrossDSOCFI will give it the default set
of attributes, which are likely incorrect. Therefore, emit __cfi_check
to the full LTO part, where CrossDSOCFI will see it.
",2025-08-21T20:02:51Z,2025-08-28T22:00:14Z,2025-08-21T23:31:33Z,2025-08-21T23:31:33Z,True,5,0,1,30,1,2
154835,closed,[RISCV] Reorder atomic pseudo instructions and isel patterns. NFC,topperc,"Instead of interleaving the pseudo definitions and their patterns, define all the pseudos together and all the patterns together.

Add IsRV32 predicate to the patterns.",2025-08-21T20:09:01Z,2025-08-21T21:22:05Z,2025-08-21T21:22:02Z,2025-08-21T21:22:02Z,True,1,0,1,20,17,1
154828,closed,[AMDGPU] Add test to show failure with SRC_*_HI registers. NFC.,rampitec,"Since src_{private|shared}_{base|limit} registers are added and
are not artifical compiler happily uses it when it can. In HW
these registers do not exist and the encoding belongs to their
64-bit super-register or 32-bit low register. Same instructions
will produce relocation if run through asm.",2025-08-21T19:21:21Z,2025-08-22T09:31:47Z,2025-08-22T07:50:26Z,2025-08-22T07:50:26Z,True,7,0,1,57,0,1
154832,closed,"Reapply ""[lldb-dap] Re-land refactor of DebugCommunication. (#147787)""",ashgti,This reverts commit 0f33b90b6117bcfa6ca3779c641c1ee8d03590fd and includes a fix for the added test that was submitted between my last update and pull.,2025-08-21T19:59:07Z,2025-08-21T22:26:52Z,2025-08-21T22:26:52Z,2025-08-21T22:26:52Z,True,1,0,2,581,469,15
154825,closed,[AllocToken] Introduce AllocToken instrumentation pass,melver,"Introduce `AllocToken`, an instrumentation pass designed to provide
tokens to memory allocators enabling various heap organization
strategies, such as heap partitioning. The pass instruments functions
marked with a new attribute `sanitize_alloc_token` by rewriting
allocation calls to include a token ID, appended as a function argument
with the default ABI.

The design aims to provide a flexible framework for implementing
different token generation schemes. It currently supports the following
token modes:

- TypeHash (default): token IDs based on a hash of the allocated type
- Random: statically-assigned pseudo-random token IDs
- Increment: incrementing token IDs per TU

To improve the accuracy of the `TypeHash` mode, also introduces support
for `!alloc_token_hint` metadata. The metadata can be attached to
allocation calls to provide richer semantic information to be consumed
by the AllocToken pass. Optimization remarks can be enabled to show
where no metadata was available.

An alternative ""fast ABI"" is provided, where instead of passing the
token ID as an argument (e.g., `__alloc_token_malloc(size, id)`), the
token ID is directly encoded into the name of the called function (e.g.,
`__alloc_token_0_malloc(size)`). Where the maximum tokens is small, this
offers more efficient instrumentation by avoiding the overhead of
passing an additional argument at each allocation site.

Changelog since initial version in RFC [1]:
 * Renamed from AllocPartition to AllocToken, along with other keywords
   and command line options.
 * The maximum number of tokens is unbounded by default, removing the
   previous default limit of 64.

Link: https://discourse.llvm.org/t/rfc-a-framework-for-allocator-partitioning-hints/87434 [1]
",2025-08-21T19:14:40Z,2025-08-21T19:19:03Z,2025-08-21T19:18:27Z,,False,1,0,1,1027,3,26
154824,closed,"[NVPTX] Allow more argument integer types, such as i256 and i96",AlexMaclean,"The refactoring of ComputePTXValueVTs  in https://github.com/llvm/llvm-project/pull/154476 caused the complier to no longer crash when lowering i256 and i96. This has caused a few tests to unexpectedly pass.

Update these tests and tweak how we emit parameter declarations to correctly lower these types. ",2025-08-21T19:06:41Z,2025-08-21T20:54:39Z,2025-08-21T20:54:39Z,2025-08-21T20:54:39Z,True,1,0,2,3,8,3
154823,closed,[NFC][MC][Sparc] Minor code cleanup in Sparc disassembler,jurahul,"- use llvm::endian::read<> to read bit/little endian.
- Range check against size of the lookup tables instead of hardcoded numbers.
- Make lookup tables constexpr.
- Drop {} for single-statement if-else.",2025-08-21T19:02:01Z,2025-08-22T14:59:40Z,2025-08-22T14:22:50Z,2025-08-22T14:22:50Z,True,2,0,1,33,35,1
154821,closed,[RISCV][LoongArch] Prefix tablegen class names for intrinsics with 'RISCV'. NFC,topperc,"All targets are included by Intrinsics.td so we should name things carefully to avoid interfering with other targets.

Copy one class that LoongArch was also using.",2025-08-21T18:50:21Z,2025-08-22T05:45:27Z,2025-08-22T04:40:35Z,2025-08-22T04:40:35Z,True,2,0,2,41,37,3
154822,closed,[AArch64][SDAG] Lower f16->s16 FP_TO_INT_SAT to *v1f16,mrkajetanp,"Conversions from f16 to s16 performed by FP_TO_INT_SAT can be done directly within FPRs, e.g. `fcvtzs h0, h0`.
Generating this format reduces the number of instruction required for correct behaviour, as it sidesteps the issues with incorrect saturation that arise when using `fcvtzs w0, h0` for the same casts.
Add new AArch64ISD::FCVTZS_HALF and AArch64ISD::FCVTZU_HALF nodes to represent the necessary instruction sequence.

Related to https://github.com/llvm/llvm-project/issues/154343.",2025-08-21T18:56:39Z,2025-08-28T14:19:34Z,2025-08-28T14:19:34Z,2025-08-28T14:19:34Z,True,2,14,6,30,11,4
154817,closed,[Clang] Fix incorrect return type for `__builtin_shufflevector`,jhuber6,"Summary:
The `__builtin_shufflevector` call would return a GCC vector in all
cases where the vector type was increased. Change this to preserve
whether or not this was an extended vector.

Fixes: https://github.com/llvm/llvm-project/issues/107981
",2025-08-21T18:24:29Z,2025-08-21T21:13:52Z,2025-08-21T21:13:52Z,2025-08-21T21:13:52Z,True,1,0,3,10,3,2
154819,closed,[mlir][XeGPU] Update utils for LayoutAttr and SliceAttr support,chencha3,"`SliceAttr` was introduced in #150146, but the XeGPU utilities don't support it yet. Additionally, the arrival of `MemLayoutAttr` (#153273) introduces two distinct attribute categories in XeGPU:
1. `DistributeLayoutAttr` (which includes `LayoutAttr` and `SliceAttr`) for layout distribution,
2. `MemLayoutAttr` for memory layout description.

To avoid confusion caused by the previous naming conventions, this PR renames and refactors relevant XeGPU utilities to clearly indicate their focus on `DistributeLayoutAttr`, while also adding support for `SliceAttr`. It also updated the WgToSg and Blocking passes based on this change. 

This PR doesn't change the definition of `TensorDescType` and implementation of subgroup-distribution pass, which still take `LayoutAttr` only.",2025-08-21T18:39:22Z,2025-08-27T17:39:08Z,2025-08-27T17:37:16Z,2025-08-27T17:37:16Z,True,1,8,7,235,135,10
154816,closed,[RISCV] Use llvm_anyint_ty instead of llvm_any_ty for scalar intrinsics. NFC,topperc,,2025-08-21T18:21:55Z,2025-08-22T05:18:42Z,2025-08-22T05:18:39Z,2025-08-22T05:18:39Z,True,2,0,3,5,5,1
154815,closed,[NFC][MC][ARM] Fix formatting for `ITStatus` and `VPTStatus`,jurahul,,2025-08-21T18:20:51Z,2025-08-21T21:26:22Z,2025-08-21T21:26:18Z,2025-08-21T21:26:18Z,True,2,0,1,66,80,1
154811,closed,[ARM] Lower BSWAP on Pre-V6 ARM,AZero13,The end result is not as sexy as planned but it is the same number of instructions.,2025-08-21T18:07:51Z,2025-08-22T16:54:56Z,2025-08-22T16:54:56Z,,False,2,0,1,119,124,4
154808,closed,[CIR] Add support for emitting vtables,andykaylor,This adds a simplified version of the code to emit vtables. It does not yet handle RTTI or cases that require multiple vtables.,2025-08-21T17:57:58Z,2025-08-22T20:27:30Z,2025-08-22T20:26:17Z,2025-08-22T20:26:17Z,True,1,9,3,410,9,12
154809,closed,[LLDB] Omit loading local symbols in LLDB symbol table,barsolo2000,"https://discourse.llvm.org/t/rfc-should-we-omit-local-symbols-in-eekciihgtfvflvnbieicunjlrtnufhuelf-files-from-the-lldb-symbol-table/87384

Improving symbolication by excluding local symbols that are typically not useful for debugging or symbol lookups. This aligns with the discussion that local symbols, especially those with STB_LOCAL binding and STT_NOTYPE type (including .L-prefixed symbols), often interfere with symbol resolution and can be safely omitted.",2025-08-21T18:02:46Z,2025-08-28T00:58:09Z,2025-08-28T00:58:08Z,2025-08-28T00:58:08Z,True,3,13,12,121,1,2
154806,closed,[clang-tidy][doc] Improve option docs for readability-identifier-naming,carlosgalvezp,"Currently it's hard to find the ""general"" options, since they are listed in the middle of the ""specific"" options. Split them into two categories so they are easier to find.

This can help in adding a potential new general option in a follow-up patch.",2025-08-21T17:51:33Z,2025-08-21T19:41:25Z,2025-08-21T19:41:25Z,2025-08-21T19:41:25Z,True,1,0,1,19,7,2
154804,closed,[DirectX] Add `extract-section` to `llvm-objcopy` and implement it for `DXContainer`,inbelic,"This pr adds the `extract-section` option to `llvm-objcopy` as a common option. It differs from `dump-section` as it will produce a standalone object with just one section, as opposed to just the section contents.

For more context as to other options considered, see https://github.com/llvm/llvm-project/pull/153265#issuecomment-3195696003.

This difference in behaviour is used for DXC compatibility with `extract-rootsignature` and `/Frs`.

This pr then implements this functionality for `DXContainer` objects.

This is the second step of https://github.com/llvm/llvm-project/issues/150277 to implement as a compiler action that invokes `llvm-objcopy` for functionality.

This also completes the implementation of `extract-rootsignature` as described in https://github.com/llvm/llvm-project/issues/149560.",2025-08-21T17:50:21Z,2025-09-09T14:37:12Z,2025-09-09T14:37:12Z,2025-09-09T14:37:12Z,True,2,22,20,276,8,10
154805,closed,[RISCV] Add riscv_masked_atomicrmw_*_i64 to getTgtMemIntrinsic.,topperc,,2025-08-21T17:51:23Z,2025-08-22T16:02:39Z,2025-08-22T16:02:35Z,,False,2,4,2,9,0,1
154803,closed,"[hwasan] Port ""[Asan] Skip pre-split coroutine and noop coroutine frame (#99415)""",thurstond,"Originally suggested by rnk@

(this is the simplified function-level skip version, to unblock builds ASAP)",2025-08-21T17:38:33Z,2025-08-21T18:20:35Z,2025-08-21T18:20:35Z,2025-08-21T18:20:35Z,True,3,0,2,3,0,1
154802,closed,[NFC][MC][Decoder] Extract fixed pieces of decoder code into new header file,jurahul,Extract fixed functions generated by decoder emitter into a new MCDecoder.h header.,2025-08-21T17:36:32Z,2025-08-22T03:59:26Z,2025-08-21T22:06:43Z,2025-08-21T22:06:43Z,True,16,6,3,112,85,23
154801,closed,[Clang]Throw frontend error for target feature mismatch when using flatten attribute,abhishek-kaushik22,"

Fixes #149866",2025-08-21T17:30:19Z,2025-08-25T12:31:29Z,2025-08-25T11:40:01Z,2025-08-25T11:40:01Z,True,5,1,7,92,17,8
154794,closed,[VPlan/PatternMatch] Strip outdated hdr comment (NFC),artagnon,,2025-08-21T16:34:09Z,2025-08-21T19:43:07Z,2025-08-21T19:43:04Z,2025-08-21T19:43:04Z,True,1,0,1,0,5,1
154800,closed,[TableGen] Remove unnecessary use of utostr when writing to raw_ostream. NFC,topperc,raw_ostream is capable of printing unsigned or uint64_t directly.,2025-08-21T17:20:56Z,2025-08-22T00:44:57Z,2025-08-22T00:44:54Z,2025-08-22T00:44:54Z,True,1,1,3,5,7,1
154793,closed,[VPlan] Improve style in match_combine_or (NFC),artagnon,,2025-08-21T16:32:08Z,2025-08-22T11:01:45Z,2025-08-22T11:01:42Z,2025-08-22T11:01:42Z,True,1,0,1,1,5,1
154792,closed,[bazel] Port #152474: RemarkEngine,rupprecht,,2025-08-21T16:26:28Z,2025-08-21T16:36:43Z,2025-08-21T16:29:50Z,2025-08-21T16:29:50Z,True,0,0,1,24,0,2
154789,closed,[libc] Add boot code for AArch64,saturn691,"This is required in hermetic testing downstream. It is not complete, and will not work on hardware, however it runs on QEMU, and can report a pass/fail on our tests.",2025-08-21T16:19:47Z,2025-08-22T09:42:02Z,2025-08-21T18:47:34Z,2025-08-21T18:47:34Z,True,1,0,2,129,1,3
154788,closed,[clang][bytecode] Implement Pointer::getType() for function pointers,tbaederr,Fixes #152920,2025-08-21T16:11:51Z,2025-08-21T18:01:23Z,2025-08-21T18:01:23Z,2025-08-21T18:01:23Z,True,1,0,1,7,0,2
154787,closed,[clang-format] Fix a bug in SkipMacroDefinitionBody,owenca,Fixes #154683,2025-08-21T15:59:12Z,2025-08-26T02:46:33Z,2025-08-23T02:37:53Z,2025-08-23T02:37:53Z,True,3,0,2,28,15,2
154786,closed,Reland: [OpenMP] Add ompTest library to OpenMP,mhalk,"Reland of https://github.com/llvm/llvm-project/pull/147381

Added changes to fix observed BuildBot failures:
 * CMake version (reduced minimum to `3.20`, was: `3.22`)
 * GoogleTest linking (missing `./build/lib/libllvm_gtest.a`)
   * Related header issue (missing `#include ""llvm/Support/raw_os_ostream.h""`)",2025-08-21T15:33:01Z,2025-08-29T16:17:33Z,2025-08-22T11:56:13Z,2025-08-22T11:56:13Z,True,7,3,3,6741,0,32
154785,closed,[MemoryLocation] Size Scalable Masked MemOps,MDevereau,Scalable masked loads and stores with a get active lane mask whose size is less than or equal to the scalable minimum number of elements can be be proven to have a fixed size. Adding this infomation allows scalable masked loads and stores to benefit from alias analysis optimizations.,2025-08-21T15:17:41Z,2025-09-04T11:02:41Z,2025-09-04T11:02:41Z,2025-09-04T11:02:41Z,True,1,33,3,292,10,2
154784,closed,[AMDGPU] Common up two local memory size calculations. NFCI.,jayfoad,,2025-08-21T15:17:32Z,2025-08-22T07:44:17Z,2025-08-22T07:44:12Z,2025-08-22T07:44:12Z,True,1,1,1,2,5,2
154781,closed,[clang][DebugInfo][test] Move debug-info tests from CodeGenObjC to DebugInfo directory,Michael137,"This patch works towards consolidating all Clang debug-info into the `clang/test/DebugInfo` directory (https://discourse.llvm.org/t/clang-test-location-of-clang-debug-info-tests/87958).

Here we move only the `clang/test/CodeGenObjC` tests.

The list of files i came up with is:
1. searched for anything with `*debug-info*` in the filename
2. searched for occurrences of `debug-info-kind` in the tests",2025-08-21T15:11:39Z,2025-08-21T21:09:38Z,2025-08-21T21:09:34Z,2025-08-21T21:09:34Z,True,1,0,1,0,0,57
154782,closed,[clang-tidy] Ignore default ctor with user provided argument in `readability-container-size-empty`,flovent,Closes #154762,2025-08-21T15:11:48Z,2025-08-31T11:41:08Z,2025-08-31T08:21:11Z,2025-08-31T08:21:11Z,True,1,8,5,38,7,3
154779,closed,[flang][OpenMP] Semantic checks for GROUPPRIVATE,kparzysz,,2025-08-21T15:00:10Z,2025-08-22T13:29:59Z,2025-08-22T13:29:58Z,2025-08-22T13:29:58Z,True,1,2,2,117,1,5
154780,closed,[X86] Allow AVX2 per-element shift intrinsics to be used in constexpr,RKSimon,"This handles constant folding for the AVX2 per-element shift intrinsics, which handle out of bounds shift amounts (logical result = 0, arithmetic result = signbit splat)

AVX512 intrinsics will follow in follow up patches

First stage of #154287",2025-08-21T15:05:59Z,2025-08-22T08:24:28Z,2025-08-22T08:24:24Z,2025-08-22T08:24:24Z,True,2,0,2,82,67,4
154778,closed,[TableGen] Remove dummy UINT64_C(0) from end of InstBits table. NFC,topperc,I suspect this originally existed to avoid a trailing comma from the previous entry. C++ allows trailing commas in arrays so this isn't necessary.,2025-08-21T14:57:28Z,2025-08-21T17:42:40Z,2025-08-21T17:42:37Z,2025-08-21T17:42:37Z,True,1,0,1,1,1,1
154777,closed,[clang][bytecode] Guard strcmp against differing element types,tbaederr,"This can happen when casts are involved.

Fixes #154006",2025-08-21T14:56:41Z,2025-08-25T06:00:09Z,2025-08-21T16:02:09Z,2025-08-21T16:02:09Z,True,1,2,1,15,1,2
154776,closed,"[AMDGPU] Remove ""using namespace"" from a header. NFC.",jayfoad,,2025-08-21T14:50:27Z,2025-08-21T15:30:05Z,2025-08-21T15:29:44Z,2025-08-21T15:29:44Z,True,1,0,1,0,2,1
154775,closed,[MC][Decoder] Cull decoder cases,jurahul,,2025-08-21T14:49:41Z,2025-08-22T01:14:12Z,2025-08-22T01:14:12Z,,False,0,0,1,270,114,27
154771,closed,[VPlan] Introduce m_Cmp; match more compares,artagnon,"Extend [Specific]Cmp_match to handle floating-point compares, and introduce m_Cmp that matches both integer and floating-point compares. Use it in simplifyRecipe to match and simplify the general case of compares. The change has necessitated a bugfix in VPReplicateRecipe::execute.",2025-08-21T14:14:56Z,2025-08-24T14:11:50Z,2025-08-24T12:27:06Z,2025-08-24T12:27:06Z,True,38,13,2,126,108,7
154774,closed,[mlir][vector] fix: unroll vector.from_elements in gpu pipelines,yangtetris,"### Problem

PR #142944 introduced a new canonicalization pattern which caused failures in the following GPU-related integration tests:

- mlir/test/Integration/GPU/CUDA/TensorCore/sm80/transform-mma-sync-matmul-f16-f16-accum.mlir
- mlir/test/Integration/GPU/CUDA/TensorCore/sm80/transform-mma-sync-matmul-f32.mlir

The issue occurs because the new canonicalization pattern can generate multi-dimensional `vector.from_elements` operations (rank > 1), but the GPU lowering pipelines were not equipped to handle these during the conversion to LLVM.

### Fix

This PR adds `vector::populateVectorFromElementsLoweringPatterns` to the GPU lowering passes that are integrated in `gpu-lower-to-nvvm-pipeline`:

- `GpuToLLVMConversionPass`: the general GPU-to-LLVM conversion pass.
- `LowerGpuOpsToNVVMOpsPass`: the NVVM-specific lowering pass.",2025-08-21T14:49:04Z,2025-08-22T02:59:31Z,2025-08-22T02:46:06Z,2025-08-22T02:46:06Z,True,6,0,1,7,0,2
154770,closed,"[flang][Lower] Add Lowering for CO_{BROADCAST, MAX, MIN, SUM} to PRIF",JDPailleux,"In relation to the approval and merge of the https://github.com/llvm/llvm-project/pull/76088 specification about multi-image features in Flang.
Here is a PR on adding support of the collectives CO_BROADCAST, CO_SUM, CO_MIN and CO_MAX in conformance with the PRIF specification.
",2025-08-21T14:11:30Z,2025-09-10T06:07:22Z,2025-09-10T06:07:21Z,2025-09-10T06:07:21Z,True,3,17,7,661,9,8
154769,closed,[AMDGPU][NFC] Only include CodeGenPassBuilder.h where needed.,kosarev,"Saves around 125-210 MB of compilation memory usage per source for roughly one third of our backend sources, ~60 MB on average.",2025-08-21T14:06:37Z,2025-08-22T10:16:10Z,2025-08-22T09:05:06Z,2025-08-22T09:05:06Z,True,16,0,1,75,54,17
154768,closed,[SelectionDAG] Remove `UnsafeFPMath` in `visitFP_ROUND`,paperchalice,"Remove `UnsafeFPMath` in `visitFP_ROUND` part, it blocks some bugfixes related to clang and the ultimate goal is to remove `resetTargetOptions` method in `TargetMachine`, see FIXME in `resetTargetOptions`.
See also https://discourse.llvm.org/t/rfc-honor-pragmas-with-ffp-contract-fast
https://discourse.llvm.org/t/allowfpopfusion-vs-sdnodeflags-hasallowcontract ",2025-08-21T14:04:44Z,2025-08-22T11:46:33Z,2025-08-22T11:46:33Z,2025-08-22T11:46:33Z,True,3,5,2,46,11,2
154767,closed,"Revert ""[C++] Expose nullptr_t from stddef.h in C++ mode""",AaronBallman,"Reverts llvm/llvm-project#154599

It seems to be causing staging failures:
    https://lab.llvm.org/staging/#/builders/192/builds/1329
    https://lab.llvm.org/staging/#/builders/192/builds/1330
",2025-08-21T14:02:08Z,2025-08-21T14:05:43Z,2025-08-21T14:05:41Z,2025-08-21T14:05:41Z,True,1,0,1,2,28,3
154757,closed,AMDGPU: Allow folding multiple uses of some immediates into copies,arsenm,"In some cases this will require an avoidable re-defining of
a register, but it works out better most of the time. Also allow
folding 64-bit immediates into subregister extracts, unless it would
break an inline constant.

We could be more aggressive here, but this set of conditions seems
to do a reasonable job without introducing too many regressions.",2025-08-21T13:10:34Z,2025-09-05T23:26:22Z,2025-09-05T23:22:09Z,2025-09-05T23:22:09Z,True,3,0,1,1988,1834,47
154758,closed,[clang][bytecode] Implement ia32_select* builtins,tbaederr,,2025-08-21T13:10:50Z,2025-08-25T04:27:33Z,2025-08-21T14:34:58Z,2025-08-21T14:34:57Z,True,4,2,1,66,0,2
154759,closed,[LV] Remove use of llc from vectoriser tests,david-arm,"There were 5 X86 loop vectoriser tests that were piping the output from opt into llc. I think in the directory test/Transforms/LoopVectorize we should only be testing the output from the loop vectoriser pass. Any codegen tests should live in test/CodeGen/X86 instead.

avx512.ll: it looks like we were really just testing that we generate the right vector length.
fp32_to_uint32-cost-model.ll/fp64_to_uint32-cost-model.ll: the tests only seem to care that we're not scalarising the fptoui, so I've modified the test to check for vector ops. I've assumed there are already codegen tests for fptoui vector operations.
vectorization-remarks-loopid-dbg.ll: i've copied this test to CodeGen/X86/vectorization-remarks-loopid-dbg.ll for the llc RUN line variant
vectorization-remarks.ll: seems to test the same thing as vectorization-remarks-loopid-dbg.ll",2025-08-21T13:26:15Z,2025-08-26T09:24:13Z,2025-08-26T08:59:06Z,2025-08-26T08:59:06Z,True,4,2,2,92,43,6
154754,closed,[ComplexDeinterleaving] Use LLVM ADTs (NFC),MacDue,This swaps out STL types for their LLVM equivalents. This is recommended in the LLVM coding standards: https://llvm.org/docs/CodingStandards.html#c-standard-library,2025-08-21T13:02:22Z,2025-08-26T09:10:44Z,2025-08-26T09:10:40Z,2025-08-26T09:10:40Z,True,0,0,1,28,26,1
154750,closed,[clang][bytecode] Fix an out-of-bounds access with ia32_pmul*,tbaederr,"... builtins. We used to access the I'th index of the output vector, but that doesn't work since the output vector is only half the size of the input vector.",2025-08-21T12:38:01Z,2025-08-21T13:09:09Z,2025-08-21T13:09:08Z,2025-08-21T13:09:08Z,True,1,0,1,11,6,1
154751,closed,[llvm-exegesis] Implement the loop repetition mode for AArch64,sjoerdmeijer,"Subject says it all: implement the loop iterator decrement and jump function functions, and reserve X19 for the loop counter.",2025-08-21T12:48:48Z,2025-08-26T13:07:25Z,2025-08-26T13:07:18Z,2025-08-26T13:07:18Z,True,5,2,1,47,0,2
154753,closed,[RISCV] Mark Sub/AddChainWithSubs as legal reduction types,lukel97,"We used to vectorize these scalably but after #147026 they were split out from RecurKind::Add into their own RecurKinds, and we didn't mark them as supported in isLegalToVectorizeReduction.

This caused the loop vectorizer to drop the scalable VPlan because it thinks the reductions will be scalarized.

This fixes it by just marking them as supported.

Fixes #154554",2025-08-21T12:59:53Z,2025-08-21T13:43:49Z,2025-08-21T13:43:49Z,2025-08-21T13:43:49Z,True,1,0,2,166,42,2
154748,closed,[mlir][nvgpu] Fix nvgpu integration test,linuxlonelyeagle,Fix nvgpu mlir file integration test. This PR fixes the bug by removing memref.get_global and then using memref.view.,2025-08-21T12:37:15Z,2025-08-25T09:17:39Z,2025-08-25T09:04:02Z,2025-08-25T09:04:02Z,True,6,3,2,16,20,2
154744,closed,[C99] Update documentation for scope of variables in loops; NFC,AaronBallman,"I tracked down the document which changed the way variables are handled in for loops for C99, it was the same document that allowed mixing code and declarations but the editor's report made it seem like the features came from different papers.

This is an extension we backported to C89 but it's sufficiently distinct in the tracking page so I've added it explicitly to the backported features documentation.",2025-08-21T12:17:10Z,2025-08-21T12:49:56Z,2025-08-21T12:46:58Z,2025-08-21T12:46:58Z,True,1,0,1,2,6,2
154742,closed,"Revert ""[OpenMP] Add ompTest library to OpenMP""",jplehr,"Reverts llvm/llvm-project#147381

A few buildbot failures for different reasons.",2025-08-21T12:07:57Z,2025-08-21T12:09:09Z,2025-08-21T12:09:08Z,2025-08-21T12:09:07Z,True,0,0,1,0,6709,31
154741,closed,[Clang][analyzer][NFC] Const-correct CheckerContext API,necto,"Improve const-correctness of CheckerContext API by defining the missing `const` overloads to its accessor member functions.

This NFC change is triggered by a work on a downstream checker that operated on a `const CheckerConst& C` most of the time, but needed `C.getPredecessor()` at one point, which forced me to remove `const` from many places.",2025-08-21T12:01:53Z,2025-08-25T07:29:53Z,2025-08-25T07:29:49Z,2025-08-25T07:29:49Z,True,4,0,2,40,0,4
154738,closed,[Analyzer] No longer crash with VLA operands to unary type traits,steakhal,"sizeof was handled correctly, but __datasizeof and _Countof were not.

Fixes #151711

(cherry picked from commit 17327482f045b7119e116320db3e9c12fcf250ae with adjustments)
Dropping the ReleaseNotes part of the original patch.

The Static Analyzer release notes section will mention this patch in #154600",2025-08-21T11:52:43Z,2025-09-03T10:12:45Z,2025-09-03T10:06:59Z,2025-09-03T10:06:59Z,True,3,0,1,20,1,2
154740,closed,[flang][OpenMP] move omp end sections validation to semantics,tblah,"See #90452. The old parse tree errors exploded to thousands of unhelpful lines when there were multiple missing end directives.

Instead, allow a missing end directive in the parse tree then validate that it is present during semantics (where the error messages are a lot easier to control).",2025-08-21T11:57:24Z,2025-08-26T10:45:57Z,2025-08-26T10:45:56Z,2025-08-26T10:45:56Z,True,2,1,2,28,9,6
154739,closed,[flang][OpenMP] move omp end directive validation to semantics,tblah,"The old parse tree errors quckly exploded to thousands of unhelpful lines when there were multiple missing end directives (e.g. #90452).

Instead I've added a flag to the parse tree indicating when a missing end directive needs to be diagnosed, and moved the error messages to semantics (where they are a lot easier to control).

This has the disadvantage of not displaying the error if there were other parse errors, but there is a precedent for this approach (e.g. parsing atomic constructs).",2025-08-21T11:56:30Z,2025-08-26T10:12:06Z,2025-08-26T10:12:04Z,2025-08-26T10:12:03Z,True,4,3,3,116,5,5
154737,closed,[clang][x86] Add release note entries describing recent work to making SSE intrinsics generic and usable with constexpr,RKSimon,"I haven't created an exhaustive list of intrinsic changes, but I suppose I could if people see a strong need for it.",2025-08-21T11:33:41Z,2025-08-22T08:59:14Z,2025-08-22T08:59:11Z,2025-08-22T08:59:11Z,True,1,0,1,7,0,1
154736,closed,[Offload][NFC] Use tablegen names rather than `name` parameter for API,RossBrunton,,2025-08-21T11:30:45Z,2025-08-29T14:58:02Z,2025-08-22T10:13:57Z,2025-08-22T10:13:57Z,True,3,0,1,88,163,12
154730,closed,[VPlan] Add m_c_Add to VPlanPatternMatch. NFC,lukel97,"Same thing as #154705, and useful for simplifying the matching in #152167
",2025-08-21T10:57:21Z,2025-08-21T11:26:09Z,2025-08-21T11:26:09Z,2025-08-21T11:26:09Z,True,1,0,1,11,8,2
154732,closed,[clang-tidy] Support direct initialization in modernize smart pointer,Sockke,"Support for direct initialization detection in modernize smart pointer checks.
",2025-08-21T11:02:06Z,2025-09-01T08:33:30Z,2025-09-01T08:33:29Z,2025-09-01T08:33:29Z,True,3,2,4,28,16,4
154729,closed,[mlir][gpu] Warp execute terminator getter,adam-smnk,"Adds a utility getter to `warp_execute_on_lane_0` which simplifies access to the op's terminator.

Uses are refactored to utilize the new terminator getter.",2025-08-21T10:56:00Z,2025-08-22T16:24:24Z,2025-08-22T16:24:24Z,2025-08-22T16:24:24Z,True,2,2,1,18,22,5
154727,closed,[lldb] Corretly parse Wasm segments,JDevlieghere,"My original implementation for parsing Wasm segments was wrong in two related ways. I had a bug in calculating the file vm address and I didn't fully understand the difference between active and passive segments and how that impacted their file vm address.

With this PR, we now support parsing init expressions for active segments, rather than just skipping over them. This is necessary to determine where they get loaded.

Similar to llvm-objdump, we currently only support simple opcodes (i.e. constants). We also currently do not support active segments that use a non-zero memory index. However this covers all segments for a non-trivial Swift binary compiled to Wasm.",2025-08-21T10:41:37Z,2025-08-26T21:56:29Z,2025-08-26T21:56:26Z,2025-08-26T21:56:25Z,True,1,0,1,227,140,3
154728,closed,[LivePhysRegs] Make use of `MBB.liveouts()` (semi-NFC),MacDue,"This is done for consistency with LiveRegUnits (see #154325). This is technically not an NFC, as `MBB.liveouts()` excludes runtime-defined liveins, but no users currently depend on this.",2025-08-21T10:47:12Z,2025-08-23T19:59:08Z,2025-08-23T06:22:47Z,2025-08-23T06:22:46Z,True,10,0,1,38,22,3
154726,closed,[AMDGPU][gfx1250] Implement SIMemoryLegalizer,Pierre-vh,"Implements the base of the MemoryLegalizer for a roughly correct GFX1250 memory model.
Documentation will come later, and some remaining changes still have to be added, but this is the backbone of the model.",2025-08-21T10:31:05Z,2025-09-10T08:27:39Z,2025-09-10T08:18:11Z,2025-09-10T08:18:11Z,True,7,10,5,2523,1435,39
154724,closed,[MLIR] Adopt LDBG() debug macro in PatternApplicator.cpp (NFC),joker-eph,,2025-08-21T10:23:58Z,2025-08-21T10:32:22Z,2025-08-21T10:32:22Z,2025-08-21T10:32:22Z,True,1,0,1,3,3,1
154725,closed,[AMDGPU][gfx1250] Add memory legalizer tests (NFC),Pierre-vh,,2025-08-21T10:31:03Z,2025-09-09T10:42:10Z,2025-08-22T08:14:10Z,2025-08-22T08:14:09Z,True,2,0,2,20931,1119,26
154723,closed,[MLIR] Adopt LDBG() macro in BuiltinAttributes.cpp (NFC),joker-eph,,2025-08-21T10:22:43Z,2025-08-21T10:31:19Z,2025-08-21T10:31:19Z,2025-08-21T10:31:19Z,True,1,0,1,6,11,1
154721,closed,[MLIR] Adopt LDBG() macro in LLVM/NVVM/Target.cpp,joker-eph,,2025-08-21T10:21:16Z,2025-08-21T10:29:37Z,2025-08-21T10:29:37Z,2025-08-21T10:29:37Z,True,2,0,1,18,28,1
154722,closed,[MLIR] Adopt LDBG() in Transform/IR/Utils.cpp (NFC),joker-eph,,2025-08-21T10:22:03Z,2025-08-21T10:30:01Z,2025-08-21T10:30:01Z,2025-08-21T10:30:01Z,True,1,0,1,16,17,1
154716,closed,[llvm][Support] Fix missing-field-initializer warnings for crashreporter_annotations_t,Michael137,"Use `CRASHREPORTER_ANNOTATIONS_INITIALIZER` when possible, which will handle the field initialization for us. That's what we already do in compiler-rt:
https://github.com/llvm/llvm-project/blob/0c480dd4b61e285bfda4de99c77da28922e64b94/compiler-rt/lib/sanitizer_common/sanitizer_mac.cpp#L799-L817

This way we won't get these warnings when the layout of crashreporter_annotations_t changes:
```
llvm/lib/Support/PrettyStackTrace.cpp:92:65: warning: missing field 'blah' initializer [-Wmissing-field-initializers]
        = { CRASHREPORTER_ANNOTATIONS_VERSION, 0, 0, 0, 0, 0, 0, 0 };
                                                                  ^
1 warning generated
```",2025-08-21T10:00:37Z,2025-08-21T12:41:01Z,2025-08-21T12:40:57Z,2025-08-21T12:40:57Z,True,1,4,2,19,7,1
154720,closed,[MLIR] Use LDBG() macro in Dialect.cpp (NFC),joker-eph,,2025-08-21T10:19:53Z,2025-08-21T10:28:52Z,2025-08-21T10:28:52Z,2025-08-21T10:28:52Z,True,1,0,1,3,9,1
154712,closed,[PowerPC] ppc64-P9-vabsd.ll - update v16i8 abdu test now that it vectorizes in the middle-end,RKSimon,"The scalarized IR was written before improvements to SLP / cost models ensured that the abs intrinsic was easily vectorizable

opt -O3 : https://zig.godbolt.org/z/39T65vh8M

Now that it is we need a more useful llc test",2025-08-21T09:39:57Z,2025-08-27T07:42:56Z,2025-08-27T07:29:30Z,2025-08-27T07:29:30Z,True,2,0,2,16,991,1
154711,closed,"Revert ""[clangd] Add feature modules registry""",ArcsinX,"Reverts llvm/llvm-project#153756

It leads to new build bot failure.
https://lab.llvm.org/buildbot/#/builders/145/builds/9200

```
BUILD FAILED: failed build (failure)

Step 5 (build-unified-tree) failure: build (failure) ...
254.983 [140/55/1504] Building CXX object tools/clang/tools/extra/clangd/tool/CMakeFiles/obj.clangdMain.dir/ClangdMain.cpp.o
FAILED: tools/clang/tools/extra/clangd/tool/CMakeFiles/obj.clangdMain.dir/ClangdMain.cpp.o
ccache /home/buildbots/llvm-external-buildbots/clang.19.1.7/bin/clang++ --gcc-toolchain=/gcc-toolchain/usr -DGTEST_HAS_RTTI=0 -D_DEBUG -D_GLIBCXX_ASSERTIONS -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/build/tools/clang/tools/extra/clangd/tool -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/tool -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/../include-cleaner/include -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/build/tools/clang/tools/extra/clangd/../clang-tidy -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang/include -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-
 rhel-test/clang-ppc64le-rhel/build/tools/clang/include -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/build/include -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/llvm/include -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd -I/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/build/tools/clang/tools/extra/clangd -fPIC -fno-semantic-interposition -fvisibility-inlines-hidden -Werror -Werror=date-time -Werror=unguarded-availability-new -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long -Wc++98-compat-extra-semi -Wimplicit-fallthrough -Wcovered-switch-default -Wno-noexcept-type -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -Wsuggest-override -Wstring-conversion -Wmisleading-indentation -Wctad-maybe  -unsupported -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -Wno-nested-anon-types -O3 -DNDEBUG -std=c++17  -fno-exceptions -funwind-tables -fno-rtti -UNDEBUG -MD -MT tools/clang/tools/extra/clangd/tool/CMakeFiles/obj.clangdMain.dir/ClangdMain.cpp.o -MF tools/clang/tools/extra/clangd/tool/CMakeFiles/obj.clangdMain.dir/ClangdMain.cpp.o.d -o tools/clang/tools/extra/clangd/tool/CMakeFiles/obj.clangdMain.dir/ClangdMain.cpp.o -c /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/tool/ClangdMain.cpp
In file included from /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/tool/ClangdMain.cpp:10:
In file included from /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/ClangdLSPServer.h:12:
In file included from /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/ClangdServer.h:12:
In file included from /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/CodeComplete.h:18:
In file included from /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/ASTSignals.h:12:
In file included from /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/ParsedAST.h:23:
In file included from /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/CollectMacros.h:12:
In file included from /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/Protocol.h:26:
In file included from /home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/URI.h:14:
/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/llvm/include/llvm/Support/Registry.h:110:47: error: instantiation of variable 'llvm::Registry<clang::clangd::FeatureModule>::Head' required here, but no definition is available [-Werror,-Wundefined-var-template]
  110 |     static iterator begin() { return iterator(Head); }
      |                                               ^
/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/llvm/include/llvm/Support/Registry.h:114:25: note: in instantiation of member function 'llvm::Registry<clang::clangd::FeatureModule>::begin' requested here
  114 |       return make_range(begin(), end());
      |                         ^
/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/clang-tools-extra/clangd/tool/ClangdMain.cpp:1021:64: note: in instantiation of member function 'llvm::Registry<clang::clangd::FeatureModule>::entries' requested here
 1021 |   for (FeatureModuleRegistry::entry E : FeatureModuleRegistry::entries()) {
      |                                                                ^
/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/llvm/include/llvm/Support/Registry.h:61:18: note: forward declaration of template entity is here
   61 |     static node *Head;
      |                  ^
/home/buildbots/llvm-external-buildbots/workers/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm-project/llvm/include/llvm/Support/Registry.h:110:47: note: add an explicit instantiation declaration to suppress this warning if 'llvm::Registry<clang::clangd::FeatureModule>::Head' is explicitly instantiated in another translation unit
  110 |     static iterator begin() { return iterator(Head); }
      |                                               ^
1 error generated.
```

I need some time to fix this in a correct way",2025-08-21T09:34:59Z,2025-08-21T11:02:08Z,2025-08-21T11:02:06Z,2025-08-21T11:02:06Z,True,1,0,2,3,26,3
154710,closed,[AMDGPU] Expand scratch atomics to flat atomics if GAS is enabled,Pierre-vh,,2025-08-21T09:31:32Z,2025-09-01T08:17:39Z,2025-09-01T08:17:38Z,2025-09-01T08:17:38Z,True,5,4,3,14009,2615,9
154707,closed,[libc++][NFC] Simplify the special member functions of the node containers,philnik777,"This patch does two things:
- Remove exception specifications of `= default`ed special member functions
- `= default` special member functions

The first part is NFC because the explicit specification does exactly the same as the implicit specification. The second is NFC because it does exactly what the `= default`ed special member does.
",2025-08-21T09:30:51Z,2025-08-22T09:24:54Z,2025-08-22T09:24:28Z,2025-08-22T09:24:28Z,True,1,0,1,16,40,4
154708,closed,[CodeGen][TLI] Allow targets to custom expand  atomic load/stores,Pierre-vh,"Loads didn't have the `Expand` option in `AtomicExpandPass`. Stores had `Expand`  but it didn't defer to TLI and instead did an action directly.
Add a `CustomExpand` option and make it always map to the TLI hook for all cases. The `Expand` option now refers to a generic expansion for all targets.",2025-08-21T09:31:28Z,2025-08-28T07:58:12Z,2025-08-28T07:58:10Z,2025-08-28T07:58:10Z,True,4,6,2,32,13,4
154709,closed,[AMDGPU] Precommit memory legalizer tests for private AS,Pierre-vh,,2025-08-21T09:31:31Z,2025-08-28T07:58:23Z,2025-08-28T07:58:21Z,2025-08-28T07:58:20Z,True,4,0,3,104759,13,9
154705,closed,[VPlan] Add m_Sub to VPlanPatternMatch. NFC,lukel97,"To mirror PatternMatch.h, and we'll also be able to use it in #152167
",2025-08-21T09:05:53Z,2025-08-21T09:33:47Z,2025-08-21T09:33:47Z,2025-08-21T09:33:47Z,True,2,0,1,8,4,3
154706,closed,[MLIR] Add target_specific_attrs attribute to mlir.global,VadimCurca,"Adds a `target_specific_attrs` optional array attribute to `mlir.global`, as well as conversions to and from LLVM attributes on `llvm::GlobalVariable` objects. This is necessary to preserve unknown attributes on global variables when converting to and from the LLVM Dialect. Previously, any attributes on an `llvm::GlobalVariable` not explicitly modeled by `mlir.global` were dropped during conversion.",2025-08-21T09:20:47Z,2025-09-01T10:39:58Z,2025-09-01T10:39:58Z,2025-09-01T10:39:58Z,True,1,12,1,264,145,10
154701,closed,[tsan][riscv] add Go race detector support for RISC-V sv39 VMA,4a6f656c,"The majority of readily available RISC-V hardware provides sv39, rather than
sv48. Add a memory mapping for sv39, which will allow the Go race detector
to be used on more hardware.",2025-08-21T09:02:29Z,2025-08-25T18:14:05Z,2025-08-25T18:13:44Z,2025-08-25T18:13:44Z,True,8,6,3,44,5,3
154703,closed,"[libc++] Optimize {map,set}::insert(InputIterator, InputIterator)",philnik777,"```
----------------------------------------------------------------------------------------------------------------------------
Benchmark                                                                                                old             new
----------------------------------------------------------------------------------------------------------------------------
std::map<int, int>::ctor(iterator, iterator) (unsorted sequence)/0                                   14.2 ns         14.8 ns
std::map<int, int>::ctor(iterator, iterator) (unsorted sequence)/32                                   519 ns          404 ns
std::map<int, int>::ctor(iterator, iterator) (unsorted sequence)/1024                               52460 ns        36242 ns
std::map<int, int>::ctor(iterator, iterator) (unsorted sequence)/8192                              724222 ns       706496 ns
std::map<int, int>::ctor(iterator, iterator) (sorted sequence)/0                                     14.2 ns         14.7 ns
std::map<int, int>::ctor(iterator, iterator) (sorted sequence)/32                                     429 ns          349 ns
std::map<int, int>::ctor(iterator, iterator) (sorted sequence)/1024                                 23601 ns        14734 ns
std::map<int, int>::ctor(iterator, iterator) (sorted sequence)/8192                                267753 ns       112155 ns
std::map<int, int>::insert(iterator, iterator) (all new keys)/0                                       434 ns          448 ns
std::map<int, int>::insert(iterator, iterator) (all new keys)/32                                      950 ns          963 ns
std::map<int, int>::insert(iterator, iterator) (all new keys)/1024                                  27205 ns        25344 ns
std::map<int, int>::insert(iterator, iterator) (all new keys)/8192                                 294248 ns       280713 ns
std::map<int, int>::insert(iterator, iterator) (half new keys)/0                                      435 ns          449 ns
std::map<int, int>::insert(iterator, iterator) (half new keys)/32                                     771 ns          706 ns
std::map<int, int>::insert(iterator, iterator) (half new keys)/1024                                 30841 ns        17495 ns
std::map<int, int>::insert(iterator, iterator) (half new keys)/8192                                468807 ns       285847 ns
std::map<int, int>::insert(iterator, iterator) (product_iterator from same type)/0                    449 ns          453 ns
std::map<int, int>::insert(iterator, iterator) (product_iterator from same type)/32                  1021 ns          932 ns
std::map<int, int>::insert(iterator, iterator) (product_iterator from same type)/1024               29796 ns        19518 ns
std::map<int, int>::insert(iterator, iterator) (product_iterator from same type)/8192              345688 ns       153966 ns
std::map<int, int>::insert(iterator, iterator) (product_iterator from zip_view)/0                     449 ns          450 ns
std::map<int, int>::insert(iterator, iterator) (product_iterator from zip_view)/32                   1026 ns          807 ns
std::map<int, int>::insert(iterator, iterator) (product_iterator from zip_view)/1024                31632 ns        15573 ns
std::map<int, int>::insert(iterator, iterator) (product_iterator from zip_view)/8192               303024 ns       128946 ns
std::map<int, int>::erase(iterator, iterator) (erase half the container)/0                            447 ns          452 ns
std::map<int, int>::erase(iterator, iterator) (erase half the container)/32                           687 ns          710 ns
std::map<int, int>::erase(iterator, iterator) (erase half the container)/1024                        8604 ns         8581 ns
std::map<int, int>::erase(iterator, iterator) (erase half the container)/8192                       65693 ns        67406 ns
std::map<std::string, int>::ctor(iterator, iterator) (unsorted sequence)/0                           15.0 ns         15.0 ns
std::map<std::string, int>::ctor(iterator, iterator) (unsorted sequence)/32                          2781 ns         1845 ns
std::map<std::string, int>::ctor(iterator, iterator) (unsorted sequence)/1024                      187999 ns       182103 ns
std::map<std::string, int>::ctor(iterator, iterator) (unsorted sequence)/8192                     2937242 ns      2934912 ns
std::map<std::string, int>::ctor(iterator, iterator) (sorted sequence)/0                             15.0 ns         15.2 ns
std::map<std::string, int>::ctor(iterator, iterator) (sorted sequence)/32                            1326 ns         2462 ns
std::map<std::string, int>::ctor(iterator, iterator) (sorted sequence)/1024                         81778 ns        72193 ns
std::map<std::string, int>::ctor(iterator, iterator) (sorted sequence)/8192                       1177292 ns       669152 ns
std::map<std::string, int>::insert(iterator, iterator) (all new keys)/0                               439 ns          454 ns
std::map<std::string, int>::insert(iterator, iterator) (all new keys)/32                             2483 ns         2465 ns
std::map<std::string, int>::insert(iterator, iterator) (all new keys)/1024                         187614 ns       188072 ns
std::map<std::string, int>::insert(iterator, iterator) (all new keys)/8192                        1654675 ns      1706603 ns
std::map<std::string, int>::insert(iterator, iterator) (half new keys)/0                              437 ns          452 ns
std::map<std::string, int>::insert(iterator, iterator) (half new keys)/32                            1836 ns         1820 ns
std::map<std::string, int>::insert(iterator, iterator) (half new keys)/1024                        114885 ns       121865 ns
std::map<std::string, int>::insert(iterator, iterator) (half new keys)/8192                       1151960 ns      1197318 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from same type)/0            438 ns          455 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from same type)/32          1599 ns         1614 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from same type)/1024       95935 ns        82159 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from same type)/8192      776480 ns       941043 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from zip_view)/0             435 ns          462 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from zip_view)/32           1723 ns         1550 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from zip_view)/1024       107096 ns        92850 ns
std::map<std::string, int>::insert(iterator, iterator) (product_iterator from zip_view)/8192       893976 ns       775046 ns
std::map<std::string, int>::erase(iterator, iterator) (erase half the container)/0                    436 ns          453 ns
std::map<std::string, int>::erase(iterator, iterator) (erase half the container)/32                   775 ns          824 ns
std::map<std::string, int>::erase(iterator, iterator) (erase half the container)/1024               20241 ns        20454 ns
std::map<std::string, int>::erase(iterator, iterator) (erase half the container)/8192              139038 ns       138032 ns
std::set<int>::ctor(iterator, iterator) (unsorted sequence)/0                                        14.8 ns         14.7 ns
std::set<int>::ctor(iterator, iterator) (unsorted sequence)/32                                        468 ns          426 ns
std::set<int>::ctor(iterator, iterator) (unsorted sequence)/1024                                    54289 ns        39028 ns
std::set<int>::ctor(iterator, iterator) (unsorted sequence)/8192                                   738438 ns       695720 ns
std::set<int>::ctor(iterator, iterator) (sorted sequence)/0                                          14.7 ns         14.6 ns
std::set<int>::ctor(iterator, iterator) (sorted sequence)/32                                          478 ns          391 ns
std::set<int>::ctor(iterator, iterator) (sorted sequence)/1024                                      24017 ns        13905 ns
std::set<int>::ctor(iterator, iterator) (sorted sequence)/8192                                     267862 ns       111378 ns
std::set<int>::insert(iterator, iterator) (all new keys)/0                                            458 ns          450 ns
std::set<int>::insert(iterator, iterator) (all new keys)/32                                          1066 ns          956 ns
std::set<int>::insert(iterator, iterator) (all new keys)/1024                                       29190 ns        25212 ns
std::set<int>::insert(iterator, iterator) (all new keys)/8192                                      320441 ns       279602 ns
std::set<int>::insert(iterator, iterator) (half new keys)/0                                           454 ns          453 ns
std::set<int>::insert(iterator, iterator) (half new keys)/32                                          816 ns          709 ns
std::set<int>::insert(iterator, iterator) (half new keys)/1024                                      32072 ns        17074 ns
std::set<int>::insert(iterator, iterator) (half new keys)/8192                                     403386 ns       286202 ns
std::set<int>::erase(iterator, iterator) (erase half the container)/0                                 451 ns          452 ns
std::set<int>::erase(iterator, iterator) (erase half the container)/32                                710 ns          703 ns
std::set<int>::erase(iterator, iterator) (erase half the container)/1024                             8261 ns         8499 ns
std::set<int>::erase(iterator, iterator) (erase half the container)/8192                            64466 ns        67343 ns
std::set<std::string>::ctor(iterator, iterator) (unsorted sequence)/0                                15.2 ns         15.0 ns
std::set<std::string>::ctor(iterator, iterator) (unsorted sequence)/32                               3069 ns         3005 ns
std::set<std::string>::ctor(iterator, iterator) (unsorted sequence)/1024                           189552 ns       180933 ns
std::set<std::string>::ctor(iterator, iterator) (unsorted sequence)/8192                          2887579 ns      2691678 ns
std::set<std::string>::ctor(iterator, iterator) (sorted sequence)/0                                  15.1 ns         14.9 ns
std::set<std::string>::ctor(iterator, iterator) (sorted sequence)/32                                 2611 ns         2514 ns
std::set<std::string>::ctor(iterator, iterator) (sorted sequence)/1024                              91581 ns        78727 ns
std::set<std::string>::ctor(iterator, iterator) (sorted sequence)/8192                            1192640 ns      1158959 ns
std::set<std::string>::insert(iterator, iterator) (all new keys)/0                                    452 ns          457 ns
std::set<std::string>::insert(iterator, iterator) (all new keys)/32                                  2530 ns         2544 ns
std::set<std::string>::insert(iterator, iterator) (all new keys)/1024                              195352 ns       179614 ns
std::set<std::string>::insert(iterator, iterator) (all new keys)/8192                             1737890 ns      1749615 ns
std::set<std::string>::insert(iterator, iterator) (half new keys)/0                                   451 ns          454 ns
std::set<std::string>::insert(iterator, iterator) (half new keys)/32                                 1949 ns         1766 ns
std::set<std::string>::insert(iterator, iterator) (half new keys)/1024                             128853 ns       109467 ns
std::set<std::string>::insert(iterator, iterator) (half new keys)/8192                            1233077 ns      1177289 ns
std::set<std::string>::erase(iterator, iterator) (erase half the container)/0                         450 ns          451 ns
std::set<std::string>::erase(iterator, iterator) (erase half the container)/32                        809 ns          812 ns
std::set<std::string>::erase(iterator, iterator) (erase half the container)/1024                    21736 ns        21922 ns
std::set<std::string>::erase(iterator, iterator) (erase half the container)/8192                   135884 ns       133228 ns
```

Fixes #154650",2025-08-21T09:03:35Z,2025-09-03T06:15:33Z,2025-09-03T06:15:30Z,2025-09-03T06:15:30Z,True,1,4,1,402,93,6
154700,closed,[tsan][riscv] correct Go race detector mapping for RISC-V sv48 VMA,4a6f656c,"The executable and heap range for RISC-V sv48 VMA is supposed to end at
0xe000000000, rather than 0x0e00000000 as currently configured.",2025-08-21T08:59:33Z,2025-08-25T18:16:43Z,2025-08-25T18:16:21Z,2025-08-25T18:16:21Z,True,4,0,1,1,1,1
154698,closed,[flang] Fix `replaceAllUsesWith` API violations (1/N),matthias-springer,`replaceAllUsesWith` is not safe to use in a dialect conversion and will be deactivated soon (#154112). Fix commit fixes some API violations. Also some general improvements.,2025-08-21T08:51:06Z,2025-08-21T15:10:25Z,2025-08-21T09:48:15Z,2025-08-21T09:48:15Z,True,1,0,1,10,34,9
154699,closed,[libc++] Attempt to fix CI failure on AIX platforms,frederick-vs-ja,"Currently, the order of functions in the the generated entry lists are changed on AIX platforms, which is possibly the cause of CI failure.",2025-08-21T08:54:28Z,2025-09-02T10:13:29Z,2025-08-28T10:32:24Z,,False,6,0,1,4,4,2
154697,closed,[MLIR][NVVM] Add nanosleep,grypp,,2025-08-21T08:50:07Z,2025-08-21T20:01:53Z,2025-08-21T09:30:42Z,2025-08-21T09:30:42Z,True,1,4,3,47,0,3
154695,closed,[clang][bytecode] Fix a crash in Destroy op,tbaederr,"The local we're destroying might've been created for an expression, in which case asDecl() on the DeclDesc returns nullptr.

Fixes #152958",2025-08-21T08:18:23Z,2025-08-21T18:02:49Z,2025-08-21T11:23:57Z,2025-08-21T11:23:57Z,True,1,1,1,23,3,2
154694,closed,[asan] Pass -falign-functions=16 when building on Windows,zmodem,"Win/ASan relies on the runtime's functions being 16-byte aligned so it can intercept them with hotpatching. This used to be true (but not guaranteed) until #149444.

Pass the flag to explicitly request enough alignment.",2025-08-21T08:11:15Z,2025-08-22T10:23:43Z,2025-08-22T08:40:05Z,2025-08-22T08:40:05Z,True,4,0,2,6,0,1
154692,closed,[clang][bytecode] Fix a crash with typeid pointers,tbaederr,"That code is from a time when typeid pointers didn't exist. We can get there for non-block, non-integral pointers, but we can't meaningfully handle that case. Just return false.

Fixes #153712",2025-08-21T08:04:40Z,2025-08-21T11:34:59Z,2025-08-21T11:13:02Z,2025-08-21T11:13:02Z,True,2,0,1,17,1,2
154693,closed,Orc rt updates,lhames,,2025-08-21T08:10:23Z,2025-08-21T08:59:54Z,2025-08-21T08:59:49Z,,False,0,0,4,642,1,11
154690,closed,AMDGPU: Fix broken check lines in test,arsenm,"SelectionDAG checks were dropped, regenerate the test to
restore them.",2025-08-21T07:58:21Z,2025-08-21T12:00:57Z,2025-08-21T12:00:55Z,2025-08-21T12:00:55Z,True,2,0,1,3407,1159,1
154691,closed,[TableGen][DecoderEmitter] Use KnownBits for filters/encodings (NFCI),s-barannikov,`KnownBits` is faster and smaller than `std::vector<BitValue>`. It is also more convenient to use.,2025-08-21T08:01:20Z,2025-08-21T22:37:51Z,2025-08-21T22:37:48Z,2025-08-21T22:37:48Z,True,4,6,4,86,156,1
154688,closed,[X86] Rename `fp80-strict-vec-cmp.ll` to `scalarize-strict-fsetcc.ll`,abhishek-kaushik22,The test name in #154486 mentioned fp80 which we are not testing in the tests.,2025-08-21T07:48:37Z,2025-08-21T08:58:39Z,2025-08-21T08:58:39Z,2025-08-21T08:58:39Z,True,1,0,1,0,0,1
154689,closed,[clang][bytecode] Check for unknown size array pointers in InitField*,tbaederr,"This can happen when the base pointer is an unknown size array, where !isOnePastEnd(), but isPastEnd().

Fixes #153990",2025-08-21T07:52:56Z,2025-08-21T17:54:46Z,2025-08-21T11:01:45Z,2025-08-21T11:01:45Z,True,1,1,1,40,2,2
154686,closed,[libc++] Fix ABI break introduced by switching to _LIBCPP_COMPRESSED_PAIR,philnik777,"LLVM 20 contained an ABI break that can result in the size of `std::unordered_{map,set,multimap,multiset}` and `std::deque` changing when used with an allocator type that is empty and contains a base class that is the same across rebound allocator instantiations (e.g. ``Allocator<int>`` and ``Allocator<char>`` are both empty and contain the same base class).

In addition, the layout of a user-defined type that:
    - contains one of the following containers: `std::unordered_{map,set,multimap,multiset}`, `std::deque`, `std::map`, `std::set`, `std::multimap`, `std::multiset`, `std::list` or `std::vector`, and
    - passes an empty allocator, comparator or hasher type to that container, and
    - has a member of that same empty allocator, comparator or hasher type inside the enclosing struct, and
    - that member is either marked with `[[no_unique_address]]` or optimized out via the EBO (empty base optimization) technique
  saw its size increase from LLVM 19 to LLVM 20. This was caused by the usage of `[[no_unique_address]]` within some of libc++'s containers in a way that allowed subtle interactions with enclosing objects. This is fixed in LLVM 21 on Clang (returning to the LLVM 19 ABI), however that implies an ABI break from LLVM 20 to LLVM 21.
  Furthermore, fixing this causes a slight regression to constant evaluation support in `std::unique_ptr`. Specifically, constant evaluation will now fail when the deleter relies on being value-initialized for constant-evaluation admissibility. If a default-initialized deleter can be used during constant evaluation, or if the default constructor is non-trivial, the `unique_ptr` is not affected by this regression. In particular, this regression does not impact any `unique_ptr` using the default deleter.

Note that there is currently no way to realistically fix this ABI break on GCC, therefore GCC will remain on the ABI introduced in LLVM 19. That also means that Clang and GCC will have a slightly different ABI for the small subset of types listed above until we are able to apply the same fix we did with Clang on GCC.

We fix this regression by surrounding the members of the `_LIBCPP_COMPRESSED_PAIR` with an anonymous struct. This restricts the shifting of empty types to the front of the `_LIBCPP_COMPRESSED_PAIR` instead of throughout the surrounding object. This ""frees up"" the zero offset to contain another object of the same type, restoring the ability to perform EBO or to elide the storage for a type with `[[no_unique_address]]` in the enclosing (user-defined) struct.

Fixes #154146",2025-08-21T07:26:48Z,2025-08-25T23:34:22Z,2025-08-23T05:58:38Z,2025-08-23T05:58:38Z,True,14,11,1,189,36,14
154685,closed,[RISCV] Move volatile check to isCandidate in VL optimizer. NFC,lukel97,"This keeps it closer to the other legality checks like the FP exceptions check.
It also means that isSupportedInstr only needs to check the opcode, which allows it to be replaced with a TSFlags based check in a later patch.
",2025-08-21T07:14:13Z,2025-08-21T08:37:11Z,2025-08-21T08:37:11Z,2025-08-21T08:37:11Z,True,1,0,1,8,7,1
154684,closed,[memprof] Tidy up #includes (NFC),kazutakahirata,"We've reorganized some code within memprof, but #indludes haven't
quite followed the code that moved.
",2025-08-21T07:00:33Z,2025-08-21T22:04:09Z,2025-08-21T22:03:40Z,2025-08-21T22:03:40Z,True,1,0,1,6,8,3
154682,closed,AMDGPU: Simplify foldImmediate with register class based checks,arsenm,"Generalize the code over the properties of the mov instruction,
rather than maintaining parallel logic to figure out the type
of mov to use. I've maintained the behavior with 16-bit physical
SGPRs, though I think the behavior here is broken and corrupting
any value that happens to be live in the high bits. It just happens
there's no way to separately write to those with a real instruction
but I don't think we should be trying to make assumptions around
that property.

This is NFC-ish. It now does a better job with imm pseudos which
practically won't reach here. This also will make it easier
to support more folds in a future patch.

I added a couple of new tests with 16-bit extract of 64-bit sources.",2025-08-21T06:35:32Z,2025-08-23T03:04:20Z,2025-08-23T02:13:51Z,2025-08-23T02:13:51Z,True,3,5,1,138,42,2
154680,closed,[ADT] Use SmallPtrSet or SmallSet flexibly (NFC),kazutakahirata,"I'm trying to remove the redirection in SmallSet.h:

template <typename PointeeType, unsigned N>
class SmallSet<PointeeType*, N> : public SmallPtrSet<PointeeType*, N>
{};

to make it clear that we are using SmallPtrSet.  There are only
handful places that rely on this redirection.

Now, this unit test is unique in that supply multiple key types via
TYPED_TESTS.

This patch adds UniversalSmallSet to work around the problem.
",2025-08-21T06:26:43Z,2025-08-21T22:03:50Z,2025-08-21T22:03:25Z,2025-08-21T22:03:25Z,True,3,1,2,15,8,1
154681,closed,[llvm] Proofread DebuggingCoroutines.rst,kazutakahirata,,2025-08-21T06:27:40Z,2025-08-21T22:04:00Z,2025-08-21T22:03:33Z,2025-08-21T22:03:33Z,True,2,0,1,29,29,1
154679,closed,[clang-tidy] Use SmallPtrSet directly instead of SmallSet (NFC),kazutakahirata,"I'm trying to remove the redirection in SmallSet.h:

template <typename PointeeType, unsigned N>
class SmallSet<PointeeType*, N> : public SmallPtrSet<PointeeType*, N>
{};

to make it clear that we are using SmallPtrSet.  There are only
handful places that rely on this redirection.

This patch replaces SmallSet to SmallPtrSet where the element type is
a pointer.
",2025-08-21T06:25:15Z,2025-08-21T22:03:40Z,2025-08-21T22:03:17Z,2025-08-21T22:03:17Z,True,1,0,1,5,1,1
154678,closed,[Scalar] Use SmallSetVector instead of SmallVector (NFC),kazutakahirata,"insertParsePoints collects live variables and then deduplicate them
while retaining the original insertion order, which is exactly what
SetVector is designed for.  This patch replaces SmallVector with
SetSmallVector while deleting unique_unsorted.

While we are at it, this patch reduces the number of inline elements
to a reasonable level for linear search.
",2025-08-21T06:24:28Z,2025-08-21T22:03:29Z,2025-08-21T22:03:09Z,2025-08-21T22:03:09Z,True,1,0,1,6,13,1
154673,closed,[TableGen][DecoderEmitter] Outline InstructionEncoding constructor (NFC),s-barannikov,"It is going to grow, so it makes sense to move its definition out of class. Instead, inline `populateInstruction()` into it.
Also, rename a couple of methods to better convey their meaning.
",2025-08-21T05:33:53Z,2025-08-21T06:09:38Z,2025-08-21T06:08:57Z,2025-08-21T06:08:57Z,True,1,0,1,22,23,1
154671,closed,[Clang][Codegen][NFC] Apply rule of three to some classes,shafik,Static analysis flagged these classes as having implemented the destructor but not applying rule of three. This could lead to accidental misuse and so it makes sense to apply it.,2025-08-21T05:31:17Z,2025-08-24T02:12:49Z,2025-08-21T16:36:26Z,2025-08-21T16:36:26Z,True,2,0,1,4,0,1
154667,closed,[RISCV] Correct the OperandType for simm8_unsigned and simm10_unsigned.,topperc,,2025-08-21T04:28:09Z,2025-08-21T19:01:10Z,2025-08-21T19:01:07Z,2025-08-21T19:01:07Z,True,1,0,1,4,2,2
154668,closed,[FuncSpec] Skip SCCP on blocks of dead functions and poison their callsites,XChy,"Fixes #153295.
For test case below:
```llvm
define i32 @caller() {
entry:
  %call1 = call i32 @callee(i32 1)
  %call2 = call i32 @callee(i32 0)
  %cond = icmp eq i32 %call2, 0
  br i1 %cond, label %common.ret, label %if.then

common.ret:                                       ; preds = %entry
  ret i32 0

if.then:                                         ; preds = %entry
  %unreachable_call = call i32 @callee(i32 2)
  ret i32 %unreachable_call
}

define internal i32 @callee(i32 %ac) {
entry:
  br label %ai

ai:                                               ; preds = %ai, %entry
  %add = or i32 0, 0
  %cond = icmp eq i32 %ac, 1
  br i1 %cond, label %aj, label %ai

aj:                                               ; preds = %ai
  ret i32 0
}
```
Before specialization, the SCCP solver determines that
`unreachable_call` is unexecutable, as the value of `callee` can only be
zero.
After specializing the call sites `call1` and `call2`, FnSpecializer
announces `callee` is a dead function since all executable call sites
are specialized. However, the unexecutable call sites can become
executable again after solving specialized calls.
In this testcase, `call2` is considered `Overdefined` after
specialization, making `cond` also `Overdefined`. Thus,
`unreachable_call` becomes executable.
This patch skips SCCP on the blocks in dead functions, and poisons the
call sites of dead functions.",2025-08-21T04:34:26Z,2025-08-28T13:25:28Z,2025-08-27T17:04:53Z,2025-08-27T17:04:53Z,True,14,10,6,159,5,4
154666,closed,[AMDGPU] Set GRANULATED_WAVEFRONT_SGPR_COUNT of compute_pgm_rsrc1 to 0 for gfx10+,Shoreshen,"According to `llvm-project/llvm/docs/AMDGPUUsage.rst::L5212` the `GRANULATED_WAVEFRONT_SGPR_COUNT`, which is `compute_pgm_rsrc1[6:9]` has to be 0 for gfx10+ arch",2025-08-21T04:16:45Z,2025-08-27T02:18:06Z,2025-08-27T01:48:42Z,2025-08-27T01:48:42Z,True,6,7,9,21,6,3
154664,closed,[mlir][vector] Follow-up improvements for multi-dimensional vector.from_elements support,yangtetris,"This PR is a follow-up to #151175 that supported lowering multi-dimensional `vector.from_elements` op to LLVM by introducing a unrolling pattern.

## Changes

### Add `vector.shape_cast` based flattening pattern for `vector.from_elements`

This change introduces a new linearization pattern that uses `vector.shape_cast` to flatten multi-dimensional `vector.from_elements` operations. This provides an alternative approach to the unrolling-based method introduced in #151175.

**Example:**
```mlir
// Before
%v = vector.from_elements %e0, %e1, %e2, %e3 : vector<2x2xf32>

// After
%flat = vector.from_elements %e0, %e1, %e2, %e3 : vector<4xf32>
%result = vector.shape_cast %flat : vector<4xf32> to vector<2x2xf32>
```",2025-08-21T03:39:58Z,2025-08-28T04:41:07Z,2025-08-28T04:41:06Z,2025-08-28T04:41:06Z,True,2,3,3,52,1,2
154665,closed,[llvm][DebugInfo] Fix set debug validation with the addition of the new subrange debug,demoitem,"Set debug was failing validation where the base type was subrange. This has
happened with the addition of the new functionality for proper subrange
debugging. This fix just allows set types to be based on subranges.",2025-08-21T03:41:32Z,2025-08-30T00:37:27Z,2025-08-29T06:56:38Z,2025-08-29T06:56:38Z,True,3,0,1,94,73,2
154663,closed,[Offload][Conformance] Add randomized tests for single-precision bivariate math functions,leandrolcampos,"This patch adds a new set of randomized conformance tests for single-precision bivariate math functions.

The functions included in this set were selected based on the following criteria:
- An implementation exists in `libc/src/math/generic` (i.e., it is not just a wrapper around a compiler built-in).
- The corresponding LLVM CPU libm implementation is correctly rounded.
- The function is listed in Table 65 of the OpenCL C Specification v3.0.19.",2025-08-21T03:27:38Z,2025-08-21T16:54:12Z,2025-08-21T16:27:26Z,2025-08-21T16:27:26Z,True,2,0,3,276,0,8
154662,closed,[Headers][X86] Allow integer/fp absolute intrinsics to be used in constexpr,TianYe717,"Fixes #153556.

In addition, four supporting intrinsics were also updated to constexpr and tested, as they are directly used by the above intrinsics:
- _mm512_mask_and_epi64
- _mm512_mask_and_epi32
- _mm_and_epi32
- _mm256_and_epi32",2025-08-21T03:07:15Z,2025-08-29T00:55:35Z,2025-08-28T09:24:12Z,2025-08-28T09:24:12Z,True,9,0,3,190,141,17
154660,closed,[bazel][LLVMIR] Port #145899: Add target attrs,rupprecht,,2025-08-21T01:57:12Z,2025-08-21T01:59:42Z,2025-08-21T01:59:41Z,2025-08-21T01:59:41Z,True,0,0,1,40,1,2
154661,closed,[bazel] Port #154616: LDBG in ConvertToLLVMPass,rupprecht,,2025-08-21T02:07:15Z,2025-08-21T02:21:15Z,2025-08-21T02:21:14Z,2025-08-21T02:21:14Z,True,0,0,1,1,0,1
154672,closed,[MLIR][NVVM] Add globaltimer_lo support in NVVM Dialect and NVPTX backend,DharuniRAcharya,"This patch adds support for reading the global timer low register in the NVVM dialect and NVPTX backend. 
This change includes addition of `NVVM_GlobalTimerLoOp` operation to NVVM dialect and `int_nvvm_read_ptx_sreg_globaltimer_lo` intrinsic to NVPTX backend.
All the lit tests have been added.",2025-08-21T05:33:20Z,2025-08-25T08:08:47Z,2025-08-25T07:42:16Z,2025-08-25T07:42:16Z,True,7,4,4,67,44,5
154659,closed,[Target] Remove SoftFail field on targets that don't use it (NFC),s-barannikov,"That is, on all targets except ARM and AArch64.
This field used to be required due to a bug, it was fixed long ago by 23423c0ea8d414e56081cb6a13bd8b2cc91513a9.",2025-08-21T01:38:37Z,2025-08-21T02:48:58Z,2025-08-21T02:21:42Z,2025-08-21T02:21:42Z,True,4,0,1,0,139,21
154655,closed,[ProfCheck] Add list of xfail tests,boomanaiden154,"This patch contains a list of tests that are currently failing in the LLVM_ENABLE_PROFCHECK=ON build. This enables passing them to lit through the LIT_XFAIL env variable. This is necessary for getting a buildbot spun up to catch regressions while work is being done to fix the existing issues.

We need to keep this in the LLVM tree so that tests can be removed from the list at the same time the passes causing issues are fixed.

Issue #147390",2025-08-21T00:57:55Z,2025-08-21T01:28:06Z,2025-08-21T01:28:06Z,2025-08-21T01:28:06Z,True,0,0,1,1978,0,1
154654,closed,[PowerPC] Indicate that PPC32PICGOT clobbers LR,cuviper,"This pseudo-instruction emits a local `bl` writing LR, so that must be
saved and restored for the function to return to the right place. If
not, we'll return to the inline `.long` that the `bl` stepped over.

This fixes the `SIGILL` seen in rayon-rs/rayon#1268.
",2025-08-21T00:21:43Z,2025-08-26T07:20:16Z,2025-08-25T22:31:27Z,2025-08-25T22:31:27Z,True,3,0,1,33,1,2
154653,closed,"[MLIR][XeGPU] Update XeGPU create_tdesc, update_offset, load, store and prefetch.",silee2,"This PR tightens some loose ends in some XeGPU op definitions.
Changes are backward compatible except for

- Enforcing previous implicit assumption of load/store/prefetch offsets is required if source/dest is not a scatter tensor descriptor.
- Likewise, enforce offsets is not allowed if source/dest is a scatter tensor descriptor.
- Additionally, allow i64, i32 and ui32 as source/dest for load/store/prefetch. This matches behavior of tensor descriptor which allows i64, i32 and ui32 base address in addition to ui64
- Explicitly state that create_tdesc and update_offset ops are not valid in SIMT mode. create_tdesc and update_offset ops are still available for subgroup level non SIMT mode.

New test cases are added for the new enforced checks.

Other minor implementation change:
XeGPU scatter tensor descriptor only allows 1D base memref. This was check in op verify() method. Now moved to tablegen - ODS - definition.",2025-08-21T00:16:59Z,2025-08-22T21:09:48Z,2025-08-22T21:09:48Z,2025-08-22T21:09:48Z,True,7,30,11,340,102,5
154652,closed,"[libc][math][c++23] Add {modf,remainder,remquo}bf16 math functions",krishna2803,"This PR adds the following basic math functions for BFloat16 type along with the tests:
- modfbf16
- remainderbf16
- remquobf16",2025-08-21T00:14:38Z,2025-08-27T06:12:11Z,2025-08-27T06:12:09Z,2025-08-27T06:12:09Z,True,1,4,34,338,66,25
154651,closed,[lldb/crashlog] Avoid StopAtEntry when launch crashlog in interactive mode,medismailben,"In 88f409194, we changed the way the crashlog scripted process was
launched since the previous approach required to parse the file twice,
by stopping at entry, setting the crashlog object in the middle of the
scripted process launch and resuming it.

Since then, we've introduced SBScriptObject which allows to pass any
arbitrary python object accross the SBAPI boundary to another scripted
affordance.

This patch make sure of that to include the parse crashlog object into
the scripted process launch info dictionary, which eliviates the need to
stop at entry.

Signed-off-by: Med Ismail Bennani <ismail@bennani.ma>",2025-08-21T00:10:27Z,2025-08-22T06:16:45Z,2025-08-22T06:16:45Z,2025-08-22T06:16:45Z,True,1,0,1,21,10,2
154649,closed,[TableGen][DecoderEmitter] Resolve a FIXME in emitDecoder,s-barannikov,"As the FIXME says, we might generate the wrong code to decode an instruction if it had an operand with no encoding bits. An example is M68k's `MOV16ds` that is defined as follows:

```
dag OutOperandList = (outs MxDRD16:$dst);
dag InOperandList = (ins SRC:$src);
list<Register> Uses = [SR];
string AsmString = ""move.w\t$src, $dst""
dag Inst = (descend { 0, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
            (descend { 0, 0, 0 }, (operand ""$dst"", 3)));
```

The `$src` operand is not encoded, but what we see in the decoder is:
```C++
    tmp = fieldFromInstruction(insn, 0, 3);
    if (!Check(S, DecodeDR16RegisterClass(MI, tmp, Address, Decoder)))
    { return MCDisassembler::Fail; }
    if (!Check(S, DecodeSRCRegisterClass(MI, insn, Address, Decoder)))
    { return MCDisassembler::Fail; }
    return S;
```

This calls DecodeSRCRegisterClass passing it `insn` instead of the value of a field that doesn't exist. DecodeSRCRegisterClass has an unconditional llvm_unreachable inside it.

New decoder looks like:
```C++
    tmp = fieldFromInstruction(insn, 0, 3);
    if (!Check(S, DecodeDR16RegisterClass(MI, tmp, Address, Decoder)))
    { return MCDisassembler::Fail; }
    return S;
```

We're still not disassembling this instruction right, but at least we no longer have to provide a weird operand decoder method that accepts instruction bits instead of operand bits.

See #154477 for the origins of the FIXME.
",2025-08-20T23:34:31Z,2025-08-21T22:23:47Z,2025-08-21T22:22:17Z,2025-08-21T22:22:16Z,True,2,0,2,3,33,2
154648,closed,AMDGPU: Refactor lowering of s_barrier to split barriers,nhaehnle,"Let's do the lowering of non-split into split barriers in a new IR pass, AMDGPULowerIntrinsics. That way, there is no code duplication between SelectionDAG and GlobalISel. This simplifies some upcoming extensions to the code.

(cherry picked from commit e246f42fbdad5667d5a395ce65f4900d67610e72)",2025-08-20T23:07:35Z,2025-09-02T23:50:12Z,2025-08-28T14:01:20Z,2025-08-28T14:01:20Z,True,7,9,2,350,77,12
154646,closed,Update SECURITY.multipleyyu,yasralmntsr910-debug,,2025-08-20T22:58:30Z,2025-08-21T08:49:54Z,2025-08-21T08:49:54Z,,False,1,0,1,1,1,1
154647,closed,[IA][RISCV] Recognize interleaving stores that could lower to strided segmented stores,mshockwave,This is a sibling patch to #151612: passing gap masks to the renewal TLI hooks for lowering interleaved stores that use shufflevector to do the interleaving.,2025-08-20T23:06:36Z,2025-08-26T20:22:46Z,2025-08-26T20:22:42Z,2025-08-26T20:22:42Z,True,3,0,1,151,36,11
154645,closed,[AMDGPU] Fix uncaught changes made by AMDGPUPreloadKernelArgumentsPass,mshockwave,"#153975 added a new test, `test/CodeGen/AMDGPU/disable-preload-kernargs.ll`, that triggers an assertion under `LLVM_ENABLE_EXPENSIVE_CHECKS` complaining about not invalidating analyses even when the Pass made changes. It was caused by the fact that the Pass only invalidates the analyses when number of explicit arguments is greater than zero, while it is possible that some functions will be removed even when there isn't any explicit argument, hence the missed invalidation.",2025-08-20T22:45:32Z,2025-08-21T01:40:33Z,2025-08-20T23:23:24Z,2025-08-20T23:23:24Z,True,2,0,1,1,0,1
154644,closed,[TableGen][DecoderEmitter] Infer encoding's HasCompleteDecoder earlier (NFCI),s-barannikov,"If an encoding has a custom decoder, the decoder is assumed to be ""complete"" (always succeed) if hasCompleteDecoder field is true. We determine this when constructing InstructionEncoding.

If the decoder for an encoding is *generated*, it always succeeds if none of the operand decoders can fail. The latter is determined based on the value of operands' DecoderMethod/hasCompleteDecoder. This happens late, at table construction time, making the code harder to follow.

This change moves this logic to the InstructionEncoding constructor.
",2025-08-20T22:44:25Z,2025-08-21T21:41:48Z,2025-08-21T21:35:31Z,2025-08-21T21:35:31Z,True,3,0,1,38,38,1
154642,closed,[MLIR] Adopt LDBG() debug macro in BytecodeWriter.cpp (NFC),joker-eph,,2025-08-20T22:37:31Z,2025-08-20T22:45:39Z,2025-08-20T22:45:39Z,2025-08-20T22:45:39Z,True,1,0,1,6,9,1
154643,closed,[flang] [acc] Adding allocation to the recipe of scalar allocatables,Renaud-K,"Currently the privatization recipe of a scalar allocatable is as follow:

```
 acc.private.recipe @privatization_ref_box_heap_i32 : !fir.ref<!fir.box<!fir.heap<i32>>> init {
  ^bb0(%arg0: !fir.ref<!fir.box<!fir.heap<i32>>>):
    %0 = fir.alloca !fir.box<!fir.heap<i32>>
    %1:2 = hlfir.declare %0 {uniq_name = ""acc.private.init""} : (!fir.ref<!fir.box<!fir.heap<i32>>>) -> (!fir.ref<!fir.box<!fir.heap<i32>>>, !fir.ref<!fir.box<!fir.heap<i32>>>)
    acc.yield %1#0 : !fir.ref<!fir.box<!fir.heap<i32>>>
  }
```

This change adds the allocation for the scalar.",2025-08-20T22:42:31Z,2025-08-20T23:04:57Z,2025-08-20T23:04:57Z,2025-08-20T23:04:57Z,True,1,0,1,8,0,2
154641,closed,[MLIR] Adopt LDBG() macro in PDL ByteCodeExecutor (NFC),joker-eph,,2025-08-20T22:33:41Z,2025-08-20T22:40:53Z,2025-08-20T22:40:53Z,2025-08-20T22:40:53Z,True,1,0,1,125,175,1
154640,closed,"Reapply ""[libc] Enable wide-read memory operations by default on Linux (#154602)""",jhuber6,Reland afterr the sanitizer and arm32 builds complained.,2025-08-20T22:32:28Z,2025-08-21T13:17:41Z,2025-08-21T12:40:24Z,2025-08-21T12:40:23Z,True,4,0,1,35,15,4
154637,closed,[mlir][XeGPU] add unroll patterns for load_matrix and store_matrix,chencha3,As described by the title. ,2025-08-20T22:15:21Z,2025-09-03T18:58:57Z,2025-09-03T18:56:41Z,2025-09-03T18:56:41Z,True,1,17,8,177,16,7
154638,closed,[Flang][Flang-Driver]Fix to add atomic control options in non-fc1 mode,anchuraj,"Fix enables atomic control options in non-fc1 mode. The changes, https://github.com/llvm/llvm-project/pull/151579, https://github.com/llvm/llvm-project/pull/150860 enabled it only in fc1 mode.

 The options used are: 
`-f[no-]atomic-remote-memory`, `-f[no-]atomic-fine-grained-memory`,
 `-f[no-]atomic-ignore-denormal-mode`.
Legacy option `-m[no-]unsafe-fp-atomics` is aliased to
`-f[no-]ignore-denormal-mode`.
 More details can be found in  https://github.com/llvm/llvm-project/pull/102569. ",2025-08-20T22:15:23Z,2025-09-01T23:07:17Z,2025-08-21T17:15:34Z,2025-08-21T17:15:34Z,True,5,0,1,12,1,2
154636,closed,[DwarfDebug] Avoid generating extra DW_TAG_subprogram entries,dzhidzhoev,"The test llvm/test/DebugInfo/X86/pr12831.ll was added in 4d358b55fa to fix the issue with emission of empty DW_TAG_subprogram tags (https://bugs.llvm.org/show_bug.cgi?id=12831).

However, the test output is not checked properly, and it contains:
```
0x00000206:   DW_TAG_subprogram

0x00000207:   DW_TAG_reference_type
                DW_AT_type      (0x00000169 ""class "")
```

The reason is that the DIE for the definition DISubprogram ""writeExpr"" is created during the call to `getOrCreateSubprogramDIE(declaration of writeExpr)`. Therefore, when `getOrCreateSubprogramDIE(definition of writeExpr)` is first called, we get a recursive chain of calls:
```
getOrCreateSubprogramDIE(definition of writeExpr)
getOrCreateSubprogramDIE(declaration of writeExpr)
...
getOrCreateSubprogramDIE(definition of writeExpr)
```

The outer call doesn't expect that the DIE for the definition of writeExpr will be created during the creation of declaration DIE. So, another DIE is created for the same subprogram. In this PR, a check is added to fix that.

I'm not sure whether the problem described in https://bugs.llvm.org/show_bug.cgi?id=12831 is still relevant (I wasn't able to reproduce the problem with C++ reproducer from there). But if this test stays in repo, it should be fixed.",2025-08-20T22:06:51Z,2025-08-29T13:32:00Z,2025-08-29T13:32:00Z,2025-08-29T13:32:00Z,True,4,0,2,43,1,2
154632,closed,Fix non-deterministic failure in ```TestDAP_attach.py``` and improve error message handling in ```lldbdap_testcase.py```,piyushjaiswal98,"* Fixed critical race condition in ```TestDAP_attach.py``` by adding proper thread synchronization and making unique binary files for attachment
* Enhanced error handling for DAP server cleanup to prevent cascading failures.
* Improved Error Message handling in ```lldbdap_testcase.py```",2025-08-20T21:57:31Z,2025-08-21T19:56:01Z,2025-08-21T19:56:01Z,,False,2,1,2,83,10,2
154633,closed,[Debuginfo]   add debuginfod factory method,markram1729,"Possible fix for #63873
",2025-08-20T21:57:38Z,2025-08-29T21:11:48Z,2025-08-29T18:18:53Z,2025-08-29T18:18:53Z,True,9,16,7,31,12,3
154630,closed,[Driver][HIP][HIPSTDPAR][Windows] Link the HIP RT even when `-nostdlib`,AlexVlx,"In Windows, on a MSVC environment (e.g. when linking against the UCRT), `-nostdlib` is used (for example, by CMake) to prevent linking in non-existent `glibc`. However, an unintended side-effect is that we end up never linking in the HIP RT in these circumstances, even when `--hip-link` is explicitly specified. This breaks `hipstdpar`, where we implicitly link in the HIP RT when `--hipstdpar` is passed as a link flag. To fix this, we relax the restriction on linking the HIP RT, for known MSVC environments.  ",2025-08-20T21:55:22Z,2025-08-22T15:58:35Z,2025-08-22T15:58:28Z,2025-08-22T15:58:28Z,True,2,0,7,9,1,2
154639,closed,[HLSL][RootSignature] Introduce `HLSLFrontendAction` to implement `rootsig-define`,inbelic,"This pr implements the functionality of `rootsig-define` as described [here](https://github.com/llvm/wg-hlsl/blob/main/proposals/0029-root-signature-driver-options.md#option--rootsig-define).

This is accomplished by:
- Defining the `fdx-rootsignature-define`, and `rootsig-define` alias, driver options. It simply specifies the name of a macro that will expand to a `LiteralString` to be interpreted as a root signature.
- Introduces a new general frontend action wrapper, `HLSLFrontendAction`. This class allows us to introduce `HLSL` specific behaviour on the underlying action (primarily `ASTFrontendAction`). Which will be further extended, or modularly wrapped, when considering future DXC options.
- Using `HLSLFrontendAction` we can add a new `PPCallback` that will eagerly parse the root signature specified with `rootsig-define` and push it as a `TopLevelDecl` to `Sema`. This occurs when the macro has been lexed.
- Since the root signature is parsed early, before any function declarations, we can then simply attach it to the entry function once it is encountered. Overwriting any applicable root signature attrs.

Resolves https://github.com/llvm/llvm-project/issues/150274

##### Implementation considerations

To implement this feature, note that:
1. We need access to all defined macros. These are created as part of the first `Lex` in `Parser::Initialize` after `PP->EnterMainSourceFile`
2. `RootSignatureDecl` must be added to `Sema` before `Consumer->HandleTranslationUnit` is invoked in `ParseAST`

Therefore, we can't handle the root signature in `HLSLFrontendAction::ExecuteAction` before (from 1.) or after (from 2.) invoking the underlying `ASTFrontendAction`.

This means we could alternatively:
- Manually handle this case [here](https://github.com/llvm/llvm-project/blob/ac8f0bb070c9071742b6f6ce03bebc9d87217830/clang/lib/Parse/ParseAST.cpp#L168) before parsing the first top level decl.
- Hook into when we [return the entry function decl](https://github.com/llvm/llvm-project/blob/ac8f0bb070c9071742b6f6ce03bebc9d87217830/clang/lib/Parse/Parser.cpp#L1190) and then parse the root signature and override its `RootSignatureAttr`.

The proposed solution handles this in the most modular way which should work on any `FrontendAction` that might use the `Parser` without invoking `ParseAST`, and, is not subject to needing to call the hook in multiple different places of function declarators.",2025-08-20T22:21:07Z,2025-08-25T23:09:34Z,2025-08-25T23:09:34Z,2025-08-25T23:09:34Z,True,3,8,11,284,22,16
154628,closed,[NFC][Diagnostics] Reformat `DiagnosticIDs.h` and `AllDiagnostics.h`,delcypher,"When trying to add a new diagnostic category (e.g. #154618) I discovered
`clang-format` really wanted to reformat these files.

My initial attempt was just to suppress the reformatting with `//
clang-format (on|off)` directives but reviewers preferred just
reformatting the files so these two files have been completely
reformatted.

`clang-format` has been disabled for the enum that declares the
`DIAG_START_*` constants because its much less readable after
formatting.

",2025-08-20T21:53:44Z,2025-08-21T21:06:49Z,2025-08-21T21:06:49Z,2025-08-21T21:06:49Z,True,3,5,1,80,77,2
154629,closed,[DirectX] Removing dxbc DescriptorRange from mcbxdc,joaosaffran,MC Descriptor Range Representation currently depend on Object structures. This PR removes that dependency and in order to facilitate removing to_underlying usage in follow-up PRs.,2025-08-20T21:54:43Z,2025-09-10T18:49:02Z,2025-09-10T18:49:01Z,2025-09-10T18:49:01Z,True,1,29,27,52,89,13
154627,closed,[clang] Fix Variable Length Array `_Countof` Crash,Mr-Anyone,"Check for missing VLA size expressions (e.g. in int a[*][10]) before evaluation to avoid crashes in _Countof and constant expression checks.

fixes #152826",2025-08-20T21:47:36Z,2025-08-25T19:06:50Z,2025-08-25T19:06:50Z,2025-08-25T19:06:49Z,True,2,8,3,23,2,4
154626,closed,[MLIR] Adopt LDBG() macro in Affine/Analysis/Utils.cpp (NFC),joker-eph,,2025-08-20T21:35:06Z,2025-08-20T21:56:04Z,2025-08-20T21:56:04Z,2025-08-20T21:56:04Z,True,2,0,1,42,41,2
154625,closed,[MLIR] Adopt LDBG() macro in BasicPtxBuilderInterface.cpp (NFC),joker-eph,,2025-08-20T21:34:27Z,2025-08-20T21:51:18Z,2025-08-20T21:51:18Z,2025-08-20T21:51:18Z,True,1,0,1,4,4,1
154623,closed,[Clang][Codegen][NFC] Add nullptr check in fillOutputFields,shafik,"Static analysis flagged that we were checking for nullptr in Member.FD but soon after unconditionally accessing it. It looks like we should be checking, so I added a check.",2025-08-20T21:29:11Z,2025-08-25T17:34:13Z,2025-08-24T02:13:22Z,2025-08-24T02:13:22Z,True,4,2,2,4,1,1
154622,closed,[libcxx][test] Silence nodiscard warnings,StephanTLavavej,"MSVC's STL marks `std::make_shared`, `std::allocate_shared`, `std::bitset::to_ulong`, and `std::bitset::to_ullong` as `[[nodiscard]]`, which causes these libcxx tests to emit righteous warnings. They should use the traditional `(void)` cast technique to ignore the return values.
",2025-08-20T21:27:42Z,2025-08-21T07:28:21Z,2025-08-21T07:28:17Z,2025-08-21T07:28:17Z,True,1,0,1,6,6,3
154621,closed,[MLIR] Adopt LDBG() debug macros in Affine LoopAnalysis.cpp (NFC),joker-eph,,2025-08-20T21:25:01Z,2025-08-20T21:45:43Z,2025-08-20T21:45:43Z,2025-08-20T21:45:43Z,True,2,0,1,11,10,1
154620,closed,[DirectX] Make dx.RawBuffer an op that can't be replaced,farzonl,"fixes #152348

SimplifyCFG collapses raw buffer store from a if\else load into a select.

This change prevents the TargetExtType dx.Rawbuffer from being replace thus preserving the if\else blocks.

A further change was needed to eliminate the phi node before we process Intrinsic::dx_resource_getpointer in DXILResourceAccess.cpp",2025-08-20T21:17:34Z,2025-08-29T20:09:04Z,2025-08-29T20:09:03Z,2025-08-29T20:09:03Z,True,8,35,14,450,19,15
154619,closed,[MLIR] Update MLIRContext to use the LDBG() style debug macro (NFC),joker-eph,,2025-08-20T21:13:55Z,2025-08-20T21:30:11Z,2025-08-20T21:30:11Z,2025-08-20T21:30:11Z,True,2,0,1,5,8,1
154617,closed,[VPlan] Compute cost of intrinsics directly for VPReplicateRecipe (NFCI).,fhahn,"Handle intrinsic calls in VPReplicateRecipe::computeCost. There are some
intrinsics pseudo intrinsics for which the computed cost is known zero,
so we handle those up front.

Depends on https://github.com/llvm/llvm-project/pull/154291. (included
in PR)",2025-08-20T21:09:17Z,2025-08-27T20:40:50Z,2025-08-27T20:40:47Z,2025-08-27T20:40:47Z,True,2,0,3,31,7,1
154618,closed,"[UBSan][BoundsSafety] Implement support for more expressive ""trap reasons""",delcypher,"In 29992cfd628ed5b968ccb73b17ed0521382ba317 (#145967) support was added for ""trap reasons"" on traps emitted in UBSan in trapping mode (e.g. `-fsanitize-trap=undefined`). This improved the debugging experience by attaching the reason for trapping as a string on the debug info on trap instructions. Consumers such as LLDB can display this trap reason string when the trap is reached.

A limitation of that patch is that the trap reason string is hard-coded for each `SanitizerKind` even though the compiler actually has much more information about the trap available at compile time that could be shown to the user.

This patch is an incremental step in fixing that. It consists of two main steps.

**1. Introduce infrastructure for building trap reason strings**

To make it convenient to construct trap reason strings this patch re-uses Clang's powerful diagnostic infrastructure to provide a convenient API for constructing trap reason strings. This is achieved by:

* Introducing a new `Trap` diagnostic kind to represent trap diagnostics in TableGen files.
* Adding a new `Trap` diagnostic component. While this part probably isn't technically necessary it seemed like I should follow the existing convention used by the diagnostic system.
* Adding `DiagnosticTrapKinds.td` to describe the different trap reasons.
* Add the `TrapReasonBuilder` and `TrapReason` classes to provide an interface for constructing trap reason strings and the trap category. Note this API while similar to `DiagnosticBuilder` has different semantics which are described in the code comments. In particular the behavior when the destructor is called is very different.
* Adding `CodeGenModule::BuildTrapReason()` as a convenient constructor for the `TrapReasonBuilder`.

This use of the diagnostic system is a little unusual in that the emitted trap diagnostics aren't actually consumed by normal diagnostic consumers (e.g. the console). Instead the `TrapReasonBuilder` is just used to format a string, so in effect the builder is somewhat analagous to ""printf"". However, re-using the diagnostics system in this way brings a several benefits:

* The powerful diagnostic templating languge (e.g. `%select`) can be used.
* Formatting Clang data types (e.g. `Type`, `Expr`, etc.) just work out-of-the-box.
* Describing trap reasons in tablegen files opens the door for translation to different languages in the future.
* The `TrapReasonBuilder` API is very similar to `DiagnosticBuilder` which makes it easy to use by anyone already familiar with Clang's diagnostic system.

While UBSan is the first consumer of this new infrastructure the intent is to use this to overhaul how trap reasons are implemented in the `-fbounds-safety` implementation (currently exists downstream).

**2. Apply the new infrastructure to UBSan checks for arithmetic overflow**

To demonstrate using `TrapReasonBuilder` this patch applies it to UBSan traps for arithmetic overflow. The intention is that we would iteratively switch to using the `TrapReasonBuilder` for all UBSan traps where it makes sense in future patches.

Previously for code like

```
int test(int a, int b) { return a + b; }
```

The trap reason string looked like

```
Undefined Behavior Sanitizer: Integer addition overflowed
```

now the trap message looks like:

```
Undefined Behavior Sanitizer: signed integer addition overflow in 'a + b'
```

This string is much more specific because

* It explains if signed or unsigned overflow occurred
* It actually shows the expression that overflowed

One possible downside of this approach is it may blow up Debug info size because now there can be many more distinct trap reason strings. To allow users to avoid this a new driver/cc1 flag `-fsanitize-debug-trap-reasons=` has been added which can either be `none` (disable trap reasons entirely), `basic` (use the per `SanitizerKind` hard coded strings), and `detailed` (use the new expressive trap reasons implemented in this patch). The default is `detailed` to give the best out-of-the-box debugging experience. The existing `-fsanitize-debug-trap-reasons` and  `-fno-sanitize-debug-trap-reasons` have been kept for compatibility and are aliases of the new flag with `detailed` and `none` arguments passed respectively.


rdar://158612755",2025-08-20T21:13:43Z,2025-08-27T22:16:51Z,2025-08-27T20:07:15Z,2025-08-27T20:07:15Z,True,22,72,26,523,58,30
154616,closed,[MLIR] Adopt LDBG() debug macro in ConvertToLLVMPass (NFC),joker-eph,,2025-08-20T21:04:18Z,2025-08-20T21:29:36Z,2025-08-20T21:29:36Z,2025-08-20T21:29:36Z,True,1,0,1,4,3,1
154615,closed,[MLIR] Migrate LICM utils to the LDBG() macro style logging (NFC),joker-eph,,2025-08-20T21:03:29Z,2025-08-20T21:29:51Z,2025-08-20T21:29:51Z,2025-08-20T21:29:51Z,True,2,0,1,6,4,1
154614,closed,[MLIR] Adopt LDBG() debug macro in bufferization (NFC),joker-eph,,2025-08-20T21:02:15Z,2025-08-20T21:14:03Z,2025-08-20T21:14:03Z,2025-08-20T21:14:03Z,True,1,0,1,39,58,2
154611,closed,[BOLT] Validate extra entry point by querying data marker symbols,yozhu,"Look up marker symbols and decide whether candidate is really extra entry
point in `adjustFunctionBoundaries()`.",2025-08-20T20:46:16Z,2025-08-20T21:18:56Z,2025-08-20T21:18:56Z,2025-08-20T21:18:56Z,True,1,0,1,63,38,5
154610,closed,[clang] Remove hasValue() check in `RecordExprEvaluator::VisitCXXConstructExpr()`,tbaederr,"When initializing an anonymous struct via an `IndirectFieldDecl`, we create an `APValue` for the struct, but we leave the fields uninitialized. This would later cause the `CXXConstructExpr` that initializes the anonymous struct member to not do anything since its `APValue` already had a value (but the member didn't). Just remove the check for an `APValue` that already has a value from `RecordExprEvaluator::VisitCXXConstructExpr()`.


Fixes #154567",2025-08-20T20:42:45Z,2025-08-26T23:45:59Z,2025-08-23T06:01:48Z,2025-08-23T06:01:48Z,True,10,3,1,16,4,2
154609,closed,[CIR][NFC] Fix warning in MemOrder lowering,andykaylor,This fixes a warning about having a default case in a fully covered enum switch statement.,2025-08-20T20:41:42Z,2025-08-20T21:30:27Z,2025-08-20T21:30:23Z,2025-08-20T21:30:23Z,True,1,0,1,1,2,1
154608,closed,Move rest of documentation problems that found their way to the SA section,erichkeane,"It was brought up in response to #154605 that these two were in the wrong place as well!  This patch tries to find better places for them,
      and moves them.",2025-08-20T20:39:10Z,2025-08-26T20:13:40Z,2025-08-26T09:41:29Z,2025-08-26T09:41:29Z,True,12,0,1,8,9,1
154607,closed,[lldb] Improve error message in ResolveSDKPathFromDebugInfo (NFC),kastiglione,"While debugging, I saw a log line of:

>  Failed to resolve SDK path: Error while searching for SDK (XcodeSDK ''): Unrecognized SDK type:

Looking into how this might happen, it seems `ResolveSDKPathFromDebugInfo` appears to
(implicitly) assume there's at least one compile unit. This change adds a precondition
to return a meaningful error when there are no compile units.

Original: https://github.com/llvm/llvm-project/pull/146062",2025-08-20T20:32:20Z,2025-08-21T20:23:42Z,2025-08-21T20:23:38Z,2025-08-21T20:23:38Z,True,2,5,2,12,1,1
154606,closed,[lldb] Add missing case statements for SubstBuiltinTemplatePack,kazutakahirata,"This patch fixes:

lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp:4148:11:
error: enumeration value 'SubstBuiltinTemplatePack' not handled in
switch [-Werror,-Wswitch]
4148 |   switch (qual_type->getTypeClass()) {
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~

lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp:4852:11:
error: enumeration value 'SubstBuiltinTemplatePack' not handled in
switch [-Werror,-Wswitch]
4852 |   switch (qual_type->getTypeClass()) {
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~

lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.cpp:5153:11:
error: enumeration value 'SubstBuiltinTemplatePack' not handled in
switch [-Werror,-Wswitch]
5153 |   switch (qual_type->getTypeClass()) {
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~
",2025-08-20T20:26:46Z,2025-08-20T21:53:54Z,2025-08-20T21:53:28Z,2025-08-20T21:53:28Z,True,5,0,3,6,0,1
154604,closed,[AMDGPU] Upstream the Support for array of named barriers,cmc-rep,,2025-08-20T20:16:17Z,2025-08-20T21:53:04Z,2025-08-20T21:53:04Z,2025-08-20T21:53:04Z,True,1,0,1,46,29,3
154605,closed,Move OpenACC Release Note-,erichkeane,"It was pointed out in the review that this ended up in the wrong place!
Moving it.  Note this is a modification of the 21.x release notes, so
doesn't have a corresponding trunk change.
",2025-08-20T20:17:13Z,2025-08-21T06:16:30Z,2025-08-21T06:16:29Z,,False,4,0,1,13,12,1
154602,closed,[libc] Enable wide-read memory operations by default on Linux,jhuber6,"Summary:
This patch changes the linux build to use the wide reads on the memory
operations by default. These memory functions will now potentially read
outside of the bounds explicitly allowed by the current function. While
technically undefined behavior in the standard, plenty of C library
implementations do this. it will not cause a segmentation fault on linux
as long as you do not cross a page boundary, and because we are only
*reading* memory it should not have atomic effects.
",2025-08-20T20:10:57Z,2025-08-20T22:21:05Z,2025-08-20T22:17:13Z,2025-08-20T22:17:13Z,True,6,0,1,25,14,3
154603,closed,[LV] Add assertion for loop predecessor (and terminator of) existing when checking out of loop inst for poison,calebwat,"In LoopVectorizationLegality, TheLoop->getLoopPredecessor() and [...]Predecessor()->getTerminator() are used without a null check. This patch adds an assert that they are non-null, since they are expected to be defined.",2025-08-20T20:11:19Z,2025-08-27T18:02:57Z,2025-08-27T18:02:57Z,,False,2,0,1,5,0,1
154601,closed,[flang] Support UNSIGNED **,klausler,"GNU Fortran added support for UNSIGNED ** UNSIGNED power operations; we should do the same for portability.  This actually simplifies semantics a bit, since I had to go out of my way to exclude Power as a supported operation for UNSIGNED.",2025-08-20T19:50:28Z,2025-08-29T14:48:29Z,2025-08-29T14:48:25Z,2025-08-29T14:48:25Z,True,2,3,1,118,34,9
